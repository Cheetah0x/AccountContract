{"version":3,"file":"npm.noble.9e27e25f298fa8e72aa2.js","mappings":"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","sources":["webpack://account_group_contract/./node_modules/@noble/hashes/esm/_md.js","webpack://account_group_contract/./node_modules/@noble/hashes/esm/sha256.js","webpack://account_group_contract/./node_modules/@noble/hashes/esm/hmac.js","webpack://account_group_contract/./node_modules/@noble/curves/esm/abstract/utils.js","webpack://account_group_contract/./node_modules/@noble/curves/esm/abstract/modular.js","webpack://account_group_contract/./node_modules/@noble/curves/esm/abstract/curve.js","webpack://account_group_contract/./node_modules/@noble/curves/esm/abstract/weierstrass.js","webpack://account_group_contract/./node_modules/@noble/curves/esm/_shortw_utils.js","webpack://account_group_contract/./node_modules/@noble/curves/esm/secp256k1.js","webpack://account_group_contract/./node_modules/@noble/hashes/esm/_assert.js","webpack://account_group_contract/./node_modules/@noble/hashes/esm/_u64.js","webpack://account_group_contract/./node_modules/@noble/hashes/esm/sha3.js","webpack://account_group_contract/./node_modules/@noble/hashes/esm/crypto.js","webpack://account_group_contract/./node_modules/@noble/hashes/esm/utils.js"],"sourcesContent":["import { exists, output } from './_assert.js';\nimport { Hash, createView, toBytes } from './utils.js';\n/**\n * Polyfill for Safari 14\n */\nfunction setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === 'function')\n        return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number((value >> _32n) & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\n/**\n * Choice: a ? b : c\n */\nexport const Chi = (a, b, c) => (a & b) ^ (~a & c);\n/**\n * Majority function, true if any two inputs is true\n */\nexport const Maj = (a, b, c) => (a & b) ^ (a & c) ^ (b & c);\n/**\n * Merkle-Damgard hash construction base class.\n * Could be used to create MD5, RIPEMD, SHA1, SHA2.\n */\nexport class HashMD extends Hash {\n    constructor(blockLen, outputLen, padOffset, isLE) {\n        super();\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.padOffset = padOffset;\n        this.isLE = isLE;\n        this.finished = false;\n        this.length = 0;\n        this.pos = 0;\n        this.destroyed = false;\n        this.buffer = new Uint8Array(blockLen);\n        this.view = createView(this.buffer);\n    }\n    update(data) {\n        exists(this);\n        const { view, buffer, blockLen } = this;\n        data = toBytes(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input, cast it to view and process\n            if (take === blockLen) {\n                const dataView = createView(data);\n                for (; blockLen <= len - pos; pos += blockLen)\n                    this.process(dataView, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(view, 0);\n                this.pos = 0;\n            }\n        }\n        this.length += data.length;\n        this.roundClean();\n        return this;\n    }\n    digestInto(out) {\n        exists(this);\n        output(out, this);\n        this.finished = true;\n        // Padding\n        // We can avoid allocation of buffer for padding completely if it\n        // was previously not allocated here. But it won't change performance.\n        const { buffer, view, blockLen, isLE } = this;\n        let { pos } = this;\n        // append the bit '1' to the message\n        buffer[pos++] = 0b10000000;\n        this.buffer.subarray(pos).fill(0);\n        // we have less than padOffset left in buffer, so we cannot put length in\n        // current block, need process it and pad again\n        if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n        }\n        // Pad until full block byte with zeros\n        for (let i = pos; i < blockLen; i++)\n            buffer[i] = 0;\n        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n        // So we just write lowest 64 bits of that value.\n        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n        this.process(view, 0);\n        const oview = createView(out);\n        const len = this.outputLen;\n        // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n        if (len % 4)\n            throw new Error('_sha2: outputLen should be aligned to 32bit');\n        const outLen = len / 4;\n        const state = this.get();\n        if (outLen > state.length)\n            throw new Error('_sha2: outputLen bigger than state');\n        for (let i = 0; i < outLen; i++)\n            oview.setUint32(4 * i, state[i], isLE);\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        to || (to = new this.constructor());\n        to.set(...this.get());\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\n        to.length = length;\n        to.pos = pos;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        if (length % blockLen)\n            to.buffer.set(buffer);\n        return to;\n    }\n}\n//# sourceMappingURL=_md.js.map","import { HashMD, Chi, Maj } from './_md.js';\nimport { rotr, wrapConstructor } from './utils.js';\n// SHA2-256 need to try 2^128 hashes to execute birthday attack.\n// BTC network is doing 2^67 hashes/sec as per early 2023.\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = /* @__PURE__ */ new Uint32Array([\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n// Initial state:\n// first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19\n// prettier-ignore\nconst SHA256_IV = /* @__PURE__ */ new Uint32Array([\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = /* @__PURE__ */ new Uint32Array(64);\nexport class SHA256 extends HashMD {\n    constructor() {\n        super(64, 32, 8, false);\n        // We cannot use array here since array allows indexing by variable\n        // which means optimizer/compiler cannot use registers.\n        this.A = SHA256_IV[0] | 0;\n        this.B = SHA256_IV[1] | 0;\n        this.C = SHA256_IV[2] | 0;\n        this.D = SHA256_IV[3] | 0;\n        this.E = SHA256_IV[4] | 0;\n        this.F = SHA256_IV[5] | 0;\n        this.G = SHA256_IV[6] | 0;\n        this.H = SHA256_IV[7] | 0;\n    }\n    get() {\n        const { A, B, C, D, E, F, G, H } = this;\n        return [A, B, C, D, E, F, G, H];\n    }\n    // prettier-ignore\n    set(A, B, C, D, E, F, G, H) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n        this.E = E | 0;\n        this.F = F | 0;\n        this.G = G | 0;\n        this.H = H | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4)\n            SHA256_W[i] = view.getUint32(offset, false);\n        for (let i = 16; i < 64; i++) {\n            const W15 = SHA256_W[i - 15];\n            const W2 = SHA256_W[i - 2];\n            const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\n            const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\n            SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n        }\n        // Compression function main loop, 64 rounds\n        let { A, B, C, D, E, F, G, H } = this;\n        for (let i = 0; i < 64; i++) {\n            const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n            const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n            const T2 = (sigma0 + Maj(A, B, C)) | 0;\n            H = G;\n            G = F;\n            F = E;\n            E = (D + T1) | 0;\n            D = C;\n            C = B;\n            B = A;\n            A = (T1 + T2) | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        A = (A + this.A) | 0;\n        B = (B + this.B) | 0;\n        C = (C + this.C) | 0;\n        D = (D + this.D) | 0;\n        E = (E + this.E) | 0;\n        F = (F + this.F) | 0;\n        G = (G + this.G) | 0;\n        H = (H + this.H) | 0;\n        this.set(A, B, C, D, E, F, G, H);\n    }\n    roundClean() {\n        SHA256_W.fill(0);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0, 0, 0, 0);\n        this.buffer.fill(0);\n    }\n}\n// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\nclass SHA224 extends SHA256 {\n    constructor() {\n        super();\n        this.A = 0xc1059ed8 | 0;\n        this.B = 0x367cd507 | 0;\n        this.C = 0x3070dd17 | 0;\n        this.D = 0xf70e5939 | 0;\n        this.E = 0xffc00b31 | 0;\n        this.F = 0x68581511 | 0;\n        this.G = 0x64f98fa7 | 0;\n        this.H = 0xbefa4fa4 | 0;\n        this.outputLen = 28;\n    }\n}\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nexport const sha256 = /* @__PURE__ */ wrapConstructor(() => new SHA256());\n/**\n * SHA2-224 hash function\n */\nexport const sha224 = /* @__PURE__ */ wrapConstructor(() => new SHA224());\n//# sourceMappingURL=sha256.js.map","import { hash as assertHash, bytes as assertBytes, exists as assertExists } from './_assert.js';\nimport { Hash, toBytes } from './utils.js';\n// HMAC (RFC 2104)\nexport class HMAC extends Hash {\n    constructor(hash, _key) {\n        super();\n        this.finished = false;\n        this.destroyed = false;\n        assertHash(hash);\n        const key = toBytes(_key);\n        this.iHash = hash.create();\n        if (typeof this.iHash.update !== 'function')\n            throw new Error('Expected instance of class which extends utils.Hash');\n        this.blockLen = this.iHash.blockLen;\n        this.outputLen = this.iHash.outputLen;\n        const blockLen = this.blockLen;\n        const pad = new Uint8Array(blockLen);\n        // blockLen can be bigger than outputLen\n        pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36;\n        this.iHash.update(pad);\n        // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n        this.oHash = hash.create();\n        // Undo internal XOR && apply outer XOR\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36 ^ 0x5c;\n        this.oHash.update(pad);\n        pad.fill(0);\n    }\n    update(buf) {\n        assertExists(this);\n        this.iHash.update(buf);\n        return this;\n    }\n    digestInto(out) {\n        assertExists(this);\n        assertBytes(out, this.outputLen);\n        this.finished = true;\n        this.iHash.digestInto(out);\n        this.oHash.update(out);\n        this.oHash.digestInto(out);\n        this.destroy();\n    }\n    digest() {\n        const out = new Uint8Array(this.oHash.outputLen);\n        this.digestInto(out);\n        return out;\n    }\n    _cloneInto(to) {\n        // Create new instance without calling constructor since key already in state and we don't know it.\n        to || (to = Object.create(Object.getPrototypeOf(this), {}));\n        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n        to = to;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        to.blockLen = blockLen;\n        to.outputLen = outputLen;\n        to.oHash = oHash._cloneInto(to.oHash);\n        to.iHash = iHash._cloneInto(to.iHash);\n        return to;\n    }\n    destroy() {\n        this.destroyed = true;\n        this.oHash.destroy();\n        this.iHash.destroy();\n    }\n}\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n * @example\n * import { hmac } from '@noble/hashes/hmac';\n * import { sha256 } from '@noble/hashes/sha2';\n * const mac1 = hmac(sha256, 'key', 'message');\n */\nexport const hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();\nhmac.create = (hash, key) => new HMAC(hash, key);\n//# sourceMappingURL=hmac.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// 100 lines of code in the file are duplicated from noble-hashes (utils).\n// This is OK: `abstract` directory does not use noble-hashes.\n// User may opt-in into using different hashing library. This way, noble-hashes\n// won't be included into their bundle.\nconst _0n = /* @__PURE__ */ BigInt(0);\nconst _1n = /* @__PURE__ */ BigInt(1);\nconst _2n = /* @__PURE__ */ BigInt(2);\nexport function isBytes(a) {\n    return (a instanceof Uint8Array ||\n        (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array'));\n}\nexport function abytes(item) {\n    if (!isBytes(item))\n        throw new Error('Uint8Array expected');\n}\nexport function abool(title, value) {\n    if (typeof value !== 'boolean')\n        throw new Error(`${title} must be valid boolean, got \"${value}\".`);\n}\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes) {\n    abytes(bytes);\n    // pre-caching improves the speed 6x\n    let hex = '';\n    for (let i = 0; i < bytes.length; i++) {\n        hex += hexes[bytes[i]];\n    }\n    return hex;\n}\nexport function numberToHexUnpadded(num) {\n    const hex = num.toString(16);\n    return hex.length & 1 ? `0${hex}` : hex;\n}\nexport function hexToNumber(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    // Big Endian\n    return BigInt(hex === '' ? '0' : `0x${hex}`);\n}\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 };\nfunction asciiToBase16(char) {\n    if (char >= asciis._0 && char <= asciis._9)\n        return char - asciis._0;\n    if (char >= asciis._A && char <= asciis._F)\n        return char - (asciis._A - 10);\n    if (char >= asciis._a && char <= asciis._f)\n        return char - (asciis._a - 10);\n    return;\n}\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    const hl = hex.length;\n    const al = hl / 2;\n    if (hl % 2)\n        throw new Error('padded hex string expected, got unpadded hex of length ' + hl);\n    const array = new Uint8Array(al);\n    for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n        const n1 = asciiToBase16(hex.charCodeAt(hi));\n        const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n        if (n1 === undefined || n2 === undefined) {\n            const char = hex[hi] + hex[hi + 1];\n            throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n        }\n        array[ai] = n1 * 16 + n2;\n    }\n    return array;\n}\n// BE: Big Endian, LE: Little Endian\nexport function bytesToNumberBE(bytes) {\n    return hexToNumber(bytesToHex(bytes));\n}\nexport function bytesToNumberLE(bytes) {\n    abytes(bytes);\n    return hexToNumber(bytesToHex(Uint8Array.from(bytes).reverse()));\n}\nexport function numberToBytesBE(n, len) {\n    return hexToBytes(n.toString(16).padStart(len * 2, '0'));\n}\nexport function numberToBytesLE(n, len) {\n    return numberToBytesBE(n, len).reverse();\n}\n// Unpadded, rarely used\nexport function numberToVarBytesBE(n) {\n    return hexToBytes(numberToHexUnpadded(n));\n}\n/**\n * Takes hex string or Uint8Array, converts to Uint8Array.\n * Validates output length.\n * Will throw error for other types.\n * @param title descriptive title for an error e.g. 'private key'\n * @param hex hex string or Uint8Array\n * @param expectedLength optional, will compare to result array's length\n * @returns\n */\nexport function ensureBytes(title, hex, expectedLength) {\n    let res;\n    if (typeof hex === 'string') {\n        try {\n            res = hexToBytes(hex);\n        }\n        catch (e) {\n            throw new Error(`${title} must be valid hex string, got \"${hex}\". Cause: ${e}`);\n        }\n    }\n    else if (isBytes(hex)) {\n        // Uint8Array.from() instead of hash.slice() because node.js Buffer\n        // is instance of Uint8Array, and its slice() creates **mutable** copy\n        res = Uint8Array.from(hex);\n    }\n    else {\n        throw new Error(`${title} must be hex string or Uint8Array`);\n    }\n    const len = res.length;\n    if (typeof expectedLength === 'number' && len !== expectedLength)\n        throw new Error(`${title} expected ${expectedLength} bytes, got ${len}`);\n    return res;\n}\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays) {\n    let sum = 0;\n    for (let i = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        abytes(a);\n        sum += a.length;\n    }\n    const res = new Uint8Array(sum);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        res.set(a, pad);\n        pad += a.length;\n    }\n    return res;\n}\n// Compares 2 u8a-s in kinda constant time\nexport function equalBytes(a, b) {\n    if (a.length !== b.length)\n        return false;\n    let diff = 0;\n    for (let i = 0; i < a.length; i++)\n        diff |= a[i] ^ b[i];\n    return diff === 0;\n}\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str) {\n    if (typeof str !== 'string')\n        throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n// Is positive bigint\nconst isPosBig = (n) => typeof n === 'bigint' && _0n <= n;\nexport function inRange(n, min, max) {\n    return isPosBig(n) && isPosBig(min) && isPosBig(max) && min <= n && n < max;\n}\n/**\n * Asserts min <= n < max. NOTE: It's < max and not <= max.\n * @example\n * aInRange('x', x, 1n, 256n); // would assume x is in (1n..255n)\n */\nexport function aInRange(title, n, min, max) {\n    // Why min <= n < max and not a (min < n < max) OR b (min <= n <= max)?\n    // consider P=256n, min=0n, max=P\n    // - a for min=0 would require -1:          `inRange('x', x, -1n, P)`\n    // - b would commonly require subtraction:  `inRange('x', x, 0n, P - 1n)`\n    // - our way is the cleanest:               `inRange('x', x, 0n, P)\n    if (!inRange(n, min, max))\n        throw new Error(`expected valid ${title}: ${min} <= n < ${max}, got ${typeof n} ${n}`);\n}\n// Bit operations\n/**\n * Calculates amount of bits in a bigint.\n * Same as `n.toString(2).length`\n */\nexport function bitLen(n) {\n    let len;\n    for (len = 0; n > _0n; n >>= _1n, len += 1)\n        ;\n    return len;\n}\n/**\n * Gets single bit at position.\n * NOTE: first bit position is 0 (same as arrays)\n * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`\n */\nexport function bitGet(n, pos) {\n    return (n >> BigInt(pos)) & _1n;\n}\n/**\n * Sets single bit at position.\n */\nexport function bitSet(n, pos, value) {\n    return n | ((value ? _1n : _0n) << BigInt(pos));\n}\n/**\n * Calculate mask for N bits. Not using ** operator with bigints because of old engines.\n * Same as BigInt(`0b${Array(i).fill('1').join('')}`)\n */\nexport const bitMask = (n) => (_2n << BigInt(n - 1)) - _1n;\n// DRBG\nconst u8n = (data) => new Uint8Array(data); // creates Uint8Array\nconst u8fr = (arr) => Uint8Array.from(arr); // another shortcut\n/**\n * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n * @returns function that will call DRBG until 2nd arg returns something meaningful\n * @example\n *   const drbg = createHmacDRBG<Key>(32, 32, hmac);\n *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined\n */\nexport function createHmacDrbg(hashLen, qByteLen, hmacFn) {\n    if (typeof hashLen !== 'number' || hashLen < 2)\n        throw new Error('hashLen must be a number');\n    if (typeof qByteLen !== 'number' || qByteLen < 2)\n        throw new Error('qByteLen must be a number');\n    if (typeof hmacFn !== 'function')\n        throw new Error('hmacFn must be a function');\n    // Step B, Step C: set hashLen to 8*ceil(hlen/8)\n    let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n    let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same\n    let i = 0; // Iterations counter, will throw when over 1000\n    const reset = () => {\n        v.fill(1);\n        k.fill(0);\n        i = 0;\n    };\n    const h = (...b) => hmacFn(k, v, ...b); // hmac(k)(v, ...values)\n    const reseed = (seed = u8n()) => {\n        // HMAC-DRBG reseed() function. Steps D-G\n        k = h(u8fr([0x00]), seed); // k = hmac(k || v || 0x00 || seed)\n        v = h(); // v = hmac(k || v)\n        if (seed.length === 0)\n            return;\n        k = h(u8fr([0x01]), seed); // k = hmac(k || v || 0x01 || seed)\n        v = h(); // v = hmac(k || v)\n    };\n    const gen = () => {\n        // HMAC-DRBG generate() function\n        if (i++ >= 1000)\n            throw new Error('drbg: tried 1000 values');\n        let len = 0;\n        const out = [];\n        while (len < qByteLen) {\n            v = h();\n            const sl = v.slice();\n            out.push(sl);\n            len += v.length;\n        }\n        return concatBytes(...out);\n    };\n    const genUntil = (seed, pred) => {\n        reset();\n        reseed(seed); // Steps D-G\n        let res = undefined; // Step H: grind until k is in [1..n-1]\n        while (!(res = pred(gen())))\n            reseed();\n        reset();\n        return res;\n    };\n    return genUntil;\n}\n// Validating curves and fields\nconst validatorFns = {\n    bigint: (val) => typeof val === 'bigint',\n    function: (val) => typeof val === 'function',\n    boolean: (val) => typeof val === 'boolean',\n    string: (val) => typeof val === 'string',\n    stringOrUint8Array: (val) => typeof val === 'string' || isBytes(val),\n    isSafeInteger: (val) => Number.isSafeInteger(val),\n    array: (val) => Array.isArray(val),\n    field: (val, object) => object.Fp.isValid(val),\n    hash: (val) => typeof val === 'function' && Number.isSafeInteger(val.outputLen),\n};\n// type Record<K extends string | number | symbol, T> = { [P in K]: T; }\nexport function validateObject(object, validators, optValidators = {}) {\n    const checkField = (fieldName, type, isOptional) => {\n        const checkVal = validatorFns[type];\n        if (typeof checkVal !== 'function')\n            throw new Error(`Invalid validator \"${type}\", expected function`);\n        const val = object[fieldName];\n        if (isOptional && val === undefined)\n            return;\n        if (!checkVal(val, object)) {\n            throw new Error(`Invalid param ${String(fieldName)}=${val} (${typeof val}), expected ${type}`);\n        }\n    };\n    for (const [fieldName, type] of Object.entries(validators))\n        checkField(fieldName, type, false);\n    for (const [fieldName, type] of Object.entries(optValidators))\n        checkField(fieldName, type, true);\n    return object;\n}\n// validate type tests\n// const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };\n// const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!\n// // Should fail type-check\n// const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });\n// const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });\n// const z3 = validateObject(o, { test: 'boolean', z: 'bug' });\n// const z4 = validateObject(o, { a: 'boolean', z: 'bug' });\n/**\n * throws not implemented error\n */\nexport const notImplemented = () => {\n    throw new Error('not implemented');\n};\n/**\n * Memoizes (caches) computation result.\n * Uses WeakMap: the value is going auto-cleaned by GC after last reference is removed.\n */\nexport function memoized(fn) {\n    const map = new WeakMap();\n    return (arg, ...args) => {\n        const val = map.get(arg);\n        if (val !== undefined)\n            return val;\n        const computed = fn(arg, ...args);\n        map.set(arg, computed);\n        return computed;\n    };\n}\n//# sourceMappingURL=utils.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Utilities for modular arithmetics and finite fields\nimport { bitMask, bytesToNumberBE, bytesToNumberLE, ensureBytes, numberToBytesBE, numberToBytesLE, validateObject, } from './utils.js';\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3);\n// prettier-ignore\nconst _4n = BigInt(4), _5n = BigInt(5), _8n = BigInt(8);\n// prettier-ignore\nconst _9n = BigInt(9), _16n = BigInt(16);\n// Calculates a modulo b\nexport function mod(a, b) {\n    const result = a % b;\n    return result >= _0n ? result : b + result;\n}\n/**\n * Efficiently raise num to power and do modular division.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n * @example\n * pow(2n, 6n, 11n) // 64n % 11n == 9n\n */\n// TODO: use field version && remove\nexport function pow(num, power, modulo) {\n    if (modulo <= _0n || power < _0n)\n        throw new Error('Expected power/modulo > 0');\n    if (modulo === _1n)\n        return _0n;\n    let res = _1n;\n    while (power > _0n) {\n        if (power & _1n)\n            res = (res * num) % modulo;\n        num = (num * num) % modulo;\n        power >>= _1n;\n    }\n    return res;\n}\n// Does x ^ (2 ^ power) mod p. pow2(30, 4) == 30 ^ (2 ^ 4)\nexport function pow2(x, power, modulo) {\n    let res = x;\n    while (power-- > _0n) {\n        res *= res;\n        res %= modulo;\n    }\n    return res;\n}\n// Inverses number over modulo\nexport function invert(number, modulo) {\n    if (number === _0n || modulo <= _0n) {\n        throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n    }\n    // Euclidean GCD https://brilliant.org/wiki/extended-euclidean-algorithm/\n    // Fermat's little theorem \"CT-like\" version inv(n) = n^(m-2) mod m is 30x slower.\n    let a = mod(number, modulo);\n    let b = modulo;\n    // prettier-ignore\n    let x = _0n, y = _1n, u = _1n, v = _0n;\n    while (a !== _0n) {\n        // JIT applies optimization if those two lines follow each other\n        const q = b / a;\n        const r = b % a;\n        const m = x - u * q;\n        const n = y - v * q;\n        // prettier-ignore\n        b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    const gcd = b;\n    if (gcd !== _1n)\n        throw new Error('invert: does not exist');\n    return mod(x, modulo);\n}\n/**\n * Tonelli-Shanks square root search algorithm.\n * 1. https://eprint.iacr.org/2012/685.pdf (page 12)\n * 2. Square Roots from 1; 24, 51, 10 to Dan Shanks\n * Will start an infinite loop if field order P is not prime.\n * @param P field order\n * @returns function that takes field Fp (created from P) and number n\n */\nexport function tonelliShanks(P) {\n    // Legendre constant: used to calculate Legendre symbol (a | p),\n    // which denotes the value of a^((p-1)/2) (mod p).\n    // (a | p) ≡ 1    if a is a square (mod p)\n    // (a | p) ≡ -1   if a is not a square (mod p)\n    // (a | p) ≡ 0    if a ≡ 0 (mod p)\n    const legendreC = (P - _1n) / _2n;\n    let Q, S, Z;\n    // Step 1: By factoring out powers of 2 from p - 1,\n    // find q and s such that p - 1 = q*(2^s) with q odd\n    for (Q = P - _1n, S = 0; Q % _2n === _0n; Q /= _2n, S++)\n        ;\n    // Step 2: Select a non-square z such that (z | p) ≡ -1 and set c ≡ zq\n    for (Z = _2n; Z < P && pow(Z, legendreC, P) !== P - _1n; Z++)\n        ;\n    // Fast-path\n    if (S === 1) {\n        const p1div4 = (P + _1n) / _4n;\n        return function tonelliFast(Fp, n) {\n            const root = Fp.pow(n, p1div4);\n            if (!Fp.eql(Fp.sqr(root), n))\n                throw new Error('Cannot find square root');\n            return root;\n        };\n    }\n    // Slow-path\n    const Q1div2 = (Q + _1n) / _2n;\n    return function tonelliSlow(Fp, n) {\n        // Step 0: Check that n is indeed a square: (n | p) should not be ≡ -1\n        if (Fp.pow(n, legendreC) === Fp.neg(Fp.ONE))\n            throw new Error('Cannot find square root');\n        let r = S;\n        // TODO: will fail at Fp2/etc\n        let g = Fp.pow(Fp.mul(Fp.ONE, Z), Q); // will update both x and b\n        let x = Fp.pow(n, Q1div2); // first guess at the square root\n        let b = Fp.pow(n, Q); // first guess at the fudge factor\n        while (!Fp.eql(b, Fp.ONE)) {\n            if (Fp.eql(b, Fp.ZERO))\n                return Fp.ZERO; // https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm (4. If t = 0, return r = 0)\n            // Find m such b^(2^m)==1\n            let m = 1;\n            for (let t2 = Fp.sqr(b); m < r; m++) {\n                if (Fp.eql(t2, Fp.ONE))\n                    break;\n                t2 = Fp.sqr(t2); // t2 *= t2\n            }\n            // NOTE: r-m-1 can be bigger than 32, need to convert to bigint before shift, otherwise there will be overflow\n            const ge = Fp.pow(g, _1n << BigInt(r - m - 1)); // ge = 2^(r-m-1)\n            g = Fp.sqr(ge); // g = ge * ge\n            x = Fp.mul(x, ge); // x *= ge\n            b = Fp.mul(b, g); // b *= g\n            r = m;\n        }\n        return x;\n    };\n}\nexport function FpSqrt(P) {\n    // NOTE: different algorithms can give different roots, it is up to user to decide which one they want.\n    // For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).\n    // P ≡ 3 (mod 4)\n    // √n = n^((P+1)/4)\n    if (P % _4n === _3n) {\n        // Not all roots possible!\n        // const ORDER =\n        //   0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn;\n        // const NUM = 72057594037927816n;\n        const p1div4 = (P + _1n) / _4n;\n        return function sqrt3mod4(Fp, n) {\n            const root = Fp.pow(n, p1div4);\n            // Throw if root**2 != n\n            if (!Fp.eql(Fp.sqr(root), n))\n                throw new Error('Cannot find square root');\n            return root;\n        };\n    }\n    // Atkin algorithm for q ≡ 5 (mod 8), https://eprint.iacr.org/2012/685.pdf (page 10)\n    if (P % _8n === _5n) {\n        const c1 = (P - _5n) / _8n;\n        return function sqrt5mod8(Fp, n) {\n            const n2 = Fp.mul(n, _2n);\n            const v = Fp.pow(n2, c1);\n            const nv = Fp.mul(n, v);\n            const i = Fp.mul(Fp.mul(nv, _2n), v);\n            const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));\n            if (!Fp.eql(Fp.sqr(root), n))\n                throw new Error('Cannot find square root');\n            return root;\n        };\n    }\n    // P ≡ 9 (mod 16)\n    if (P % _16n === _9n) {\n        // NOTE: tonelli is too slow for bls-Fp2 calculations even on start\n        // Means we cannot use sqrt for constants at all!\n        //\n        // const c1 = Fp.sqrt(Fp.negate(Fp.ONE)); //  1. c1 = sqrt(-1) in F, i.e., (c1^2) == -1 in F\n        // const c2 = Fp.sqrt(c1);                //  2. c2 = sqrt(c1) in F, i.e., (c2^2) == c1 in F\n        // const c3 = Fp.sqrt(Fp.negate(c1));     //  3. c3 = sqrt(-c1) in F, i.e., (c3^2) == -c1 in F\n        // const c4 = (P + _7n) / _16n;           //  4. c4 = (q + 7) / 16        # Integer arithmetic\n        // sqrt = (x) => {\n        //   let tv1 = Fp.pow(x, c4);             //  1. tv1 = x^c4\n        //   let tv2 = Fp.mul(c1, tv1);           //  2. tv2 = c1 * tv1\n        //   const tv3 = Fp.mul(c2, tv1);         //  3. tv3 = c2 * tv1\n        //   let tv4 = Fp.mul(c3, tv1);           //  4. tv4 = c3 * tv1\n        //   const e1 = Fp.equals(Fp.square(tv2), x); //  5.  e1 = (tv2^2) == x\n        //   const e2 = Fp.equals(Fp.square(tv3), x); //  6.  e2 = (tv3^2) == x\n        //   tv1 = Fp.cmov(tv1, tv2, e1); //  7. tv1 = CMOV(tv1, tv2, e1)  # Select tv2 if (tv2^2) == x\n        //   tv2 = Fp.cmov(tv4, tv3, e2); //  8. tv2 = CMOV(tv4, tv3, e2)  # Select tv3 if (tv3^2) == x\n        //   const e3 = Fp.equals(Fp.square(tv2), x); //  9.  e3 = (tv2^2) == x\n        //   return Fp.cmov(tv1, tv2, e3); //  10.  z = CMOV(tv1, tv2, e3)  # Select the sqrt from tv1 and tv2\n        // }\n    }\n    // Other cases: Tonelli-Shanks algorithm\n    return tonelliShanks(P);\n}\n// Little-endian check for first LE bit (last BE bit);\nexport const isNegativeLE = (num, modulo) => (mod(num, modulo) & _1n) === _1n;\n// prettier-ignore\nconst FIELD_FIELDS = [\n    'create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr',\n    'eql', 'add', 'sub', 'mul', 'pow', 'div',\n    'addN', 'subN', 'mulN', 'sqrN'\n];\nexport function validateField(field) {\n    const initial = {\n        ORDER: 'bigint',\n        MASK: 'bigint',\n        BYTES: 'isSafeInteger',\n        BITS: 'isSafeInteger',\n    };\n    const opts = FIELD_FIELDS.reduce((map, val) => {\n        map[val] = 'function';\n        return map;\n    }, initial);\n    return validateObject(field, opts);\n}\n// Generic field functions\n/**\n * Same as `pow` but for Fp: non-constant-time.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n */\nexport function FpPow(f, num, power) {\n    // Should have same speed as pow for bigints\n    // TODO: benchmark!\n    if (power < _0n)\n        throw new Error('Expected power > 0');\n    if (power === _0n)\n        return f.ONE;\n    if (power === _1n)\n        return num;\n    let p = f.ONE;\n    let d = num;\n    while (power > _0n) {\n        if (power & _1n)\n            p = f.mul(p, d);\n        d = f.sqr(d);\n        power >>= _1n;\n    }\n    return p;\n}\n/**\n * Efficiently invert an array of Field elements.\n * `inv(0)` will return `undefined` here: make sure to throw an error.\n */\nexport function FpInvertBatch(f, nums) {\n    const tmp = new Array(nums.length);\n    // Walk from first to last, multiply them by each other MOD p\n    const lastMultiplied = nums.reduce((acc, num, i) => {\n        if (f.is0(num))\n            return acc;\n        tmp[i] = acc;\n        return f.mul(acc, num);\n    }, f.ONE);\n    // Invert last element\n    const inverted = f.inv(lastMultiplied);\n    // Walk from last to first, multiply them by inverted each other MOD p\n    nums.reduceRight((acc, num, i) => {\n        if (f.is0(num))\n            return acc;\n        tmp[i] = f.mul(acc, tmp[i]);\n        return f.mul(acc, num);\n    }, inverted);\n    return tmp;\n}\nexport function FpDiv(f, lhs, rhs) {\n    return f.mul(lhs, typeof rhs === 'bigint' ? invert(rhs, f.ORDER) : f.inv(rhs));\n}\nexport function FpLegendre(order) {\n    // (a | p) ≡ 1    if a is a square (mod p), quadratic residue\n    // (a | p) ≡ -1   if a is not a square (mod p), quadratic non residue\n    // (a | p) ≡ 0    if a ≡ 0 (mod p)\n    const legendreConst = (order - _1n) / _2n; // Integer arithmetic\n    return (f, x) => f.pow(x, legendreConst);\n}\n// This function returns True whenever the value x is a square in the field F.\nexport function FpIsSquare(f) {\n    const legendre = FpLegendre(f.ORDER);\n    return (x) => {\n        const p = legendre(f, x);\n        return f.eql(p, f.ZERO) || f.eql(p, f.ONE);\n    };\n}\n// CURVE.n lengths\nexport function nLength(n, nBitLength) {\n    // Bit size, byte size of CURVE.n\n    const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;\n    const nByteLength = Math.ceil(_nBitLength / 8);\n    return { nBitLength: _nBitLength, nByteLength };\n}\n/**\n * Initializes a finite field over prime. **Non-primes are not supported.**\n * Do not init in loop: slow. Very fragile: always run a benchmark on a change.\n * Major performance optimizations:\n * * a) denormalized operations like mulN instead of mul\n * * b) same object shape: never add or remove keys\n * * c) Object.freeze\n * NOTE: operations don't check 'isValid' for all elements for performance reasons,\n * it is caller responsibility to check this.\n * This is low-level code, please make sure you know what you doing.\n * @param ORDER prime positive bigint\n * @param bitLen how many bits the field consumes\n * @param isLE (def: false) if encoding / decoding should be in little-endian\n * @param redef optional faster redefinitions of sqrt and other methods\n */\nexport function Field(ORDER, bitLen, isLE = false, redef = {}) {\n    if (ORDER <= _0n)\n        throw new Error(`Expected Field ORDER > 0, got ${ORDER}`);\n    const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen);\n    if (BYTES > 2048)\n        throw new Error('Field lengths over 2048 bytes are not supported');\n    const sqrtP = FpSqrt(ORDER);\n    const f = Object.freeze({\n        ORDER,\n        BITS,\n        BYTES,\n        MASK: bitMask(BITS),\n        ZERO: _0n,\n        ONE: _1n,\n        create: (num) => mod(num, ORDER),\n        isValid: (num) => {\n            if (typeof num !== 'bigint')\n                throw new Error(`Invalid field element: expected bigint, got ${typeof num}`);\n            return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible\n        },\n        is0: (num) => num === _0n,\n        isOdd: (num) => (num & _1n) === _1n,\n        neg: (num) => mod(-num, ORDER),\n        eql: (lhs, rhs) => lhs === rhs,\n        sqr: (num) => mod(num * num, ORDER),\n        add: (lhs, rhs) => mod(lhs + rhs, ORDER),\n        sub: (lhs, rhs) => mod(lhs - rhs, ORDER),\n        mul: (lhs, rhs) => mod(lhs * rhs, ORDER),\n        pow: (num, power) => FpPow(f, num, power),\n        div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),\n        // Same as above, but doesn't normalize\n        sqrN: (num) => num * num,\n        addN: (lhs, rhs) => lhs + rhs,\n        subN: (lhs, rhs) => lhs - rhs,\n        mulN: (lhs, rhs) => lhs * rhs,\n        inv: (num) => invert(num, ORDER),\n        sqrt: redef.sqrt || ((n) => sqrtP(f, n)),\n        invertBatch: (lst) => FpInvertBatch(f, lst),\n        // TODO: do we really need constant cmov?\n        // We don't have const-time bigints anyway, so probably will be not very useful\n        cmov: (a, b, c) => (c ? b : a),\n        toBytes: (num) => (isLE ? numberToBytesLE(num, BYTES) : numberToBytesBE(num, BYTES)),\n        fromBytes: (bytes) => {\n            if (bytes.length !== BYTES)\n                throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes.length}`);\n            return isLE ? bytesToNumberLE(bytes) : bytesToNumberBE(bytes);\n        },\n    });\n    return Object.freeze(f);\n}\nexport function FpSqrtOdd(Fp, elm) {\n    if (!Fp.isOdd)\n        throw new Error(`Field doesn't have isOdd`);\n    const root = Fp.sqrt(elm);\n    return Fp.isOdd(root) ? root : Fp.neg(root);\n}\nexport function FpSqrtEven(Fp, elm) {\n    if (!Fp.isOdd)\n        throw new Error(`Field doesn't have isOdd`);\n    const root = Fp.sqrt(elm);\n    return Fp.isOdd(root) ? Fp.neg(root) : root;\n}\n/**\n * \"Constant-time\" private key generation utility.\n * Same as mapKeyToField, but accepts less bytes (40 instead of 48 for 32-byte field).\n * Which makes it slightly more biased, less secure.\n * @deprecated use mapKeyToField instead\n */\nexport function hashToPrivateScalar(hash, groupOrder, isLE = false) {\n    hash = ensureBytes('privateHash', hash);\n    const hashLen = hash.length;\n    const minLen = nLength(groupOrder).nByteLength + 8;\n    if (minLen < 24 || hashLen < minLen || hashLen > 1024)\n        throw new Error(`hashToPrivateScalar: expected ${minLen}-1024 bytes of input, got ${hashLen}`);\n    const num = isLE ? bytesToNumberLE(hash) : bytesToNumberBE(hash);\n    return mod(num, groupOrder - _1n) + _1n;\n}\n/**\n * Returns total number of bytes consumed by the field element.\n * For example, 32 bytes for usual 256-bit weierstrass curve.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of field\n */\nexport function getFieldBytesLength(fieldOrder) {\n    if (typeof fieldOrder !== 'bigint')\n        throw new Error('field order must be bigint');\n    const bitLength = fieldOrder.toString(2).length;\n    return Math.ceil(bitLength / 8);\n}\n/**\n * Returns minimal amount of bytes that can be safely reduced\n * by field order.\n * Should be 2^-128 for 128-bit curve such as P256.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of target hash\n */\nexport function getMinHashLength(fieldOrder) {\n    const length = getFieldBytesLength(fieldOrder);\n    return length + Math.ceil(length / 2);\n}\n/**\n * \"Constant-time\" private key generation utility.\n * Can take (n + n/2) or more bytes of uniform input e.g. from CSPRNG or KDF\n * and convert them into private scalar, with the modulo bias being negligible.\n * Needs at least 48 bytes of input for 32-byte private key.\n * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/\n * FIPS 186-5, A.2 https://csrc.nist.gov/publications/detail/fips/186/5/final\n * RFC 9380, https://www.rfc-editor.org/rfc/rfc9380#section-5\n * @param hash hash output from SHA3 or a similar function\n * @param groupOrder size of subgroup - (e.g. secp256k1.CURVE.n)\n * @param isLE interpret hash bytes as LE num\n * @returns valid private scalar\n */\nexport function mapHashToField(key, fieldOrder, isLE = false) {\n    const len = key.length;\n    const fieldLen = getFieldBytesLength(fieldOrder);\n    const minLen = getMinHashLength(fieldOrder);\n    // No small numbers: need to understand bias story. No huge numbers: easier to detect JS timings.\n    if (len < 16 || len < minLen || len > 1024)\n        throw new Error(`expected ${minLen}-1024 bytes of input, got ${len}`);\n    const num = isLE ? bytesToNumberBE(key) : bytesToNumberLE(key);\n    // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0\n    const reduced = mod(num, fieldOrder - _1n) + _1n;\n    return isLE ? numberToBytesLE(reduced, fieldLen) : numberToBytesBE(reduced, fieldLen);\n}\n//# sourceMappingURL=modular.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Abelian group utilities\nimport { validateField, nLength } from './modular.js';\nimport { validateObject, bitLen } from './utils.js';\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\n// Since points in different groups cannot be equal (different object constructor),\n// we can have single place to store precomputes\nconst pointPrecomputes = new WeakMap();\nconst pointWindowSizes = new WeakMap(); // This allows use make points immutable (nothing changes inside)\n// Elliptic curve multiplication of Point by scalar. Fragile.\n// Scalars should always be less than curve order: this should be checked inside of a curve itself.\n// Creates precomputation tables for fast multiplication:\n// - private scalar is split by fixed size windows of W bits\n// - every window point is collected from window's table & added to accumulator\n// - since windows are different, same point inside tables won't be accessed more than once per calc\n// - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)\n// - +1 window is neccessary for wNAF\n// - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication\n// TODO: Research returning 2d JS array of windows, instead of a single window. This would allow\n// windows to be in different memory locations\nexport function wNAF(c, bits) {\n    const constTimeNegate = (condition, item) => {\n        const neg = item.negate();\n        return condition ? neg : item;\n    };\n    const validateW = (W) => {\n        if (!Number.isSafeInteger(W) || W <= 0 || W > bits)\n            throw new Error(`Wrong window size=${W}, should be [1..${bits}]`);\n    };\n    const opts = (W) => {\n        validateW(W);\n        const windows = Math.ceil(bits / W) + 1; // +1, because\n        const windowSize = 2 ** (W - 1); // -1 because we skip zero\n        return { windows, windowSize };\n    };\n    return {\n        constTimeNegate,\n        // non-const time multiplication ladder\n        unsafeLadder(elm, n) {\n            let p = c.ZERO;\n            let d = elm;\n            while (n > _0n) {\n                if (n & _1n)\n                    p = p.add(d);\n                d = d.double();\n                n >>= _1n;\n            }\n            return p;\n        },\n        /**\n         * Creates a wNAF precomputation window. Used for caching.\n         * Default window size is set by `utils.precompute()` and is equal to 8.\n         * Number of precomputed points depends on the curve size:\n         * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:\n         * - 𝑊 is the window size\n         * - 𝑛 is the bitlength of the curve order.\n         * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.\n         * @returns precomputed point tables flattened to a single array\n         */\n        precomputeWindow(elm, W) {\n            const { windows, windowSize } = opts(W);\n            const points = [];\n            let p = elm;\n            let base = p;\n            for (let window = 0; window < windows; window++) {\n                base = p;\n                points.push(base);\n                // =1, because we skip zero\n                for (let i = 1; i < windowSize; i++) {\n                    base = base.add(p);\n                    points.push(base);\n                }\n                p = base.double();\n            }\n            return points;\n        },\n        /**\n         * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.\n         * @param W window size\n         * @param precomputes precomputed tables\n         * @param n scalar (we don't check here, but should be less than curve order)\n         * @returns real and fake (for const-time) points\n         */\n        wNAF(W, precomputes, n) {\n            // TODO: maybe check that scalar is less than group order? wNAF behavious is undefined otherwise\n            // But need to carefully remove other checks before wNAF. ORDER == bits here\n            const { windows, windowSize } = opts(W);\n            let p = c.ZERO;\n            let f = c.BASE;\n            const mask = BigInt(2 ** W - 1); // Create mask with W ones: 0b1111 for W=4 etc.\n            const maxNumber = 2 ** W;\n            const shiftBy = BigInt(W);\n            for (let window = 0; window < windows; window++) {\n                const offset = window * windowSize;\n                // Extract W bits.\n                let wbits = Number(n & mask);\n                // Shift number by W bits.\n                n >>= shiftBy;\n                // If the bits are bigger than max size, we'll split those.\n                // +224 => 256 - 32\n                if (wbits > windowSize) {\n                    wbits -= maxNumber;\n                    n += _1n;\n                }\n                // This code was first written with assumption that 'f' and 'p' will never be infinity point:\n                // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,\n                // there is negate now: it is possible that negated element from low value\n                // would be the same as high element, which will create carry into next window.\n                // It's not obvious how this can fail, but still worth investigating later.\n                // Check if we're onto Zero point.\n                // Add random point inside current window to f.\n                const offset1 = offset;\n                const offset2 = offset + Math.abs(wbits) - 1; // -1 because we skip zero\n                const cond1 = window % 2 !== 0;\n                const cond2 = wbits < 0;\n                if (wbits === 0) {\n                    // The most important part for const-time getPublicKey\n                    f = f.add(constTimeNegate(cond1, precomputes[offset1]));\n                }\n                else {\n                    p = p.add(constTimeNegate(cond2, precomputes[offset2]));\n                }\n            }\n            // JIT-compiler should not eliminate f here, since it will later be used in normalizeZ()\n            // Even if the variable is still unused, there are some checks which will\n            // throw an exception, so compiler needs to prove they won't happen, which is hard.\n            // At this point there is a way to F be infinity-point even if p is not,\n            // which makes it less const-time: around 1 bigint multiply.\n            return { p, f };\n        },\n        wNAFCached(P, n, transform) {\n            const W = pointWindowSizes.get(P) || 1;\n            // Calculate precomputes on a first run, reuse them after\n            let comp = pointPrecomputes.get(P);\n            if (!comp) {\n                comp = this.precomputeWindow(P, W);\n                if (W !== 1)\n                    pointPrecomputes.set(P, transform(comp));\n            }\n            return this.wNAF(W, comp, n);\n        },\n        // We calculate precomputes for elliptic curve point multiplication\n        // using windowed method. This specifies window size and\n        // stores precomputed values. Usually only base point would be precomputed.\n        setWindowSize(P, W) {\n            validateW(W);\n            pointWindowSizes.set(P, W);\n            pointPrecomputes.delete(P);\n        },\n    };\n}\n/**\n * Pippenger algorithm for multi-scalar multiplication (MSM).\n * MSM is basically (Pa + Qb + Rc + ...).\n * 30x faster vs naive addition on L=4096, 10x faster with precomputes.\n * For N=254bit, L=1, it does: 1024 ADD + 254 DBL. For L=5: 1536 ADD + 254 DBL.\n * Algorithmically constant-time (for same L), even when 1 point + scalar, or when scalar = 0.\n * @param c Curve Point constructor\n * @param field field over CURVE.N - important that it's not over CURVE.P\n * @param points array of L curve points\n * @param scalars array of L scalars (aka private keys / bigints)\n */\nexport function pippenger(c, field, points, scalars) {\n    // If we split scalars by some window (let's say 8 bits), every chunk will only\n    // take 256 buckets even if there are 4096 scalars, also re-uses double.\n    // TODO:\n    // - https://eprint.iacr.org/2024/750.pdf\n    // - https://tches.iacr.org/index.php/TCHES/article/view/10287\n    // 0 is accepted in scalars\n    if (!Array.isArray(points) || !Array.isArray(scalars) || scalars.length !== points.length)\n        throw new Error('arrays of points and scalars must have equal length');\n    scalars.forEach((s, i) => {\n        if (!field.isValid(s))\n            throw new Error(`wrong scalar at index ${i}`);\n    });\n    points.forEach((p, i) => {\n        if (!(p instanceof c))\n            throw new Error(`wrong point at index ${i}`);\n    });\n    const wbits = bitLen(BigInt(points.length));\n    const windowSize = wbits > 12 ? wbits - 3 : wbits > 4 ? wbits - 2 : wbits ? 2 : 1; // in bits\n    const MASK = (1 << windowSize) - 1;\n    const buckets = new Array(MASK + 1).fill(c.ZERO); // +1 for zero array\n    const lastBits = Math.floor((field.BITS - 1) / windowSize) * windowSize;\n    let sum = c.ZERO;\n    for (let i = lastBits; i >= 0; i -= windowSize) {\n        buckets.fill(c.ZERO);\n        for (let j = 0; j < scalars.length; j++) {\n            const scalar = scalars[j];\n            const wbits = Number((scalar >> BigInt(i)) & BigInt(MASK));\n            buckets[wbits] = buckets[wbits].add(points[j]);\n        }\n        let resI = c.ZERO; // not using this will do small speed-up, but will lose ct\n        // Skip first bucket, because it is zero\n        for (let j = buckets.length - 1, sumI = c.ZERO; j > 0; j--) {\n            sumI = sumI.add(buckets[j]);\n            resI = resI.add(sumI);\n        }\n        sum = sum.add(resI);\n        if (i !== 0)\n            for (let j = 0; j < windowSize; j++)\n                sum = sum.double();\n    }\n    return sum;\n}\nexport function validateBasic(curve) {\n    validateField(curve.Fp);\n    validateObject(curve, {\n        n: 'bigint',\n        h: 'bigint',\n        Gx: 'field',\n        Gy: 'field',\n    }, {\n        nBitLength: 'isSafeInteger',\n        nByteLength: 'isSafeInteger',\n    });\n    // Set defaults\n    return Object.freeze({\n        ...nLength(curve.n, curve.nBitLength),\n        ...curve,\n        ...{ p: curve.Fp.ORDER },\n    });\n}\n//# sourceMappingURL=curve.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Short Weierstrass curve. The formula is: y² = x³ + ax + b\nimport { validateBasic, wNAF, pippenger, } from './curve.js';\nimport * as mod from './modular.js';\nimport * as ut from './utils.js';\nimport { ensureBytes, memoized, abool } from './utils.js';\nfunction validateSigVerOpts(opts) {\n    if (opts.lowS !== undefined)\n        abool('lowS', opts.lowS);\n    if (opts.prehash !== undefined)\n        abool('prehash', opts.prehash);\n}\nfunction validatePointOpts(curve) {\n    const opts = validateBasic(curve);\n    ut.validateObject(opts, {\n        a: 'field',\n        b: 'field',\n    }, {\n        allowedPrivateKeyLengths: 'array',\n        wrapPrivateKey: 'boolean',\n        isTorsionFree: 'function',\n        clearCofactor: 'function',\n        allowInfinityPoint: 'boolean',\n        fromBytes: 'function',\n        toBytes: 'function',\n    });\n    const { endo, Fp, a } = opts;\n    if (endo) {\n        if (!Fp.eql(a, Fp.ZERO)) {\n            throw new Error('Endomorphism can only be defined for Koblitz curves that have a=0');\n        }\n        if (typeof endo !== 'object' ||\n            typeof endo.beta !== 'bigint' ||\n            typeof endo.splitScalar !== 'function') {\n            throw new Error('Expected endomorphism with beta: bigint and splitScalar: function');\n        }\n    }\n    return Object.freeze({ ...opts });\n}\nconst { bytesToNumberBE: b2n, hexToBytes: h2b } = ut;\n/**\n * ASN.1 DER encoding utilities. ASN is very complex & fragile. Format:\n *\n *     [0x30 (SEQUENCE), bytelength, 0x02 (INTEGER), intLength, R, 0x02 (INTEGER), intLength, S]\n *\n * Docs: https://letsencrypt.org/docs/a-warm-welcome-to-asn1-and-der/, https://luca.ntop.org/Teaching/Appunti/asn1.html\n */\nexport const DER = {\n    // asn.1 DER encoding utils\n    Err: class DERErr extends Error {\n        constructor(m = '') {\n            super(m);\n        }\n    },\n    // Basic building block is TLV (Tag-Length-Value)\n    _tlv: {\n        encode: (tag, data) => {\n            const { Err: E } = DER;\n            if (tag < 0 || tag > 256)\n                throw new E('tlv.encode: wrong tag');\n            if (data.length & 1)\n                throw new E('tlv.encode: unpadded data');\n            const dataLen = data.length / 2;\n            const len = ut.numberToHexUnpadded(dataLen);\n            if ((len.length / 2) & 128)\n                throw new E('tlv.encode: long form length too big');\n            // length of length with long form flag\n            const lenLen = dataLen > 127 ? ut.numberToHexUnpadded((len.length / 2) | 128) : '';\n            return `${ut.numberToHexUnpadded(tag)}${lenLen}${len}${data}`;\n        },\n        // v - value, l - left bytes (unparsed)\n        decode(tag, data) {\n            const { Err: E } = DER;\n            let pos = 0;\n            if (tag < 0 || tag > 256)\n                throw new E('tlv.encode: wrong tag');\n            if (data.length < 2 || data[pos++] !== tag)\n                throw new E('tlv.decode: wrong tlv');\n            const first = data[pos++];\n            const isLong = !!(first & 128); // First bit of first length byte is flag for short/long form\n            let length = 0;\n            if (!isLong)\n                length = first;\n            else {\n                // Long form: [longFlag(1bit), lengthLength(7bit), length (BE)]\n                const lenLen = first & 127;\n                if (!lenLen)\n                    throw new E('tlv.decode(long): indefinite length not supported');\n                if (lenLen > 4)\n                    throw new E('tlv.decode(long): byte length is too big'); // this will overflow u32 in js\n                const lengthBytes = data.subarray(pos, pos + lenLen);\n                if (lengthBytes.length !== lenLen)\n                    throw new E('tlv.decode: length bytes not complete');\n                if (lengthBytes[0] === 0)\n                    throw new E('tlv.decode(long): zero leftmost byte');\n                for (const b of lengthBytes)\n                    length = (length << 8) | b;\n                pos += lenLen;\n                if (length < 128)\n                    throw new E('tlv.decode(long): not minimal encoding');\n            }\n            const v = data.subarray(pos, pos + length);\n            if (v.length !== length)\n                throw new E('tlv.decode: wrong value length');\n            return { v, l: data.subarray(pos + length) };\n        },\n    },\n    // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n    // since we always use positive integers here. It must always be empty:\n    // - add zero byte if exists\n    // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n    _int: {\n        encode(num) {\n            const { Err: E } = DER;\n            if (num < _0n)\n                throw new E('integer: negative integers are not allowed');\n            let hex = ut.numberToHexUnpadded(num);\n            // Pad with zero byte if negative flag is present\n            if (Number.parseInt(hex[0], 16) & 0b1000)\n                hex = '00' + hex;\n            if (hex.length & 1)\n                throw new E('unexpected assertion');\n            return hex;\n        },\n        decode(data) {\n            const { Err: E } = DER;\n            if (data[0] & 128)\n                throw new E('Invalid signature integer: negative');\n            if (data[0] === 0x00 && !(data[1] & 128))\n                throw new E('Invalid signature integer: unnecessary leading zero');\n            return b2n(data);\n        },\n    },\n    toSig(hex) {\n        // parse DER signature\n        const { Err: E, _int: int, _tlv: tlv } = DER;\n        const data = typeof hex === 'string' ? h2b(hex) : hex;\n        ut.abytes(data);\n        const { v: seqBytes, l: seqLeftBytes } = tlv.decode(0x30, data);\n        if (seqLeftBytes.length)\n            throw new E('Invalid signature: left bytes after parsing');\n        const { v: rBytes, l: rLeftBytes } = tlv.decode(0x02, seqBytes);\n        const { v: sBytes, l: sLeftBytes } = tlv.decode(0x02, rLeftBytes);\n        if (sLeftBytes.length)\n            throw new E('Invalid signature: left bytes after parsing');\n        return { r: int.decode(rBytes), s: int.decode(sBytes) };\n    },\n    hexFromSig(sig) {\n        const { _tlv: tlv, _int: int } = DER;\n        const seq = `${tlv.encode(0x02, int.encode(sig.r))}${tlv.encode(0x02, int.encode(sig.s))}`;\n        return tlv.encode(0x30, seq);\n    },\n};\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);\nexport function weierstrassPoints(opts) {\n    const CURVE = validatePointOpts(opts);\n    const { Fp } = CURVE; // All curves has same field / group length as for now, but they can differ\n    const Fn = mod.Field(CURVE.n, CURVE.nBitLength);\n    const toBytes = CURVE.toBytes ||\n        ((_c, point, _isCompressed) => {\n            const a = point.toAffine();\n            return ut.concatBytes(Uint8Array.from([0x04]), Fp.toBytes(a.x), Fp.toBytes(a.y));\n        });\n    const fromBytes = CURVE.fromBytes ||\n        ((bytes) => {\n            // const head = bytes[0];\n            const tail = bytes.subarray(1);\n            // if (head !== 0x04) throw new Error('Only non-compressed encoding is supported');\n            const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n            const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n            return { x, y };\n        });\n    /**\n     * y² = x³ + ax + b: Short weierstrass curve formula\n     * @returns y²\n     */\n    function weierstrassEquation(x) {\n        const { a, b } = CURVE;\n        const x2 = Fp.sqr(x); // x * x\n        const x3 = Fp.mul(x2, x); // x2 * x\n        return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x3 + a * x + b\n    }\n    // Validate whether the passed curve params are valid.\n    // We check if curve equation works for generator point.\n    // `assertValidity()` won't work: `isTorsionFree()` is not available at this point in bls12-381.\n    // ProjectivePoint class has not been initialized yet.\n    if (!Fp.eql(Fp.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))\n        throw new Error('bad generator point: equation left != right');\n    // Valid group elements reside in range 1..n-1\n    function isWithinCurveOrder(num) {\n        return ut.inRange(num, _1n, CURVE.n);\n    }\n    // Validates if priv key is valid and converts it to bigint.\n    // Supports options allowedPrivateKeyLengths and wrapPrivateKey.\n    function normPrivateKeyToScalar(key) {\n        const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n: N } = CURVE;\n        if (lengths && typeof key !== 'bigint') {\n            if (ut.isBytes(key))\n                key = ut.bytesToHex(key);\n            // Normalize to hex string, pad. E.g. P521 would norm 130-132 char hex to 132-char bytes\n            if (typeof key !== 'string' || !lengths.includes(key.length))\n                throw new Error('Invalid key');\n            key = key.padStart(nByteLength * 2, '0');\n        }\n        let num;\n        try {\n            num =\n                typeof key === 'bigint'\n                    ? key\n                    : ut.bytesToNumberBE(ensureBytes('private key', key, nByteLength));\n        }\n        catch (error) {\n            throw new Error(`private key must be ${nByteLength} bytes, hex or bigint, not ${typeof key}`);\n        }\n        if (wrapPrivateKey)\n            num = mod.mod(num, N); // disabled by default, enabled for BLS\n        ut.aInRange('private key', num, _1n, N); // num in range [1..N-1]\n        return num;\n    }\n    function assertPrjPoint(other) {\n        if (!(other instanceof Point))\n            throw new Error('ProjectivePoint expected');\n    }\n    // Memoized toAffine / validity check. They are heavy. Points are immutable.\n    // Converts Projective point to affine (x, y) coordinates.\n    // Can accept precomputed Z^-1 - for example, from invertBatch.\n    // (x, y, z) ∋ (x=x/z, y=y/z)\n    const toAffineMemo = memoized((p, iz) => {\n        const { px: x, py: y, pz: z } = p;\n        // Fast-path for normalized points\n        if (Fp.eql(z, Fp.ONE))\n            return { x, y };\n        const is0 = p.is0();\n        // If invZ was 0, we return zero point. However we still want to execute\n        // all operations, so we replace invZ with a random number, 1.\n        if (iz == null)\n            iz = is0 ? Fp.ONE : Fp.inv(z);\n        const ax = Fp.mul(x, iz);\n        const ay = Fp.mul(y, iz);\n        const zz = Fp.mul(z, iz);\n        if (is0)\n            return { x: Fp.ZERO, y: Fp.ZERO };\n        if (!Fp.eql(zz, Fp.ONE))\n            throw new Error('invZ was invalid');\n        return { x: ax, y: ay };\n    });\n    // NOTE: on exception this will crash 'cached' and no value will be set.\n    // Otherwise true will be return\n    const assertValidMemo = memoized((p) => {\n        if (p.is0()) {\n            // (0, 1, 0) aka ZERO is invalid in most contexts.\n            // In BLS, ZERO can be serialized, so we allow it.\n            // (0, 0, 0) is wrong representation of ZERO and is always invalid.\n            if (CURVE.allowInfinityPoint && !Fp.is0(p.py))\n                return;\n            throw new Error('bad point: ZERO');\n        }\n        // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`\n        const { x, y } = p.toAffine();\n        // Check if x, y are valid field elements\n        if (!Fp.isValid(x) || !Fp.isValid(y))\n            throw new Error('bad point: x or y not FE');\n        const left = Fp.sqr(y); // y²\n        const right = weierstrassEquation(x); // x³ + ax + b\n        if (!Fp.eql(left, right))\n            throw new Error('bad point: equation left != right');\n        if (!p.isTorsionFree())\n            throw new Error('bad point: not in prime-order subgroup');\n        return true;\n    });\n    /**\n     * Projective Point works in 3d / projective (homogeneous) coordinates: (x, y, z) ∋ (x=x/z, y=y/z)\n     * Default Point works in 2d / affine coordinates: (x, y)\n     * We're doing calculations in projective, because its operations don't require costly inversion.\n     */\n    class Point {\n        constructor(px, py, pz) {\n            this.px = px;\n            this.py = py;\n            this.pz = pz;\n            if (px == null || !Fp.isValid(px))\n                throw new Error('x required');\n            if (py == null || !Fp.isValid(py))\n                throw new Error('y required');\n            if (pz == null || !Fp.isValid(pz))\n                throw new Error('z required');\n            Object.freeze(this);\n        }\n        // Does not validate if the point is on-curve.\n        // Use fromHex instead, or call assertValidity() later.\n        static fromAffine(p) {\n            const { x, y } = p || {};\n            if (!p || !Fp.isValid(x) || !Fp.isValid(y))\n                throw new Error('invalid affine point');\n            if (p instanceof Point)\n                throw new Error('projective point not allowed');\n            const is0 = (i) => Fp.eql(i, Fp.ZERO);\n            // fromAffine(x:0, y:0) would produce (x:0, y:0, z:1), but we need (x:0, y:1, z:0)\n            if (is0(x) && is0(y))\n                return Point.ZERO;\n            return new Point(x, y, Fp.ONE);\n        }\n        get x() {\n            return this.toAffine().x;\n        }\n        get y() {\n            return this.toAffine().y;\n        }\n        /**\n         * Takes a bunch of Projective Points but executes only one\n         * inversion on all of them. Inversion is very slow operation,\n         * so this improves performance massively.\n         * Optimization: converts a list of projective points to a list of identical points with Z=1.\n         */\n        static normalizeZ(points) {\n            const toInv = Fp.invertBatch(points.map((p) => p.pz));\n            return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n        }\n        /**\n         * Converts hash string or Uint8Array to Point.\n         * @param hex short/long ECDSA hex\n         */\n        static fromHex(hex) {\n            const P = Point.fromAffine(fromBytes(ensureBytes('pointHex', hex)));\n            P.assertValidity();\n            return P;\n        }\n        // Multiplies generator point by privateKey.\n        static fromPrivateKey(privateKey) {\n            return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));\n        }\n        // Multiscalar Multiplication\n        static msm(points, scalars) {\n            return pippenger(Point, Fn, points, scalars);\n        }\n        // \"Private method\", don't use it directly\n        _setWindowSize(windowSize) {\n            wnaf.setWindowSize(this, windowSize);\n        }\n        // A point on curve is valid if it conforms to equation.\n        assertValidity() {\n            assertValidMemo(this);\n        }\n        hasEvenY() {\n            const { y } = this.toAffine();\n            if (Fp.isOdd)\n                return !Fp.isOdd(y);\n            throw new Error(\"Field doesn't support isOdd\");\n        }\n        /**\n         * Compare one point to another.\n         */\n        equals(other) {\n            assertPrjPoint(other);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            const { px: X2, py: Y2, pz: Z2 } = other;\n            const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));\n            const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));\n            return U1 && U2;\n        }\n        /**\n         * Flips point to one corresponding to (x, -y) in Affine coordinates.\n         */\n        negate() {\n            return new Point(this.px, Fp.neg(this.py), this.pz);\n        }\n        // Renes-Costello-Batina exception-free doubling formula.\n        // There is 30% faster Jacobian formula, but it is not complete.\n        // https://eprint.iacr.org/2015/1060, algorithm 3\n        // Cost: 8M + 3S + 3*a + 2*b3 + 15add.\n        double() {\n            const { a, b } = CURVE;\n            const b3 = Fp.mul(b, _3n);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n            let t0 = Fp.mul(X1, X1); // step 1\n            let t1 = Fp.mul(Y1, Y1);\n            let t2 = Fp.mul(Z1, Z1);\n            let t3 = Fp.mul(X1, Y1);\n            t3 = Fp.add(t3, t3); // step 5\n            Z3 = Fp.mul(X1, Z1);\n            Z3 = Fp.add(Z3, Z3);\n            X3 = Fp.mul(a, Z3);\n            Y3 = Fp.mul(b3, t2);\n            Y3 = Fp.add(X3, Y3); // step 10\n            X3 = Fp.sub(t1, Y3);\n            Y3 = Fp.add(t1, Y3);\n            Y3 = Fp.mul(X3, Y3);\n            X3 = Fp.mul(t3, X3);\n            Z3 = Fp.mul(b3, Z3); // step 15\n            t2 = Fp.mul(a, t2);\n            t3 = Fp.sub(t0, t2);\n            t3 = Fp.mul(a, t3);\n            t3 = Fp.add(t3, Z3);\n            Z3 = Fp.add(t0, t0); // step 20\n            t0 = Fp.add(Z3, t0);\n            t0 = Fp.add(t0, t2);\n            t0 = Fp.mul(t0, t3);\n            Y3 = Fp.add(Y3, t0);\n            t2 = Fp.mul(Y1, Z1); // step 25\n            t2 = Fp.add(t2, t2);\n            t0 = Fp.mul(t2, t3);\n            X3 = Fp.sub(X3, t0);\n            Z3 = Fp.mul(t2, t1);\n            Z3 = Fp.add(Z3, Z3); // step 30\n            Z3 = Fp.add(Z3, Z3);\n            return new Point(X3, Y3, Z3);\n        }\n        // Renes-Costello-Batina exception-free addition formula.\n        // There is 30% faster Jacobian formula, but it is not complete.\n        // https://eprint.iacr.org/2015/1060, algorithm 1\n        // Cost: 12M + 0S + 3*a + 3*b3 + 23add.\n        add(other) {\n            assertPrjPoint(other);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            const { px: X2, py: Y2, pz: Z2 } = other;\n            let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n            const a = CURVE.a;\n            const b3 = Fp.mul(CURVE.b, _3n);\n            let t0 = Fp.mul(X1, X2); // step 1\n            let t1 = Fp.mul(Y1, Y2);\n            let t2 = Fp.mul(Z1, Z2);\n            let t3 = Fp.add(X1, Y1);\n            let t4 = Fp.add(X2, Y2); // step 5\n            t3 = Fp.mul(t3, t4);\n            t4 = Fp.add(t0, t1);\n            t3 = Fp.sub(t3, t4);\n            t4 = Fp.add(X1, Z1);\n            let t5 = Fp.add(X2, Z2); // step 10\n            t4 = Fp.mul(t4, t5);\n            t5 = Fp.add(t0, t2);\n            t4 = Fp.sub(t4, t5);\n            t5 = Fp.add(Y1, Z1);\n            X3 = Fp.add(Y2, Z2); // step 15\n            t5 = Fp.mul(t5, X3);\n            X3 = Fp.add(t1, t2);\n            t5 = Fp.sub(t5, X3);\n            Z3 = Fp.mul(a, t4);\n            X3 = Fp.mul(b3, t2); // step 20\n            Z3 = Fp.add(X3, Z3);\n            X3 = Fp.sub(t1, Z3);\n            Z3 = Fp.add(t1, Z3);\n            Y3 = Fp.mul(X3, Z3);\n            t1 = Fp.add(t0, t0); // step 25\n            t1 = Fp.add(t1, t0);\n            t2 = Fp.mul(a, t2);\n            t4 = Fp.mul(b3, t4);\n            t1 = Fp.add(t1, t2);\n            t2 = Fp.sub(t0, t2); // step 30\n            t2 = Fp.mul(a, t2);\n            t4 = Fp.add(t4, t2);\n            t0 = Fp.mul(t1, t4);\n            Y3 = Fp.add(Y3, t0);\n            t0 = Fp.mul(t5, t4); // step 35\n            X3 = Fp.mul(t3, X3);\n            X3 = Fp.sub(X3, t0);\n            t0 = Fp.mul(t3, t1);\n            Z3 = Fp.mul(t5, Z3);\n            Z3 = Fp.add(Z3, t0); // step 40\n            return new Point(X3, Y3, Z3);\n        }\n        subtract(other) {\n            return this.add(other.negate());\n        }\n        is0() {\n            return this.equals(Point.ZERO);\n        }\n        wNAF(n) {\n            return wnaf.wNAFCached(this, n, Point.normalizeZ);\n        }\n        /**\n         * Non-constant-time multiplication. Uses double-and-add algorithm.\n         * It's faster, but should only be used when you don't care about\n         * an exposed private key e.g. sig verification, which works over *public* keys.\n         */\n        multiplyUnsafe(sc) {\n            ut.aInRange('scalar', sc, _0n, CURVE.n);\n            const I = Point.ZERO;\n            if (sc === _0n)\n                return I;\n            if (sc === _1n)\n                return this;\n            const { endo } = CURVE;\n            if (!endo)\n                return wnaf.unsafeLadder(this, sc);\n            // Apply endomorphism\n            let { k1neg, k1, k2neg, k2 } = endo.splitScalar(sc);\n            let k1p = I;\n            let k2p = I;\n            let d = this;\n            while (k1 > _0n || k2 > _0n) {\n                if (k1 & _1n)\n                    k1p = k1p.add(d);\n                if (k2 & _1n)\n                    k2p = k2p.add(d);\n                d = d.double();\n                k1 >>= _1n;\n                k2 >>= _1n;\n            }\n            if (k1neg)\n                k1p = k1p.negate();\n            if (k2neg)\n                k2p = k2p.negate();\n            k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n            return k1p.add(k2p);\n        }\n        /**\n         * Constant time multiplication.\n         * Uses wNAF method. Windowed method may be 10% faster,\n         * but takes 2x longer to generate and consumes 2x memory.\n         * Uses precomputes when available.\n         * Uses endomorphism for Koblitz curves.\n         * @param scalar by which the point would be multiplied\n         * @returns New point\n         */\n        multiply(scalar) {\n            const { endo, n: N } = CURVE;\n            ut.aInRange('scalar', scalar, _1n, N);\n            let point, fake; // Fake point is used to const-time mult\n            if (endo) {\n                const { k1neg, k1, k2neg, k2 } = endo.splitScalar(scalar);\n                let { p: k1p, f: f1p } = this.wNAF(k1);\n                let { p: k2p, f: f2p } = this.wNAF(k2);\n                k1p = wnaf.constTimeNegate(k1neg, k1p);\n                k2p = wnaf.constTimeNegate(k2neg, k2p);\n                k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n                point = k1p.add(k2p);\n                fake = f1p.add(f2p);\n            }\n            else {\n                const { p, f } = this.wNAF(scalar);\n                point = p;\n                fake = f;\n            }\n            // Normalize `z` for both points, but return only real one\n            return Point.normalizeZ([point, fake])[0];\n        }\n        /**\n         * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.\n         * Not using Strauss-Shamir trick: precomputation tables are faster.\n         * The trick could be useful if both P and Q are not G (not in our case).\n         * @returns non-zero affine point\n         */\n        multiplyAndAddUnsafe(Q, a, b) {\n            const G = Point.BASE; // No Strauss-Shamir trick: we have 10% faster G precomputes\n            const mul = (P, a // Select faster multiply() method\n            ) => (a === _0n || a === _1n || !P.equals(G) ? P.multiplyUnsafe(a) : P.multiply(a));\n            const sum = mul(this, a).add(mul(Q, b));\n            return sum.is0() ? undefined : sum;\n        }\n        // Converts Projective point to affine (x, y) coordinates.\n        // Can accept precomputed Z^-1 - for example, from invertBatch.\n        // (x, y, z) ∋ (x=x/z, y=y/z)\n        toAffine(iz) {\n            return toAffineMemo(this, iz);\n        }\n        isTorsionFree() {\n            const { h: cofactor, isTorsionFree } = CURVE;\n            if (cofactor === _1n)\n                return true; // No subgroups, always torsion-free\n            if (isTorsionFree)\n                return isTorsionFree(Point, this);\n            throw new Error('isTorsionFree() has not been declared for the elliptic curve');\n        }\n        clearCofactor() {\n            const { h: cofactor, clearCofactor } = CURVE;\n            if (cofactor === _1n)\n                return this; // Fast-path\n            if (clearCofactor)\n                return clearCofactor(Point, this);\n            return this.multiplyUnsafe(CURVE.h);\n        }\n        toRawBytes(isCompressed = true) {\n            abool('isCompressed', isCompressed);\n            this.assertValidity();\n            return toBytes(Point, this, isCompressed);\n        }\n        toHex(isCompressed = true) {\n            abool('isCompressed', isCompressed);\n            return ut.bytesToHex(this.toRawBytes(isCompressed));\n        }\n    }\n    Point.BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);\n    Point.ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO);\n    const _bits = CURVE.nBitLength;\n    const wnaf = wNAF(Point, CURVE.endo ? Math.ceil(_bits / 2) : _bits);\n    // Validate if generator point is on curve\n    return {\n        CURVE,\n        ProjectivePoint: Point,\n        normPrivateKeyToScalar,\n        weierstrassEquation,\n        isWithinCurveOrder,\n    };\n}\nfunction validateOpts(curve) {\n    const opts = validateBasic(curve);\n    ut.validateObject(opts, {\n        hash: 'hash',\n        hmac: 'function',\n        randomBytes: 'function',\n    }, {\n        bits2int: 'function',\n        bits2int_modN: 'function',\n        lowS: 'boolean',\n    });\n    return Object.freeze({ lowS: true, ...opts });\n}\n/**\n * Creates short weierstrass curve and ECDSA signature methods for it.\n * @example\n * import { Field } from '@noble/curves/abstract/modular';\n * // Before that, define BigInt-s: a, b, p, n, Gx, Gy\n * const curve = weierstrass({ a, b, Fp: Field(p), n, Gx, Gy, h: 1n })\n */\nexport function weierstrass(curveDef) {\n    const CURVE = validateOpts(curveDef);\n    const { Fp, n: CURVE_ORDER } = CURVE;\n    const compressedLen = Fp.BYTES + 1; // e.g. 33 for 32\n    const uncompressedLen = 2 * Fp.BYTES + 1; // e.g. 65 for 32\n    function modN(a) {\n        return mod.mod(a, CURVE_ORDER);\n    }\n    function invN(a) {\n        return mod.invert(a, CURVE_ORDER);\n    }\n    const { ProjectivePoint: Point, normPrivateKeyToScalar, weierstrassEquation, isWithinCurveOrder, } = weierstrassPoints({\n        ...CURVE,\n        toBytes(_c, point, isCompressed) {\n            const a = point.toAffine();\n            const x = Fp.toBytes(a.x);\n            const cat = ut.concatBytes;\n            abool('isCompressed', isCompressed);\n            if (isCompressed) {\n                return cat(Uint8Array.from([point.hasEvenY() ? 0x02 : 0x03]), x);\n            }\n            else {\n                return cat(Uint8Array.from([0x04]), x, Fp.toBytes(a.y));\n            }\n        },\n        fromBytes(bytes) {\n            const len = bytes.length;\n            const head = bytes[0];\n            const tail = bytes.subarray(1);\n            // this.assertValidity() is done inside of fromHex\n            if (len === compressedLen && (head === 0x02 || head === 0x03)) {\n                const x = ut.bytesToNumberBE(tail);\n                if (!ut.inRange(x, _1n, Fp.ORDER))\n                    throw new Error('Point is not on curve');\n                const y2 = weierstrassEquation(x); // y² = x³ + ax + b\n                let y;\n                try {\n                    y = Fp.sqrt(y2); // y = y² ^ (p+1)/4\n                }\n                catch (sqrtError) {\n                    const suffix = sqrtError instanceof Error ? ': ' + sqrtError.message : '';\n                    throw new Error('Point is not on curve' + suffix);\n                }\n                const isYOdd = (y & _1n) === _1n;\n                // ECDSA\n                const isHeadOdd = (head & 1) === 1;\n                if (isHeadOdd !== isYOdd)\n                    y = Fp.neg(y);\n                return { x, y };\n            }\n            else if (len === uncompressedLen && head === 0x04) {\n                const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n                const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n                return { x, y };\n            }\n            else {\n                throw new Error(`Point of length ${len} was invalid. Expected ${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes`);\n            }\n        },\n    });\n    const numToNByteStr = (num) => ut.bytesToHex(ut.numberToBytesBE(num, CURVE.nByteLength));\n    function isBiggerThanHalfOrder(number) {\n        const HALF = CURVE_ORDER >> _1n;\n        return number > HALF;\n    }\n    function normalizeS(s) {\n        return isBiggerThanHalfOrder(s) ? modN(-s) : s;\n    }\n    // slice bytes num\n    const slcNum = (b, from, to) => ut.bytesToNumberBE(b.slice(from, to));\n    /**\n     * ECDSA signature with its (r, s) properties. Supports DER & compact representations.\n     */\n    class Signature {\n        constructor(r, s, recovery) {\n            this.r = r;\n            this.s = s;\n            this.recovery = recovery;\n            this.assertValidity();\n        }\n        // pair (bytes of r, bytes of s)\n        static fromCompact(hex) {\n            const l = CURVE.nByteLength;\n            hex = ensureBytes('compactSignature', hex, l * 2);\n            return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));\n        }\n        // DER encoded ECDSA signature\n        // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script\n        static fromDER(hex) {\n            const { r, s } = DER.toSig(ensureBytes('DER', hex));\n            return new Signature(r, s);\n        }\n        assertValidity() {\n            ut.aInRange('r', this.r, _1n, CURVE_ORDER); // r in [1..N]\n            ut.aInRange('s', this.s, _1n, CURVE_ORDER); // s in [1..N]\n        }\n        addRecoveryBit(recovery) {\n            return new Signature(this.r, this.s, recovery);\n        }\n        recoverPublicKey(msgHash) {\n            const { r, s, recovery: rec } = this;\n            const h = bits2int_modN(ensureBytes('msgHash', msgHash)); // Truncate hash\n            if (rec == null || ![0, 1, 2, 3].includes(rec))\n                throw new Error('recovery id invalid');\n            const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;\n            if (radj >= Fp.ORDER)\n                throw new Error('recovery id 2 or 3 invalid');\n            const prefix = (rec & 1) === 0 ? '02' : '03';\n            const R = Point.fromHex(prefix + numToNByteStr(radj));\n            const ir = invN(radj); // r^-1\n            const u1 = modN(-h * ir); // -hr^-1\n            const u2 = modN(s * ir); // sr^-1\n            const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2); // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1)\n            if (!Q)\n                throw new Error('point at infinify'); // unsafe is fine: no priv data leaked\n            Q.assertValidity();\n            return Q;\n        }\n        // Signatures should be low-s, to prevent malleability.\n        hasHighS() {\n            return isBiggerThanHalfOrder(this.s);\n        }\n        normalizeS() {\n            return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;\n        }\n        // DER-encoded\n        toDERRawBytes() {\n            return ut.hexToBytes(this.toDERHex());\n        }\n        toDERHex() {\n            return DER.hexFromSig({ r: this.r, s: this.s });\n        }\n        // padded bytes of r, then padded bytes of s\n        toCompactRawBytes() {\n            return ut.hexToBytes(this.toCompactHex());\n        }\n        toCompactHex() {\n            return numToNByteStr(this.r) + numToNByteStr(this.s);\n        }\n    }\n    const utils = {\n        isValidPrivateKey(privateKey) {\n            try {\n                normPrivateKeyToScalar(privateKey);\n                return true;\n            }\n            catch (error) {\n                return false;\n            }\n        },\n        normPrivateKeyToScalar: normPrivateKeyToScalar,\n        /**\n         * Produces cryptographically secure private key from random of size\n         * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.\n         */\n        randomPrivateKey: () => {\n            const length = mod.getMinHashLength(CURVE.n);\n            return mod.mapHashToField(CURVE.randomBytes(length), CURVE.n);\n        },\n        /**\n         * Creates precompute table for an arbitrary EC point. Makes point \"cached\".\n         * Allows to massively speed-up `point.multiply(scalar)`.\n         * @returns cached point\n         * @example\n         * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));\n         * fast.multiply(privKey); // much faster ECDH now\n         */\n        precompute(windowSize = 8, point = Point.BASE) {\n            point._setWindowSize(windowSize);\n            point.multiply(BigInt(3)); // 3 is arbitrary, just need any number here\n            return point;\n        },\n    };\n    /**\n     * Computes public key for a private key. Checks for validity of the private key.\n     * @param privateKey private key\n     * @param isCompressed whether to return compact (default), or full key\n     * @returns Public key, full when isCompressed=false; short when isCompressed=true\n     */\n    function getPublicKey(privateKey, isCompressed = true) {\n        return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n    }\n    /**\n     * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.\n     */\n    function isProbPub(item) {\n        const arr = ut.isBytes(item);\n        const str = typeof item === 'string';\n        const len = (arr || str) && item.length;\n        if (arr)\n            return len === compressedLen || len === uncompressedLen;\n        if (str)\n            return len === 2 * compressedLen || len === 2 * uncompressedLen;\n        if (item instanceof Point)\n            return true;\n        return false;\n    }\n    /**\n     * ECDH (Elliptic Curve Diffie Hellman).\n     * Computes shared public key from private key and public key.\n     * Checks: 1) private key validity 2) shared key is on-curve.\n     * Does NOT hash the result.\n     * @param privateA private key\n     * @param publicB different public key\n     * @param isCompressed whether to return compact (default), or full key\n     * @returns shared public key\n     */\n    function getSharedSecret(privateA, publicB, isCompressed = true) {\n        if (isProbPub(privateA))\n            throw new Error('first arg must be private key');\n        if (!isProbPub(publicB))\n            throw new Error('second arg must be public key');\n        const b = Point.fromHex(publicB); // check for being on-curve\n        return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);\n    }\n    // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.\n    // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.\n    // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.\n    // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors\n    const bits2int = CURVE.bits2int ||\n        function (bytes) {\n            // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)\n            // for some cases, since bytes.length * 8 is not actual bitLength.\n            const num = ut.bytesToNumberBE(bytes); // check for == u8 done here\n            const delta = bytes.length * 8 - CURVE.nBitLength; // truncate to nBitLength leftmost bits\n            return delta > 0 ? num >> BigInt(delta) : num;\n        };\n    const bits2int_modN = CURVE.bits2int_modN ||\n        function (bytes) {\n            return modN(bits2int(bytes)); // can't use bytesToNumberBE here\n        };\n    // NOTE: pads output with zero as per spec\n    const ORDER_MASK = ut.bitMask(CURVE.nBitLength);\n    /**\n     * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.\n     */\n    function int2octets(num) {\n        ut.aInRange(`num < 2^${CURVE.nBitLength}`, num, _0n, ORDER_MASK);\n        // works with order, can have different size than numToField!\n        return ut.numberToBytesBE(num, CURVE.nByteLength);\n    }\n    // Steps A, D of RFC6979 3.2\n    // Creates RFC6979 seed; converts msg/privKey to numbers.\n    // Used only in sign, not in verify.\n    // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order, this will be wrong at least for P521.\n    // Also it can be bigger for P224 + SHA256\n    function prepSig(msgHash, privateKey, opts = defaultSigOpts) {\n        if (['recovered', 'canonical'].some((k) => k in opts))\n            throw new Error('sign() legacy options not supported');\n        const { hash, randomBytes } = CURVE;\n        let { lowS, prehash, extraEntropy: ent } = opts; // generates low-s sigs by default\n        if (lowS == null)\n            lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash\n        msgHash = ensureBytes('msgHash', msgHash);\n        validateSigVerOpts(opts);\n        if (prehash)\n            msgHash = ensureBytes('prehashed msgHash', hash(msgHash));\n        // We can't later call bits2octets, since nested bits2int is broken for curves\n        // with nBitLength % 8 !== 0. Because of that, we unwrap it here as int2octets call.\n        // const bits2octets = (bits) => int2octets(bits2int_modN(bits))\n        const h1int = bits2int_modN(msgHash);\n        const d = normPrivateKeyToScalar(privateKey); // validate private key, convert to bigint\n        const seedArgs = [int2octets(d), int2octets(h1int)];\n        // extraEntropy. RFC6979 3.6: additional k' (optional).\n        if (ent != null && ent !== false) {\n            // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')\n            const e = ent === true ? randomBytes(Fp.BYTES) : ent; // generate random bytes OR pass as-is\n            seedArgs.push(ensureBytes('extraEntropy', e)); // check for being bytes\n        }\n        const seed = ut.concatBytes(...seedArgs); // Step D of RFC6979 3.2\n        const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!\n        // Converts signature params into point w r/s, checks result for validity.\n        function k2sig(kBytes) {\n            // RFC 6979 Section 3.2, step 3: k = bits2int(T)\n            const k = bits2int(kBytes); // Cannot use fields methods, since it is group element\n            if (!isWithinCurveOrder(k))\n                return; // Important: all mod() calls here must be done over N\n            const ik = invN(k); // k^-1 mod n\n            const q = Point.BASE.multiply(k).toAffine(); // q = Gk\n            const r = modN(q.x); // r = q.x mod n\n            if (r === _0n)\n                return;\n            // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to\n            // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:\n            // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT\n            const s = modN(ik * modN(m + r * d)); // Not using blinding here\n            if (s === _0n)\n                return;\n            let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)\n            let normS = s;\n            if (lowS && isBiggerThanHalfOrder(s)) {\n                normS = normalizeS(s); // if lowS was passed, ensure s is always\n                recovery ^= 1; // // in the bottom half of N\n            }\n            return new Signature(r, normS, recovery); // use normS, not s\n        }\n        return { seed, k2sig };\n    }\n    const defaultSigOpts = { lowS: CURVE.lowS, prehash: false };\n    const defaultVerOpts = { lowS: CURVE.lowS, prehash: false };\n    /**\n     * Signs message hash with a private key.\n     * ```\n     * sign(m, d, k) where\n     *   (x, y) = G × k\n     *   r = x mod n\n     *   s = (m + dr)/k mod n\n     * ```\n     * @param msgHash NOT message. msg needs to be hashed to `msgHash`, or use `prehash`.\n     * @param privKey private key\n     * @param opts lowS for non-malleable sigs. extraEntropy for mixing randomness into k. prehash will hash first arg.\n     * @returns signature with recovery param\n     */\n    function sign(msgHash, privKey, opts = defaultSigOpts) {\n        const { seed, k2sig } = prepSig(msgHash, privKey, opts); // Steps A, D of RFC6979 3.2.\n        const C = CURVE;\n        const drbg = ut.createHmacDrbg(C.hash.outputLen, C.nByteLength, C.hmac);\n        return drbg(seed, k2sig); // Steps B, C, D, E, F, G\n    }\n    // Enable precomputes. Slows down first publicKey computation by 20ms.\n    Point.BASE._setWindowSize(8);\n    // utils.precompute(8, ProjectivePoint.BASE)\n    /**\n     * Verifies a signature against message hash and public key.\n     * Rejects lowS signatures by default: to override,\n     * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:\n     *\n     * ```\n     * verify(r, s, h, P) where\n     *   U1 = hs^-1 mod n\n     *   U2 = rs^-1 mod n\n     *   R = U1⋅G - U2⋅P\n     *   mod(R.x, n) == r\n     * ```\n     */\n    function verify(signature, msgHash, publicKey, opts = defaultVerOpts) {\n        const sg = signature;\n        msgHash = ensureBytes('msgHash', msgHash);\n        publicKey = ensureBytes('publicKey', publicKey);\n        if ('strict' in opts)\n            throw new Error('options.strict was renamed to lowS');\n        validateSigVerOpts(opts);\n        const { lowS, prehash } = opts;\n        let _sig = undefined;\n        let P;\n        try {\n            if (typeof sg === 'string' || ut.isBytes(sg)) {\n                // Signature can be represented in 2 ways: compact (2*nByteLength) & DER (variable-length).\n                // Since DER can also be 2*nByteLength bytes, we check for it first.\n                try {\n                    _sig = Signature.fromDER(sg);\n                }\n                catch (derError) {\n                    if (!(derError instanceof DER.Err))\n                        throw derError;\n                    _sig = Signature.fromCompact(sg);\n                }\n            }\n            else if (typeof sg === 'object' && typeof sg.r === 'bigint' && typeof sg.s === 'bigint') {\n                const { r, s } = sg;\n                _sig = new Signature(r, s);\n            }\n            else {\n                throw new Error('PARSE');\n            }\n            P = Point.fromHex(publicKey);\n        }\n        catch (error) {\n            if (error.message === 'PARSE')\n                throw new Error(`signature must be Signature instance, Uint8Array or hex string`);\n            return false;\n        }\n        if (lowS && _sig.hasHighS())\n            return false;\n        if (prehash)\n            msgHash = CURVE.hash(msgHash);\n        const { r, s } = _sig;\n        const h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element\n        const is = invN(s); // s^-1\n        const u1 = modN(h * is); // u1 = hs^-1 mod n\n        const u2 = modN(r * is); // u2 = rs^-1 mod n\n        const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine(); // R = u1⋅G + u2⋅P\n        if (!R)\n            return false;\n        const v = modN(R.x);\n        return v === r;\n    }\n    return {\n        CURVE,\n        getPublicKey,\n        getSharedSecret,\n        sign,\n        verify,\n        ProjectivePoint: Point,\n        Signature,\n        utils,\n    };\n}\n/**\n * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.\n * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.\n * b = True and y = sqrt(u / v) if (u / v) is square in F, and\n * b = False and y = sqrt(Z * (u / v)) otherwise.\n * @param Fp\n * @param Z\n * @returns\n */\nexport function SWUFpSqrtRatio(Fp, Z) {\n    // Generic implementation\n    const q = Fp.ORDER;\n    let l = _0n;\n    for (let o = q - _1n; o % _2n === _0n; o /= _2n)\n        l += _1n;\n    const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.\n    // We need 2n ** c1 and 2n ** (c1-1). We can't use **; but we can use <<.\n    // 2n ** c1 == 2n << (c1-1)\n    const _2n_pow_c1_1 = _2n << (c1 - _1n - _1n);\n    const _2n_pow_c1 = _2n_pow_c1_1 * _2n;\n    const c2 = (q - _1n) / _2n_pow_c1; // 2. c2 = (q - 1) / (2^c1)  # Integer arithmetic\n    const c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic\n    const c4 = _2n_pow_c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic\n    const c5 = _2n_pow_c1_1; // 5. c5 = 2^(c1 - 1)                  # Integer arithmetic\n    const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2\n    const c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)\n    let sqrtRatio = (u, v) => {\n        let tv1 = c6; // 1. tv1 = c6\n        let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4\n        let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2\n        tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v\n        let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3\n        tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3\n        tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2\n        tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v\n        tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u\n        let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2\n        tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5\n        let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1\n        tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7\n        tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1\n        tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)\n        tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)\n        // 17. for i in (c1, c1 - 1, ..., 2):\n        for (let i = c1; i > _1n; i--) {\n            let tv5 = i - _2n; // 18.    tv5 = i - 2\n            tv5 = _2n << (tv5 - _1n); // 19.    tv5 = 2^tv5\n            let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5\n            const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1\n            tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1\n            tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1\n            tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1\n            tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)\n            tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)\n        }\n        return { isValid: isQR, value: tv3 };\n    };\n    if (Fp.ORDER % _4n === _3n) {\n        // sqrt_ratio_3mod4(u, v)\n        const c1 = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic\n        const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)\n        sqrtRatio = (u, v) => {\n            let tv1 = Fp.sqr(v); // 1. tv1 = v^2\n            const tv2 = Fp.mul(u, v); // 2. tv2 = u * v\n            tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2\n            let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1\n            y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2\n            const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2\n            const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v\n            const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u\n            let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)\n            return { isValid: isQR, value: y }; // 11. return (isQR, y) isQR ? y : y*c2\n        };\n    }\n    // No curves uses that\n    // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8\n    return sqrtRatio;\n}\n/**\n * Simplified Shallue-van de Woestijne-Ulas Method\n * https://www.rfc-editor.org/rfc/rfc9380#section-6.6.2\n */\nexport function mapToCurveSimpleSWU(Fp, opts) {\n    mod.validateField(Fp);\n    if (!Fp.isValid(opts.A) || !Fp.isValid(opts.B) || !Fp.isValid(opts.Z))\n        throw new Error('mapToCurveSimpleSWU: invalid opts');\n    const sqrtRatio = SWUFpSqrtRatio(Fp, opts.Z);\n    if (!Fp.isOdd)\n        throw new Error('Fp.isOdd is not implemented!');\n    // Input: u, an element of F.\n    // Output: (x, y), a point on E.\n    return (u) => {\n        // prettier-ignore\n        let tv1, tv2, tv3, tv4, tv5, tv6, x, y;\n        tv1 = Fp.sqr(u); // 1.  tv1 = u^2\n        tv1 = Fp.mul(tv1, opts.Z); // 2.  tv1 = Z * tv1\n        tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2\n        tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1\n        tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1\n        tv3 = Fp.mul(tv3, opts.B); // 6.  tv3 = B * tv3\n        tv4 = Fp.cmov(opts.Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)\n        tv4 = Fp.mul(tv4, opts.A); // 8.  tv4 = A * tv4\n        tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2\n        tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2\n        tv5 = Fp.mul(tv6, opts.A); // 11. tv5 = A * tv6\n        tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5\n        tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3\n        tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4\n        tv5 = Fp.mul(tv6, opts.B); // 15. tv5 = B * tv6\n        tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5\n        x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3\n        const { isValid, value } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)\n        y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1\n        y = Fp.mul(y, value); // 20.   y = y * y1\n        x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)\n        y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)\n        const e1 = Fp.isOdd(u) === Fp.isOdd(y); // 23.  e1 = sgn0(u) == sgn0(y)\n        y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)\n        x = Fp.div(x, tv4); // 25.   x = x / tv4\n        return { x, y };\n    };\n}\n//# sourceMappingURL=weierstrass.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { hmac } from '@noble/hashes/hmac';\nimport { concatBytes, randomBytes } from '@noble/hashes/utils';\nimport { weierstrass } from './abstract/weierstrass.js';\n// connects noble-curves to noble-hashes\nexport function getHash(hash) {\n    return {\n        hash,\n        hmac: (key, ...msgs) => hmac(hash, key, concatBytes(...msgs)),\n        randomBytes,\n    };\n}\nexport function createCurve(curveDef, defHash) {\n    const create = (hash) => weierstrass({ ...curveDef, ...getHash(hash) });\n    return Object.freeze({ ...create(defHash), create });\n}\n//# sourceMappingURL=_shortw_utils.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha256 } from '@noble/hashes/sha256';\nimport { randomBytes } from '@noble/hashes/utils';\nimport { createCurve } from './_shortw_utils.js';\nimport { createHasher, isogenyMap } from './abstract/hash-to-curve.js';\nimport { Field, mod, pow2 } from './abstract/modular.js';\nimport { inRange, aInRange, bytesToNumberBE, concatBytes, ensureBytes, numberToBytesBE, } from './abstract/utils.js';\nimport { mapToCurveSimpleSWU } from './abstract/weierstrass.js';\nconst secp256k1P = BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f');\nconst secp256k1N = BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141');\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst divNearest = (a, b) => (a + b / _2n) / b;\n/**\n * √n = n^((p+1)/4) for fields p = 3 mod 4. We unwrap the loop and multiply bit-by-bit.\n * (P+1n/4n).toString(2) would produce bits [223x 1, 0, 22x 1, 4x 0, 11, 00]\n */\nfunction sqrtMod(y) {\n    const P = secp256k1P;\n    // prettier-ignore\n    const _3n = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);\n    // prettier-ignore\n    const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);\n    const b2 = (y * y * y) % P; // x^3, 11\n    const b3 = (b2 * b2 * y) % P; // x^7\n    const b6 = (pow2(b3, _3n, P) * b3) % P;\n    const b9 = (pow2(b6, _3n, P) * b3) % P;\n    const b11 = (pow2(b9, _2n, P) * b2) % P;\n    const b22 = (pow2(b11, _11n, P) * b11) % P;\n    const b44 = (pow2(b22, _22n, P) * b22) % P;\n    const b88 = (pow2(b44, _44n, P) * b44) % P;\n    const b176 = (pow2(b88, _88n, P) * b88) % P;\n    const b220 = (pow2(b176, _44n, P) * b44) % P;\n    const b223 = (pow2(b220, _3n, P) * b3) % P;\n    const t1 = (pow2(b223, _23n, P) * b22) % P;\n    const t2 = (pow2(t1, _6n, P) * b2) % P;\n    const root = pow2(t2, _2n, P);\n    if (!Fp.eql(Fp.sqr(root), y))\n        throw new Error('Cannot find square root');\n    return root;\n}\nconst Fp = Field(secp256k1P, undefined, undefined, { sqrt: sqrtMod });\n/**\n * secp256k1 short weierstrass curve and ECDSA signatures over it.\n */\nexport const secp256k1 = createCurve({\n    a: BigInt(0), // equation params: a, b\n    b: BigInt(7), // Seem to be rigid: bitcointalk.org/index.php?topic=289795.msg3183975#msg3183975\n    Fp, // Field's prime: 2n**256n - 2n**32n - 2n**9n - 2n**8n - 2n**7n - 2n**6n - 2n**4n - 1n\n    n: secp256k1N, // Curve order, total count of valid points in the field\n    // Base point (x, y) aka generator point\n    Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),\n    Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),\n    h: BigInt(1), // Cofactor\n    lowS: true, // Allow only low-S signatures by default in sign() and verify()\n    /**\n     * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.\n     * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.\n     * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.\n     * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066\n     */\n    endo: {\n        beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n        splitScalar: (k) => {\n            const n = secp256k1N;\n            const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');\n            const b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');\n            const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');\n            const b2 = a1;\n            const POW_2_128 = BigInt('0x100000000000000000000000000000000'); // (2n**128n).toString(16)\n            const c1 = divNearest(b2 * k, n);\n            const c2 = divNearest(-b1 * k, n);\n            let k1 = mod(k - c1 * a1 - c2 * a2, n);\n            let k2 = mod(-c1 * b1 - c2 * b2, n);\n            const k1neg = k1 > POW_2_128;\n            const k2neg = k2 > POW_2_128;\n            if (k1neg)\n                k1 = n - k1;\n            if (k2neg)\n                k2 = n - k2;\n            if (k1 > POW_2_128 || k2 > POW_2_128) {\n                throw new Error('splitScalar: Endomorphism failed, k=' + k);\n            }\n            return { k1neg, k1, k2neg, k2 };\n        },\n    },\n}, sha256);\n// Schnorr signatures are superior to ECDSA from above. Below is Schnorr-specific BIP0340 code.\n// https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\nconst _0n = BigInt(0);\n/** An object mapping tags to their tagged hash prefix of [SHA256(tag) | SHA256(tag)] */\nconst TAGGED_HASH_PREFIXES = {};\nfunction taggedHash(tag, ...messages) {\n    let tagP = TAGGED_HASH_PREFIXES[tag];\n    if (tagP === undefined) {\n        const tagH = sha256(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n        tagP = concatBytes(tagH, tagH);\n        TAGGED_HASH_PREFIXES[tag] = tagP;\n    }\n    return sha256(concatBytes(tagP, ...messages));\n}\n// ECDSA compact points are 33-byte. Schnorr is 32: we strip first byte 0x02 or 0x03\nconst pointToBytes = (point) => point.toRawBytes(true).slice(1);\nconst numTo32b = (n) => numberToBytesBE(n, 32);\nconst modP = (x) => mod(x, secp256k1P);\nconst modN = (x) => mod(x, secp256k1N);\nconst Point = secp256k1.ProjectivePoint;\nconst GmulAdd = (Q, a, b) => Point.BASE.multiplyAndAddUnsafe(Q, a, b);\n// Calculate point, scalar and bytes\nfunction schnorrGetExtPubKey(priv) {\n    let d_ = secp256k1.utils.normPrivateKeyToScalar(priv); // same method executed in fromPrivateKey\n    let p = Point.fromPrivateKey(d_); // P = d'⋅G; 0 < d' < n check is done inside\n    const scalar = p.hasEvenY() ? d_ : modN(-d_);\n    return { scalar: scalar, bytes: pointToBytes(p) };\n}\n/**\n * lift_x from BIP340. Convert 32-byte x coordinate to elliptic curve point.\n * @returns valid point checked for being on-curve\n */\nfunction lift_x(x) {\n    aInRange('x', x, _1n, secp256k1P); // Fail if x ≥ p.\n    const xx = modP(x * x);\n    const c = modP(xx * x + BigInt(7)); // Let c = x³ + 7 mod p.\n    let y = sqrtMod(c); // Let y = c^(p+1)/4 mod p.\n    if (y % _2n !== _0n)\n        y = modP(-y); // Return the unique point P such that x(P) = x and\n    const p = new Point(x, y, _1n); // y(P) = y if y mod 2 = 0 or y(P) = p-y otherwise.\n    p.assertValidity();\n    return p;\n}\nconst num = bytesToNumberBE;\n/**\n * Create tagged hash, convert it to bigint, reduce modulo-n.\n */\nfunction challenge(...args) {\n    return modN(num(taggedHash('BIP0340/challenge', ...args)));\n}\n/**\n * Schnorr public key is just `x` coordinate of Point as per BIP340.\n */\nfunction schnorrGetPublicKey(privateKey) {\n    return schnorrGetExtPubKey(privateKey).bytes; // d'=int(sk). Fail if d'=0 or d'≥n. Ret bytes(d'⋅G)\n}\n/**\n * Creates Schnorr signature as per BIP340. Verifies itself before returning anything.\n * auxRand is optional and is not the sole source of k generation: bad CSPRNG won't be dangerous.\n */\nfunction schnorrSign(message, privateKey, auxRand = randomBytes(32)) {\n    const m = ensureBytes('message', message);\n    const { bytes: px, scalar: d } = schnorrGetExtPubKey(privateKey); // checks for isWithinCurveOrder\n    const a = ensureBytes('auxRand', auxRand, 32); // Auxiliary random data a: a 32-byte array\n    const t = numTo32b(d ^ num(taggedHash('BIP0340/aux', a))); // Let t be the byte-wise xor of bytes(d) and hash/aux(a)\n    const rand = taggedHash('BIP0340/nonce', t, px, m); // Let rand = hash/nonce(t || bytes(P) || m)\n    const k_ = modN(num(rand)); // Let k' = int(rand) mod n\n    if (k_ === _0n)\n        throw new Error('sign failed: k is zero'); // Fail if k' = 0.\n    const { bytes: rx, scalar: k } = schnorrGetExtPubKey(k_); // Let R = k'⋅G.\n    const e = challenge(rx, px, m); // Let e = int(hash/challenge(bytes(R) || bytes(P) || m)) mod n.\n    const sig = new Uint8Array(64); // Let sig = bytes(R) || bytes((k + ed) mod n).\n    sig.set(rx, 0);\n    sig.set(numTo32b(modN(k + e * d)), 32);\n    // If Verify(bytes(P), m, sig) (see below) returns failure, abort\n    if (!schnorrVerify(sig, m, px))\n        throw new Error('sign: Invalid signature produced');\n    return sig;\n}\n/**\n * Verifies Schnorr signature.\n * Will swallow errors & return false except for initial type validation of arguments.\n */\nfunction schnorrVerify(signature, message, publicKey) {\n    const sig = ensureBytes('signature', signature, 64);\n    const m = ensureBytes('message', message);\n    const pub = ensureBytes('publicKey', publicKey, 32);\n    try {\n        const P = lift_x(num(pub)); // P = lift_x(int(pk)); fail if that fails\n        const r = num(sig.subarray(0, 32)); // Let r = int(sig[0:32]); fail if r ≥ p.\n        if (!inRange(r, _1n, secp256k1P))\n            return false;\n        const s = num(sig.subarray(32, 64)); // Let s = int(sig[32:64]); fail if s ≥ n.\n        if (!inRange(s, _1n, secp256k1N))\n            return false;\n        const e = challenge(numTo32b(r), pointToBytes(P), m); // int(challenge(bytes(r)||bytes(P)||m))%n\n        const R = GmulAdd(P, s, modN(-e)); // R = s⋅G - e⋅P\n        if (!R || !R.hasEvenY() || R.toAffine().x !== r)\n            return false; // -eP == (n-e)P\n        return true; // Fail if is_infinite(R) / not has_even_y(R) / x(R) ≠ r.\n    }\n    catch (error) {\n        return false;\n    }\n}\n/**\n * Schnorr signatures over secp256k1.\n */\nexport const schnorr = /* @__PURE__ */ (() => ({\n    getPublicKey: schnorrGetPublicKey,\n    sign: schnorrSign,\n    verify: schnorrVerify,\n    utils: {\n        randomPrivateKey: secp256k1.utils.randomPrivateKey,\n        lift_x,\n        pointToBytes,\n        numberToBytesBE,\n        bytesToNumberBE,\n        taggedHash,\n        mod,\n    },\n}))();\nconst isoMap = /* @__PURE__ */ (() => isogenyMap(Fp, [\n    // xNum\n    [\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7',\n        '0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581',\n        '0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262',\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c',\n    ],\n    // xDen\n    [\n        '0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b',\n        '0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n    ],\n    // yNum\n    [\n        '0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c',\n        '0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3',\n        '0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931',\n        '0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84',\n    ],\n    // yDen\n    [\n        '0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b',\n        '0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573',\n        '0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n    ],\n].map((i) => i.map((j) => BigInt(j)))))();\nconst mapSWU = /* @__PURE__ */ (() => mapToCurveSimpleSWU(Fp, {\n    A: BigInt('0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533'),\n    B: BigInt('1771'),\n    Z: Fp.create(BigInt('-11')),\n}))();\nconst htf = /* @__PURE__ */ (() => createHasher(secp256k1.ProjectivePoint, (scalars) => {\n    const { x, y } = mapSWU(Fp.create(scalars[0]));\n    return isoMap(x, y);\n}, {\n    DST: 'secp256k1_XMD:SHA-256_SSWU_RO_',\n    encodeDST: 'secp256k1_XMD:SHA-256_SSWU_NU_',\n    p: Fp.ORDER,\n    m: 1,\n    k: 128,\n    expand: 'xmd',\n    hash: sha256,\n}))();\nexport const hashToCurve = /* @__PURE__ */ (() => htf.hashToCurve)();\nexport const encodeToCurve = /* @__PURE__ */ (() => htf.encodeToCurve)();\n//# sourceMappingURL=secp256k1.js.map","function number(n) {\n    if (!Number.isSafeInteger(n) || n < 0)\n        throw new Error(`positive integer expected, not ${n}`);\n}\nfunction bool(b) {\n    if (typeof b !== 'boolean')\n        throw new Error(`boolean expected, not ${b}`);\n}\n// copied from utils\nexport function isBytes(a) {\n    return (a instanceof Uint8Array ||\n        (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array'));\n}\nfunction bytes(b, ...lengths) {\n    if (!isBytes(b))\n        throw new Error('Uint8Array expected');\n    if (lengths.length > 0 && !lengths.includes(b.length))\n        throw new Error(`Uint8Array expected of length ${lengths}, not of length=${b.length}`);\n}\nfunction hash(h) {\n    if (typeof h !== 'function' || typeof h.create !== 'function')\n        throw new Error('Hash should be wrapped by utils.wrapConstructor');\n    number(h.outputLen);\n    number(h.blockLen);\n}\nfunction exists(instance, checkFinished = true) {\n    if (instance.destroyed)\n        throw new Error('Hash instance has been destroyed');\n    if (checkFinished && instance.finished)\n        throw new Error('Hash#digest() has already been called');\n}\nfunction output(out, instance) {\n    bytes(out);\n    const min = instance.outputLen;\n    if (out.length < min) {\n        throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n    }\n}\nexport { number, bool, bytes, hash, exists, output };\nconst assert = { number, bool, bytes, hash, exists, output };\nexport default assert;\n//# sourceMappingURL=_assert.js.map","const U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);\nconst _32n = /* @__PURE__ */ BigInt(32);\n// We are not using BigUint64Array, because they are extremely slow as per 2022\nfunction fromBig(n, le = false) {\n    if (le)\n        return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n    return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\nfunction split(lst, le = false) {\n    let Ah = new Uint32Array(lst.length);\n    let Al = new Uint32Array(lst.length);\n    for (let i = 0; i < lst.length; i++) {\n        const { h, l } = fromBig(lst[i], le);\n        [Ah[i], Al[i]] = [h, l];\n    }\n    return [Ah, Al];\n}\nconst toBig = (h, l) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\n// for Shift in [0, 32)\nconst shrSH = (h, _l, s) => h >>> s;\nconst shrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h, l, s) => (h >>> s) | (l << (32 - s));\nconst rotrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h, l, s) => (h << (64 - s)) | (l >>> (s - 32));\nconst rotrBL = (h, l, s) => (h >>> (s - 32)) | (l << (64 - s));\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (_h, l) => l;\nconst rotr32L = (h, _l) => h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h, l, s) => (h << s) | (l >>> (32 - s));\nconst rotlSL = (h, l, s) => (l << s) | (h >>> (32 - s));\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h, l, s) => (l << (s - 32)) | (h >>> (64 - s));\nconst rotlBL = (h, l, s) => (h << (s - 32)) | (l >>> (64 - s));\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\nfunction add(Ah, Al, Bh, Bl) {\n    const l = (Al >>> 0) + (Bl >>> 0);\n    return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\n// Addition with more than 2 elements\nconst add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low, Ah, Bh, Ch) => (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nconst add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low, Ah, Bh, Ch, Dh) => (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nconst add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low, Ah, Bh, Ch, Dh, Eh) => (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\n// prettier-ignore\nexport { fromBig, split, toBig, shrSH, shrSL, rotrSH, rotrSL, rotrBH, rotrBL, rotr32H, rotr32L, rotlSH, rotlSL, rotlBH, rotlBL, add, add3L, add3H, add4L, add4H, add5H, add5L, };\n// prettier-ignore\nconst u64 = {\n    fromBig, split, toBig,\n    shrSH, shrSL,\n    rotrSH, rotrSL, rotrBH, rotrBL,\n    rotr32H, rotr32L,\n    rotlSH, rotlSL, rotlBH, rotlBL,\n    add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\nexport default u64;\n//# sourceMappingURL=_u64.js.map","import { bytes, exists, number, output } from './_assert.js';\nimport { rotlBH, rotlBL, rotlSH, rotlSL, split } from './_u64.js';\nimport { Hash, u32, toBytes, wrapConstructor, wrapXOFConstructorWithOpts, isLE, byteSwap32, } from './utils.js';\n// SHA3 (keccak) is based on a new design: basically, the internal state is bigger than output size.\n// It's called a sponge function.\n// Various per round constants calculations\nconst SHA3_PI = [];\nconst SHA3_ROTL = [];\nconst _SHA3_IOTA = [];\nconst _0n = /* @__PURE__ */ BigInt(0);\nconst _1n = /* @__PURE__ */ BigInt(1);\nconst _2n = /* @__PURE__ */ BigInt(2);\nconst _7n = /* @__PURE__ */ BigInt(7);\nconst _256n = /* @__PURE__ */ BigInt(256);\nconst _0x71n = /* @__PURE__ */ BigInt(0x71);\nfor (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {\n    // Pi\n    [x, y] = [y, (2 * x + 3 * y) % 5];\n    SHA3_PI.push(2 * (5 * y + x));\n    // Rotational\n    SHA3_ROTL.push((((round + 1) * (round + 2)) / 2) % 64);\n    // Iota\n    let t = _0n;\n    for (let j = 0; j < 7; j++) {\n        R = ((R << _1n) ^ ((R >> _7n) * _0x71n)) % _256n;\n        if (R & _2n)\n            t ^= _1n << ((_1n << /* @__PURE__ */ BigInt(j)) - _1n);\n    }\n    _SHA3_IOTA.push(t);\n}\nconst [SHA3_IOTA_H, SHA3_IOTA_L] = /* @__PURE__ */ split(_SHA3_IOTA, true);\n// Left rotation (without 0, 32, 64)\nconst rotlH = (h, l, s) => (s > 32 ? rotlBH(h, l, s) : rotlSH(h, l, s));\nconst rotlL = (h, l, s) => (s > 32 ? rotlBL(h, l, s) : rotlSL(h, l, s));\n// Same as keccakf1600, but allows to skip some rounds\nexport function keccakP(s, rounds = 24) {\n    const B = new Uint32Array(5 * 2);\n    // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)\n    for (let round = 24 - rounds; round < 24; round++) {\n        // Theta θ\n        for (let x = 0; x < 10; x++)\n            B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];\n        for (let x = 0; x < 10; x += 2) {\n            const idx1 = (x + 8) % 10;\n            const idx0 = (x + 2) % 10;\n            const B0 = B[idx0];\n            const B1 = B[idx0 + 1];\n            const Th = rotlH(B0, B1, 1) ^ B[idx1];\n            const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];\n            for (let y = 0; y < 50; y += 10) {\n                s[x + y] ^= Th;\n                s[x + y + 1] ^= Tl;\n            }\n        }\n        // Rho (ρ) and Pi (π)\n        let curH = s[2];\n        let curL = s[3];\n        for (let t = 0; t < 24; t++) {\n            const shift = SHA3_ROTL[t];\n            const Th = rotlH(curH, curL, shift);\n            const Tl = rotlL(curH, curL, shift);\n            const PI = SHA3_PI[t];\n            curH = s[PI];\n            curL = s[PI + 1];\n            s[PI] = Th;\n            s[PI + 1] = Tl;\n        }\n        // Chi (χ)\n        for (let y = 0; y < 50; y += 10) {\n            for (let x = 0; x < 10; x++)\n                B[x] = s[y + x];\n            for (let x = 0; x < 10; x++)\n                s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];\n        }\n        // Iota (ι)\n        s[0] ^= SHA3_IOTA_H[round];\n        s[1] ^= SHA3_IOTA_L[round];\n    }\n    B.fill(0);\n}\nexport class Keccak extends Hash {\n    // NOTE: we accept arguments in bytes instead of bits here.\n    constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {\n        super();\n        this.blockLen = blockLen;\n        this.suffix = suffix;\n        this.outputLen = outputLen;\n        this.enableXOF = enableXOF;\n        this.rounds = rounds;\n        this.pos = 0;\n        this.posOut = 0;\n        this.finished = false;\n        this.destroyed = false;\n        // Can be passed from user as dkLen\n        number(outputLen);\n        // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes\n        if (0 >= this.blockLen || this.blockLen >= 200)\n            throw new Error('Sha3 supports only keccak-f1600 function');\n        this.state = new Uint8Array(200);\n        this.state32 = u32(this.state);\n    }\n    keccak() {\n        if (!isLE)\n            byteSwap32(this.state32);\n        keccakP(this.state32, this.rounds);\n        if (!isLE)\n            byteSwap32(this.state32);\n        this.posOut = 0;\n        this.pos = 0;\n    }\n    update(data) {\n        exists(this);\n        const { blockLen, state } = this;\n        data = toBytes(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            for (let i = 0; i < take; i++)\n                state[this.pos++] ^= data[pos++];\n            if (this.pos === blockLen)\n                this.keccak();\n        }\n        return this;\n    }\n    finish() {\n        if (this.finished)\n            return;\n        this.finished = true;\n        const { state, suffix, pos, blockLen } = this;\n        // Do the padding\n        state[pos] ^= suffix;\n        if ((suffix & 0x80) !== 0 && pos === blockLen - 1)\n            this.keccak();\n        state[blockLen - 1] ^= 0x80;\n        this.keccak();\n    }\n    writeInto(out) {\n        exists(this, false);\n        bytes(out);\n        this.finish();\n        const bufferOut = this.state;\n        const { blockLen } = this;\n        for (let pos = 0, len = out.length; pos < len;) {\n            if (this.posOut >= blockLen)\n                this.keccak();\n            const take = Math.min(blockLen - this.posOut, len - pos);\n            out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);\n            this.posOut += take;\n            pos += take;\n        }\n        return out;\n    }\n    xofInto(out) {\n        // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF\n        if (!this.enableXOF)\n            throw new Error('XOF is not possible for this instance');\n        return this.writeInto(out);\n    }\n    xof(bytes) {\n        number(bytes);\n        return this.xofInto(new Uint8Array(bytes));\n    }\n    digestInto(out) {\n        output(out, this);\n        if (this.finished)\n            throw new Error('digest() was already called');\n        this.writeInto(out);\n        this.destroy();\n        return out;\n    }\n    digest() {\n        return this.digestInto(new Uint8Array(this.outputLen));\n    }\n    destroy() {\n        this.destroyed = true;\n        this.state.fill(0);\n    }\n    _cloneInto(to) {\n        const { blockLen, suffix, outputLen, rounds, enableXOF } = this;\n        to || (to = new Keccak(blockLen, suffix, outputLen, enableXOF, rounds));\n        to.state32.set(this.state32);\n        to.pos = this.pos;\n        to.posOut = this.posOut;\n        to.finished = this.finished;\n        to.rounds = rounds;\n        // Suffix can change in cSHAKE\n        to.suffix = suffix;\n        to.outputLen = outputLen;\n        to.enableXOF = enableXOF;\n        to.destroyed = this.destroyed;\n        return to;\n    }\n}\nconst gen = (suffix, blockLen, outputLen) => wrapConstructor(() => new Keccak(blockLen, suffix, outputLen));\nexport const sha3_224 = /* @__PURE__ */ gen(0x06, 144, 224 / 8);\n/**\n * SHA3-256 hash function\n * @param message - that would be hashed\n */\nexport const sha3_256 = /* @__PURE__ */ gen(0x06, 136, 256 / 8);\nexport const sha3_384 = /* @__PURE__ */ gen(0x06, 104, 384 / 8);\nexport const sha3_512 = /* @__PURE__ */ gen(0x06, 72, 512 / 8);\nexport const keccak_224 = /* @__PURE__ */ gen(0x01, 144, 224 / 8);\n/**\n * keccak-256 hash function. Different from SHA3-256.\n * @param message - that would be hashed\n */\nexport const keccak_256 = /* @__PURE__ */ gen(0x01, 136, 256 / 8);\nexport const keccak_384 = /* @__PURE__ */ gen(0x01, 104, 384 / 8);\nexport const keccak_512 = /* @__PURE__ */ gen(0x01, 72, 512 / 8);\nconst genShake = (suffix, blockLen, outputLen) => wrapXOFConstructorWithOpts((opts = {}) => new Keccak(blockLen, suffix, opts.dkLen === undefined ? outputLen : opts.dkLen, true));\nexport const shake128 = /* @__PURE__ */ genShake(0x1f, 168, 128 / 8);\nexport const shake256 = /* @__PURE__ */ genShake(0x1f, 136, 256 / 8);\n//# sourceMappingURL=sha3.js.map","export const crypto = typeof globalThis === 'object' && 'crypto' in globalThis ? globalThis.crypto : undefined;\n//# sourceMappingURL=crypto.js.map","/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// node.js versions earlier than v19 don't declare it in global scope.\n// For node.js, package.json#exports field mapping rewrites import\n// from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated (2025-04-30), we can just drop the import.\nimport { crypto } from '@noble/hashes/crypto';\nimport { bytes as abytes } from './_assert.js';\n// export { isBytes } from './_assert.js';\n// We can't reuse isBytes from _assert, because somehow this causes huge perf issues\nexport function isBytes(a) {\n    return (a instanceof Uint8Array ||\n        (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array'));\n}\n// Cast array to different type\nexport const u8 = (arr) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nexport const u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n// Cast array to view\nexport const createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n// The rotate right (circular right shift) operation for uint32\nexport const rotr = (word, shift) => (word << (32 - shift)) | (word >>> shift);\n// The rotate left (circular left shift) operation for uint32\nexport const rotl = (word, shift) => (word << shift) | ((word >>> (32 - shift)) >>> 0);\nexport const isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\n// The byte swap operation for uint32\nexport const byteSwap = (word) => ((word << 24) & 0xff000000) |\n    ((word << 8) & 0xff0000) |\n    ((word >>> 8) & 0xff00) |\n    ((word >>> 24) & 0xff);\n// Conditionally byte swap if on a big-endian platform\nexport const byteSwapIfBE = isLE ? (n) => n : (n) => byteSwap(n);\n// In place byte swap for Uint32Array\nexport function byteSwap32(arr) {\n    for (let i = 0; i < arr.length; i++) {\n        arr[i] = byteSwap(arr[i]);\n    }\n}\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes) {\n    abytes(bytes);\n    // pre-caching improves the speed 6x\n    let hex = '';\n    for (let i = 0; i < bytes.length; i++) {\n        hex += hexes[bytes[i]];\n    }\n    return hex;\n}\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 };\nfunction asciiToBase16(char) {\n    if (char >= asciis._0 && char <= asciis._9)\n        return char - asciis._0;\n    if (char >= asciis._A && char <= asciis._F)\n        return char - (asciis._A - 10);\n    if (char >= asciis._a && char <= asciis._f)\n        return char - (asciis._a - 10);\n    return;\n}\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    const hl = hex.length;\n    const al = hl / 2;\n    if (hl % 2)\n        throw new Error('padded hex string expected, got unpadded hex of length ' + hl);\n    const array = new Uint8Array(al);\n    for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n        const n1 = asciiToBase16(hex.charCodeAt(hi));\n        const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n        if (n1 === undefined || n2 === undefined) {\n            const char = hex[hi] + hex[hi + 1];\n            throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n        }\n        array[ai] = n1 * 16 + n2;\n    }\n    return array;\n}\n// There is no setImmediate in browser and setTimeout is slow.\n// call of async fn will return Promise, which will be fullfiled only on\n// next scheduler queue processing step and this is exactly what we need.\nexport const nextTick = async () => { };\n// Returns control to thread each 'tick' ms to avoid blocking\nexport async function asyncLoop(iters, tick, cb) {\n    let ts = Date.now();\n    for (let i = 0; i < iters; i++) {\n        cb(i);\n        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n        const diff = Date.now() - ts;\n        if (diff >= 0 && diff < tick)\n            continue;\n        await nextTick();\n        ts += diff;\n    }\n}\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str) {\n    if (typeof str !== 'string')\n        throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */\nexport function toBytes(data) {\n    if (typeof data === 'string')\n        data = utf8ToBytes(data);\n    abytes(data);\n    return data;\n}\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays) {\n    let sum = 0;\n    for (let i = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        abytes(a);\n        sum += a.length;\n    }\n    const res = new Uint8Array(sum);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        res.set(a, pad);\n        pad += a.length;\n    }\n    return res;\n}\n// For runtime check if class implements interface\nexport class Hash {\n    // Safe version that clones internal state\n    clone() {\n        return this._cloneInto();\n    }\n}\nconst toStr = {}.toString;\nexport function checkOpts(defaults, opts) {\n    if (opts !== undefined && toStr.call(opts) !== '[object Object]')\n        throw new Error('Options should be object or undefined');\n    const merged = Object.assign(defaults, opts);\n    return merged;\n}\nexport function wrapConstructor(hashCons) {\n    const hashC = (msg) => hashCons().update(toBytes(msg)).digest();\n    const tmp = hashCons();\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = () => hashCons();\n    return hashC;\n}\nexport function wrapConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\nexport function wrapXOFConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\n/**\n * Secure PRNG. Uses `crypto.getRandomValues`, which defers to OS.\n */\nexport function randomBytes(bytesLength = 32) {\n    if (crypto && typeof crypto.getRandomValues === 'function') {\n        return crypto.getRandomValues(new Uint8Array(bytesLength));\n    }\n    // Legacy Node.js compatibility\n    if (crypto && typeof crypto.randomBytes === 'function') {\n        return crypto.randomBytes(bytesLength);\n    }\n    throw new Error('crypto.getRandomValues must be defined');\n}\n//# sourceMappingURL=utils.js.map"],"names":["Maj","a","b","c","HashMD","constructor","blockLen","outputLen","padOffset","isLE","super","this","finished","length","pos","destroyed","buffer","Uint8Array","view","update","data","len","take","Math","min","set","subarray","process","dataView","roundClean","digestInto","out","fill","i","byteOffset","value","setBigUint64","_32n","BigInt","_u32_max","wh","Number","wl","h","l","setUint32","oview","Error","outLen","state","get","digest","res","slice","destroy","_cloneInto","to","SHA256_K","Uint32Array","SHA256_IV","SHA256_W","SHA256","A","B","C","D","E","F","G","H","offset","getUint32","W15","W2","s0","s1","T1","T2","HMAC","hash","_key","key","iHash","create","pad","oHash","buf","Object","getPrototypeOf","hmac","message","_0n","_1n","_2n","isBytes","name","abytes","item","abool","title","hexes","Array","from","_","toString","padStart","bytesToHex","bytes","hex","numberToHexUnpadded","num","hexToNumber","asciis","_0","_9","_A","_F","_a","_f","asciiToBase16","char","hexToBytes","hl","al","array","ai","hi","n1","charCodeAt","n2","undefined","reverse","n","numberToBytesLE","expectedLength","e","arrays","sum","isPosBig","max","bitLen","bitMask","u8n","u8fr","arr","createHmacDrbg","hashLen","qByteLen","hmacFn","v","k","reset","reseed","seed","gen","sl","push","pred","validatorFns","bigint","val","function","boolean","string","stringOrUint8Array","isSafeInteger","isArray","field","object","Fp","isValid","validateObject","validators","optValidators","checkField","fieldName","type","isOptional","checkVal","String","entries","memoized","fn","map","WeakMap","arg","args","computed","_3n","_4n","_5n","_8n","result","pow","power","modulo","pow2","x","invert","number","y","u","q","r","m","FIELD_FIELDS","nLength","nBitLength","_nBitLength","nByteLength","ceil","Field","ORDER","redef","BITS","BYTES","sqrtP","P","p1div4","root","eql","sqr","c1","mul","nv","sub","ONE","legendreC","Q","S","Z","Q1div2","neg","g","ZERO","t2","ge","tonelliShanks","FpSqrt","f","freeze","MASK","is0","isOdd","lhs","rhs","add","p","d","FpPow","div","sqrN","addN","subN","mulN","inv","sqrt","invertBatch","lst","nums","tmp","lastMultiplied","reduce","acc","inverted","reduceRight","FpInvertBatch","cmov","toBytes","fromBytes","getFieldBytesLength","fieldOrder","bitLength","getMinHashLength","pointPrecomputes","pointWindowSizes","validateBasic","curve","Gx","Gy","validateSigVerOpts","opts","lowS","prehash","b2n","h2b","DER","Err","_tlv","encode","tag","dataLen","lenLen","decode","first","lengthBytes","_int","parseInt","toSig","int","tlv","seqBytes","seqLeftBytes","rBytes","rLeftBytes","sBytes","sLeftBytes","s","hexFromSig","sig","seq","weierstrass","curveDef","CURVE","randomBytes","bits2int","bits2int_modN","validateOpts","CURVE_ORDER","compressedLen","uncompressedLen","modN","invN","ProjectivePoint","Point","normPrivateKeyToScalar","weierstrassEquation","isWithinCurveOrder","allowedPrivateKeyLengths","wrapPrivateKey","isTorsionFree","clearCofactor","allowInfinityPoint","endo","beta","splitScalar","validatePointOpts","Fn","_c","point","_isCompressed","toAffine","tail","x2","x3","lengths","N","includes","error","assertPrjPoint","other","toAffineMemo","iz","px","py","pz","z","ax","ay","zz","assertValidMemo","left","right","fromAffine","normalizeZ","points","toInv","fromHex","assertValidity","fromPrivateKey","privateKey","BASE","multiply","msm","scalars","forEach","wbits","windowSize","buckets","lastBits","floor","j","scalar","resI","sumI","double","pippenger","_setWindowSize","wnaf","setWindowSize","hasEvenY","equals","X1","Y1","Z1","X2","Y2","Z2","U1","U2","negate","b3","X3","Y3","Z3","t0","t1","t3","t4","t5","subtract","wNAF","wNAFCached","multiplyUnsafe","sc","I","unsafeLadder","k1neg","k1","k2neg","k2","k1p","k2p","fake","f1p","f2p","constTimeNegate","multiplyAndAddUnsafe","cofactor","toRawBytes","isCompressed","toHex","_bits","bits","condition","validateW","W","windows","elm","precomputeWindow","base","window","precomputes","mask","maxNumber","shiftBy","offset1","offset2","abs","cond1","cond2","transform","comp","delete","weierstrassPoints","cat","head","y2","sqrtError","suffix","numToNByteStr","isBiggerThanHalfOrder","slcNum","Signature","recovery","fromCompact","fromDER","addRecoveryBit","recoverPublicKey","msgHash","rec","radj","prefix","R","ir","u1","u2","hasHighS","normalizeS","toDERRawBytes","toDERHex","toCompactRawBytes","toCompactHex","utils","isValidPrivateKey","randomPrivateKey","fieldLen","minLen","reduced","precompute","isProbPub","str","delta","ORDER_MASK","int2octets","defaultSigOpts","defaultVerOpts","getPublicKey","getSharedSecret","privateA","publicB","sign","privKey","k2sig","some","extraEntropy","ent","h1int","seedArgs","kBytes","ik","normS","prepSig","drbg","verify","signature","publicKey","sg","_sig","derError","is","getHash","msgs","secp256k1P","secp256k1N","divNearest","_6n","_11n","_22n","_23n","_44n","_88n","b2","b6","b9","b11","b22","b44","b88","b176","b220","b223","secp256k1","defHash","createCurve","a1","b1","a2","POW_2_128","c2","exists","instance","checkFinished","output","U32_MASK64","fromBig","le","split","Ah","Al","SHA3_PI","SHA3_ROTL","_SHA3_IOTA","_7n","_256n","_0x71n","round","t","SHA3_IOTA_H","SHA3_IOTA_L","rotlH","rotlBH","rotlSH","rotlL","rotlBL","rotlSL","Keccak","enableXOF","rounds","posOut","state32","keccak","idx1","idx0","B0","B1","Th","Tl","curH","curL","shift","PI","keccakP","finish","writeInto","bufferOut","xofInto","xof","keccak_256","globalThis","crypto","u32","byteLength","createView","DataView","rotr","word","byteSwap","byteSwap32","TextEncoder","utf8ToBytes","concatBytes","Hash","clone","wrapConstructor","hashCons","hashC","msg","bytesLength","getRandomValues"],"sourceRoot":""}