{"noir_version":"0.35.0+b848cc128d2dc2b461581f21a35509a1af9065a7-aarch64","name":"AccountGroup","functions":[{"name":"compute_note_hash_and_optionally_a_nullifier","is_unconstrained":true,"custom_attributes":[],"abi":{"parameters":[{"name":"contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"note_type_id","type":{"kind":"field"},"visibility":"private"},{"name":"compute_nullifier","type":{"kind":"boolean"},"visibility":"private"},{"name":"serialized_note","type":{"kind":"array","length":17,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"public"},"error_types":{"12265343917440897559":{"error_kind":"fmtstring","length":20,"item_types":[]}}},"bytecode":"","debug_symbols":"","brillig_names":["compute_note_hash_and_optionally_a_nullifier"]},{"name":"constructor","is_unconstrained":false,"custom_attributes":["private","initializer"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"signing_pub_key_x","type":{"kind":"field"},"visibility":"private"},{"name":"signing_pub_key_y","type":{"kind":"field"},"visibility":"private"},{"name":"admin","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"call_context","type":{"kind":"struct","path":"protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"call_context","type":{"kind":"struct","path":"protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"call_context","type":{"kind":"struct","path":"protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::log_hash::NoteLogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"protocol_types::abis::log_hash::EncryptedLogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}]}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}]}}},{"name":"historical_header","type":{"kind":"struct","path":"protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}}]}}]},"visibility":"public"},"error_types":{}},"bytecode":"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","debug_symbols":"","brillig_names":["get_contract_instance_internal","get_public_keys_and_partial_address","decompose_hint","notify_created_note_oracle_wrapper","get_key_validation_request","random","lt_32_hint","lte_16_hint","build_msg_block_iter","pad_msg_block","attach_len_to_msg_block","build_msg_block_iter","emit_encrypted_note_log_oracle_wrapper","notify_created_note_oracle_wrapper","build_msg_block_iter","emit_encrypted_note_log_oracle_wrapper","directive_invert","directive_integer_quotient"]},{"name":"get_admin","is_unconstrained":false,"custom_attributes":["private"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"call_context","type":{"kind":"struct","path":"protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"call_context","type":{"kind":"struct","path":"protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"call_context","type":{"kind":"struct","path":"protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::log_hash::NoteLogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"protocol_types::abis::log_hash::EncryptedLogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}]}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}]}}},{"name":"historical_header","type":{"kind":"struct","path":"protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}}]}}]},"visibility":"public"},"error_types":{"12265343917440897559":{"error_kind":"fmtstring","length":20,"item_types":[]}}},"bytecode":"","debug_symbols":"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","brillig_names":["get_note_internal","decompose_hint","pack_returns_oracle_wrapper","directive_invert"]},{"name":"lookup_validity","is_unconstrained":true,"custom_attributes":[],"abi":{"parameters":[{"name":"consumer","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"inner_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"boolean"},"visibility":"public"},"error_types":{}},"bytecode":"","debug_symbols":"","brillig_names":["lookup_validity"]},{"name":"entrypoint","is_unconstrained":false,"custom_attributes":["private"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"app_payload","type":{"kind":"struct","path":"authwit::entrypoint::app::AppPayload","fields":[{"name":"function_calls","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"authwit::entrypoint::function_call::FunctionCall","fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"function_selector","type":{"kind":"struct","path":"protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"target_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_public","type":{"kind":"boolean"}},{"name":"is_static","type":{"kind":"boolean"}}]}}},{"name":"nonce","type":{"kind":"field"}}]},"visibility":"private"},{"name":"fee_payload","type":{"kind":"struct","path":"authwit::entrypoint::fee::FeePayload","fields":[{"name":"function_calls","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"authwit::entrypoint::function_call::FunctionCall","fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"function_selector","type":{"kind":"struct","path":"protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"target_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_public","type":{"kind":"boolean"}},{"name":"is_static","type":{"kind":"boolean"}}]}}},{"name":"nonce","type":{"kind":"field"}},{"name":"is_fee_payer","type":{"kind":"boolean"}}]},"visibility":"private"},{"name":"cancellable","type":{"kind":"boolean"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"call_context","type":{"kind":"struct","path":"protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"call_context","type":{"kind":"struct","path":"protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"call_context","type":{"kind":"struct","path":"protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::log_hash::NoteLogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"protocol_types::abis::log_hash::EncryptedLogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}]}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}]}}},{"name":"historical_header","type":{"kind":"struct","path":"protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}}]}}]},"visibility":"public"},"error_types":{"12265343917440897559":{"error_kind":"fmtstring","length":20,"item_types":[]}}},"bytecode":"","debug_symbols":"","brillig_names":["get_note_internal","decompose_hint","get_auth_witness","enqueue_public_function_call_internal","call_private_function_internal","debug_log_oracle_wrapper","notify_set_min_revertible_side_effect_counter_oracle_wrapper","directive_invert","directive_integer_quotient"]},{"name":"verify_private_authwit","is_unconstrained":false,"custom_attributes":["private","view"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"inner_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"call_context","type":{"kind":"struct","path":"protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"call_context","type":{"kind":"struct","path":"protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"call_context","type":{"kind":"struct","path":"protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::log_hash::NoteLogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"protocol_types::abis::log_hash::EncryptedLogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}]}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}]}}},{"name":"historical_header","type":{"kind":"struct","path":"protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}}]}}]},"visibility":"public"},"error_types":{"12265343917440897559":{"error_kind":"fmtstring","length":20,"item_types":[]}}},"bytecode":"","debug_symbols":"","brillig_names":["get_note_internal","decompose_hint","get_auth_witness","pack_returns_oracle_wrapper","directive_invert","directive_integer_quotient"]}],"outputs":{"structs":{"functions":[{"kind":"struct","path":"AccountGroup::constructor_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"AccountGroup::constructor_parameters","fields":[{"name":"signing_pub_key_x","type":{"kind":"field"}},{"name":"signing_pub_key_y","type":{"kind":"field"}},{"name":"admin","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"AccountGroup::entrypoint_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"AccountGroup::entrypoint_parameters","fields":[{"name":"app_payload","type":{"kind":"struct","path":"authwit::entrypoint::app::AppPayload","fields":[{"name":"function_calls","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"authwit::entrypoint::function_call::FunctionCall","fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"function_selector","type":{"kind":"struct","path":"protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"target_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_public","type":{"kind":"boolean"}},{"name":"is_static","type":{"kind":"boolean"}}]}}},{"name":"nonce","type":{"kind":"field"}}]}},{"name":"fee_payload","type":{"kind":"struct","path":"authwit::entrypoint::fee::FeePayload","fields":[{"name":"function_calls","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"authwit::entrypoint::function_call::FunctionCall","fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"function_selector","type":{"kind":"struct","path":"protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"target_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_public","type":{"kind":"boolean"}},{"name":"is_static","type":{"kind":"boolean"}}]}}},{"name":"nonce","type":{"kind":"field"}},{"name":"is_fee_payer","type":{"kind":"boolean"}}]}},{"name":"cancellable","type":{"kind":"boolean"}}]}}]},{"kind":"struct","path":"AccountGroup::get_admin_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"AccountGroup::get_admin_parameters","fields":[]}},{"name":"return_type","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"AccountGroup::verify_private_authwit_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"AccountGroup::verify_private_authwit_parameters","fields":[{"name":"inner_hash","type":{"kind":"field"}}]}},{"name":"return_type","type":{"kind":"field"}}]}]},"globals":{"storage":[{"kind":"struct","fields":[{"name":"contract_name","value":{"kind":"string","value":"Token"}},{"name":"fields","value":{"kind":"struct","fields":[{"name":"admin","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}]}},{"name":"minters","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}}]}},{"name":"balances","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}}]}},{"name":"total_supply","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}}]}},{"name":"pending_shields","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000005"}}]}},{"name":"public_balances","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000006"}}]}},{"name":"symbol","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000007"}}]}},{"name":"name","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000008"}}]}},{"name":"decimals","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000009"}}]}}]}}]},{"kind":"struct","fields":[{"name":"contract_name","value":{"kind":"string","value":"AccountGroup"}},{"name":"fields","value":{"kind":"struct","fields":[{"name":"signing_public_key","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}]}},{"name":"admin","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}}]}}]}}]}],"notes":[{"kind":"tuple","fields":[{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000003de78269"},{"kind":"string","value":"ValueNote"},{"kind":"struct","fields":[{"name":"value","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"npk_m_hash","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"randomness","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}}]}]},{"kind":"tuple","fields":[{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000008c1acdbf"},{"kind":"string","value":"TokenNote"},{"kind":"struct","fields":[{"name":"npk_m_hash","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"randomness","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"amount","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":true}}]}}]}]},{"kind":"tuple","fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000850bb34d"},{"kind":"string","value":"AddressNote"},{"kind":"struct","fields":[{"name":"address","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"npk_m_hash","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"randomness","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}}]}]},{"kind":"tuple","fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000be5b3a47"},{"kind":"string","value":"TransparentNote"},{"kind":"struct","fields":[{"name":"amount","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"secret_hash","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}}]}]},{"kind":"tuple","fields":[{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000003de78269"},{"kind":"string","value":"ValueNote"},{"kind":"struct","fields":[{"name":"value","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"npk_m_hash","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"randomness","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}}]}]},{"kind":"tuple","fields":[{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000008c1acdbf"},{"kind":"string","value":"TokenNote"},{"kind":"struct","fields":[{"name":"npk_m_hash","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"randomness","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"amount","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":true}}]}}]}]},{"kind":"tuple","fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000850bb34d"},{"kind":"string","value":"AddressNote"},{"kind":"struct","fields":[{"name":"address","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"npk_m_hash","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"randomness","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}}]}]},{"kind":"tuple","fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000a74a8dc0"},{"kind":"string","value":"PublicKeyNote"},{"kind":"struct","fields":[{"name":"x","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"y","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"npk_m_hash","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}}]}]},{"kind":"tuple","fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000be5b3a47"},{"kind":"string","value":"TransparentNote"},{"kind":"struct","fields":[{"name":"amount","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"secret_hash","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}}]}]},{"kind":"tuple","fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000fc6f65d4"},{"kind":"string","value":"NewAddressNote"},{"kind":"struct","fields":[{"name":"address","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"npk_m_hash","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}}]}]}]}},"file_map":{"3":{"source":"use crate::cmp::{Eq, Ord};\nuse crate::convert::From;\nuse crate::runtime::is_unconstrained;\n\nmod check_shuffle;\nmod quicksort;\n\nimpl<T, let N: u32> [T; N] {\n    /// Returns the length of this array.\n    /// \n    /// ```noir\n    /// fn len(self) -> Field\n    /// ```\n    /// \n    /// example\n    /// \n    /// ```noir\n    /// fn main() {\n    ///     let array = [42, 42];\n    ///     assert(array.len() == 2);\n    /// }\n    /// ```\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Returns this array as a slice.\n    /// \n    /// ```noir\n    /// let array = [1, 2];\n    /// let slice = array.as_slice();\n    /// assert_eq(slice, &[1, 2]);\n    /// ```\n    #[builtin(as_slice)]\n    pub fn as_slice(self) -> [T] {}\n\n    /// Applies a function to each element of this array, returning a new array containing the mapped elements.\n    /// \n    /// Example:\n    /// \n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.map(|a| a * 2);\n    /// assert_eq(b, [2, 4, 6]);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let first_elem = f(self[0]);\n        let mut ret = [first_elem; N];\n\n        for i in 1..self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of the array, returning the final accumulated value. The first\n    /// parameter is the initial value.\n    /// \n    /// This is a left fold, so the given function will be applied to the accumulator and first element of\n    /// the array, then the second, and so on. For a given call the expected result would be equivalent to:\n    /// \n    /// ```rust\n    /// let a1 = [1];\n    /// let a2 = [1, 2];\n    /// let a3 = [1, 2, 3];\n    /// \n    /// let f = |a, b| a - b;\n    /// a1.fold(10, f); //=> f(10, 1)\n    /// a2.fold(10, f); //=> f(f(10, 1), 2)\n    /// a3.fold(10, f); //=> f(f(f(10, 1), 2), 3)\n    /// \n    /// assert_eq(a3.fold(10, f), 10 - 1 - 2 - 3);\n    /// ```\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    /// Same as fold, but uses the first element as the starting element.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn main() {\n    ///     let arr = [1, 2, 3, 4];\n    ///     let reduced = arr.reduce(|a, b| a + b);\n    ///     assert(reduced == 10);\n    /// }\n    /// ```\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    /// Returns true if all the elements in this array satisfy the given predicate.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 2];\n    ///     let all = arr.all(|a| a == 2);\n    ///     assert(all);\n    /// }\n    /// ```\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    /// Returns true if any of the elements in this array satisfy the given predicate.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 5];\n    ///     let any = arr.any(|a| a == 5);\n    ///     assert(any);\n    /// }\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n\nimpl<T, let N: u32> [T; N] where T: Ord + Eq {\n    /// Returns a new sorted array. The original array remains untouched. Notice that this function will\n    /// only work for arrays of fields or integers, not for any arbitrary type. This is because the sorting\n    /// logic it uses internally is optimized specifically for these values. If you need a sort function to\n    /// sort any type, you should use the `sort_via` function.\n    /// \n    /// Example:\n    /// \n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32];\n    ///     let sorted = arr.sort();\n    ///     assert(sorted == [32, 42]);\n    /// }\n    /// ```\n    pub fn sort(self) -> Self {\n        self.sort_via(|a: T, b: T| a <= b)\n    }\n}\n\nimpl<T, let N: u32> [T; N] where T: Eq {\n    /// Returns a new sorted array by sorting it with a custom comparison function. \n    /// The original array remains untouched. \n    /// The ordering function must return true if the first argument should be sorted to be before the second argument or is equal to the second argument.\n    /// \n    /// Using this method with an operator like `<` that does not return `true` for equal values will result in an assertion failure for arrays with equal elements.\n    /// \n    /// Example:\n    /// \n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32]\n    ///     let sorted_ascending = arr.sort_via(|a, b| a <= b);\n    ///     assert(sorted_ascending == [32, 42]); // verifies\n    /// \n    ///     let sorted_descending = arr.sort_via(|a, b| a >= b);\n    ///     assert(sorted_descending == [32, 42]); // does not verify\n    /// }\n    /// ```\n    pub fn sort_via<Env>(self, ordering: fn[Env](T, T) -> bool) -> Self {\n        unsafe {\n            // Safety: `sorted` array is checked to be:\n            //   a. a permutation of `input`'s elements\n            //   b. satisfying the predicate `ordering`\n            let sorted = quicksort::quicksort(self, ordering);\n\n            if !is_unconstrained() {\n                for i in 0..N - 1 {\n                    assert(\n                        ordering(sorted[i], sorted[i + 1]), \"Array has not been sorted correctly according to `ordering`.\"\n                    );\n                }\n                check_shuffle::check_shuffle(self, sorted);\n            }\n            sorted\n        }\n    }\n}\n\nimpl<let N: u32> [u8; N] {\n    /// Converts a byte array of type `[u8; N]` to a string. Note that this performs no UTF-8 validation -\n    /// the given array is interpreted as-is as a string.\n    /// \n    /// Example:\n    /// \n    /// ```rust\n    /// fn main() {\n    ///     let hi = [104, 105].as_str_unchecked();\n    ///     assert_eq(hi, \"hi\");\n    /// }\n    /// ```\n    #[builtin(array_as_str_unchecked)]\n    pub fn as_str_unchecked(self) -> str<N> {}\n}\n\nimpl<let N: u32> From<str<N>> for [u8; N] {\n    /// Returns an array of the string bytes.\n    fn from(s: str<N>) -> Self {\n        s.as_bytes()\n    }\n}\n","path":"std/array/mod.nr"},"7":{"source":"use crate::{cmp::Eq, convert::From};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n/// \n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n/// \n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n/// \n/// Example:\n/// \n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a \n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    /// \n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    /// \n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    /// \n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    /// \n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    /// \n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    /// \n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    /// \n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure. \n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    /// \n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    /// \n    /// Panics if the new length of the vector will be greater than the max length.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// \n    /// v.push(1);\n    /// v.push(2);\n    /// \n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    /// \n    /// v.push(100);\n    /// assert(v.len() == 1);\n    /// \n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    /// \n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    /// \n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    /// \n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    /// \n    /// Note that uninitialized elements may be zeroed out!\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    /// \n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    /// \n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    /// \n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    /// \n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    /// \n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    /// \n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    /// \n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    /// \n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    /// \n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    /// \n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        let mut exceeded_len = false;\n        for i in 0..Len {\n            exceeded_len |= i == append_len;\n            if !exceeded_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input. \n    /// The maximum length of the vector is determined based on the type signature.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    /// \n    /// Panics if the vector is empty.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    /// \n    /// let two = v.pop();\n    /// let one = v.pop();\n    /// \n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    /// \n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if !exceeded_len {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.  \n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    /// \n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n        for i in 0..MaxLen {\n            if i < self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        }\n        ret\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen> where T: Eq {\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n\n        (self.len == other.len) & (self.storage == other.storage)\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2)  as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.storage()[2], 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage()[0], 1);\n            assert_eq(bounded_vec.storage()[1], 2);\n            assert_eq(bounded_vec.storage()[2], 3);\n        }\n\n        #[test(should_fail_with=\"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.storage()[0], 1);\n            assert_eq(bounded_vec.storage()[1], 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n}\n","path":"std/collections/bounded_vec.nr"},"24":{"source":"use crate::ops::arith::{Add, Sub, Neg};\nuse crate::cmp::Eq;\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\npub struct EmbeddedCurvePoint {\n    x: Field,\n    y: Field,\n    is_infinite: bool\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    pub fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    pub fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: self.x, y: -self.y, is_infinite: self.is_infinite }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite)\n            | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\npub struct EmbeddedCurveScalar {\n    lo: Field,\n    hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    pub fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a,b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n\n    //Bytes to scalar: take the first (after the specified offset) 16 bytes of the input as the lo value, and the next 16 bytes as the hi value\n    #[field(bn254)]\n    pub(crate) fn from_bytes(bytes: [u8; 64], offset: u32) -> EmbeddedCurveScalar {\n        let mut v = 1;\n        let mut lo = 0 as Field;\n        let mut hi = 0 as Field;\n        for i in 0..16 {\n            lo = lo + (bytes[offset+31 - i] as Field) * v;\n            hi = hi + (bytes[offset+15 - i] as Field) * v;\n            v = v * 256;\n        }\n        let sig_s = crate::embedded_curve_ops::EmbeddedCurveScalar { lo, hi };\n        sig_s\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the \n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N]\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    let point_array = multi_scalar_mul_array_return(points, scalars);\n    EmbeddedCurvePoint { x: point_array[0], y: point_array[1], is_infinite: point_array[2] as bool }\n}\n\n#[foreign(multi_scalar_mul)]\nfn multi_scalar_mul_array_return<let N: u32>(points: [EmbeddedCurvePoint; N], scalars: [EmbeddedCurveScalar; N]) -> [Field; 3] {}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_slice(points: [EmbeddedCurvePoint], scalars: [EmbeddedCurveScalar]) -> [Field; 3] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    let g1 = EmbeddedCurvePoint { x: 1, y: 17631683881184975370165255887551781615748388533673675138860, is_infinite: false };\n    multi_scalar_mul([g1], [scalar])\n}\n\n/// This function only assumes that the points are on the curve\n/// It handles corner cases around the infinity point causing some overhead compared to embedded_curve_add_not_nul and embedded_curve_add_unsafe\n// This is a hack because returning an `EmbeddedCurvePoint` from a foreign function in brillig returns a [BrilligVariable::SingleAddr; 2] rather than BrilligVariable::BrilligArray\n// as is defined in the brillig bytecode format. This is a workaround which allows us to fix this without modifying the serialization format.\n// docs:start:embedded_curve_add\npub fn embedded_curve_add(point1: EmbeddedCurvePoint, point2: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n    // docs:end:embedded_curve_add\n    let x_coordinates_match = point1.x == point2.x;\n    let y_coordinates_match = point1.y == point2.y;\n    let double_predicate = (x_coordinates_match & y_coordinates_match);\n    let infinity_predicate = (x_coordinates_match & !y_coordinates_match);\n    let point1_1 = EmbeddedCurvePoint { x: point1.x + (x_coordinates_match as Field), y: point1.y, is_infinite: x_coordinates_match };\n    // point1_1 is guaranteed to have a different abscissa than point2\n    let mut result = embedded_curve_add_unsafe(point1_1, point2);\n    result.is_infinite = x_coordinates_match;\n\n    // dbl if x_match, y_match\n    let double = embedded_curve_add_unsafe(point1, point1);\n    result = if double_predicate { double } else { result };\n\n    // infinity if x_match, !y_match\n    if point1.is_infinite {\n        result= point2;\n    }\n    if point2.is_infinite {\n        result = point1;\n    }\n    let mut result_is_infinity = infinity_predicate & (!point1.is_infinite & !point2.is_infinite);\n    result.is_infinite = result_is_infinity | (point1.is_infinite & point2.is_infinite);\n    result\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(_point1: EmbeddedCurvePoint, _point2: EmbeddedCurvePoint) -> [Field; 3] {}\n\n/// This function assumes that:\n/// The points are on the curve, and\n/// The points don't share an x-coordinate, and\n/// Neither point is the infinity point.\n/// If it is used with correct input, the function ensures the correct non-zero result is returned.\n/// Except for points on the curve, the other assumptions are checked by the function. It will cause assertion failure if they are not respected.\npub fn embedded_curve_add_not_nul(point1: EmbeddedCurvePoint, point2: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n    assert(point1.x != point2.x);\n    assert(!point1.is_infinite);\n    assert(!point2.is_infinite);\n    embedded_curve_add_unsafe(point1, point2)\n}\n\n/// Unsafe ec addition\n/// If the inputs are the same, it will perform a doubling, but only if point1 and point2 are the same variable.\n/// If they have the same value but are different variables, the result will be incorrect because in this case\n/// it assumes (but does not check) that the points' x-coordinates are not equal.\n/// It also assumes neither point is the infinity point.\npub fn embedded_curve_add_unsafe(point1: EmbeddedCurvePoint, point2: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n    let point_array = embedded_curve_add_array_return(point1, point2);\n    let x = point_array[0];\n    let y = point_array[1];\n\n    EmbeddedCurvePoint { x, y, is_infinite: false }\n}\n","path":"std/embedded_curve_ops.nr"},"25":{"source":"use crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n\n    let mut low: Field = 0;\n    let mut high: Field = 0;\n\n    let mut offset = 1;\n    for i in 0..16 {\n        low += (x_bytes[i] as Field) * offset;\n        high += (x_bytes[i + 16] as Field) * offset;\n        offset *= 256;\n    }\n\n    (low, high)\n}\n\nunconstrained pub(crate) fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nfn compute_lt(x: Field, y: Field, num_bytes: u32) -> bool {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n    let y_bytes: [u8; 32] = y.to_le_bytes();\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i];\n            let y_byte = y_bytes[num_bytes - 1 - i];\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nfn compute_lte(x: Field, y: Field, num_bytes: u32) -> bool {\n    if x == y {\n        true\n    } else {\n        compute_lt(x, y, num_bytes)\n    }\n}\n\nunconstrained fn lt_32_hint(x: Field, y: Field) -> bool {\n    compute_lt(x, y, 32)\n}\n\nunconstrained fn lte_16_hint(x: Field, y: Field) -> bool {\n    compute_lte(x, y, 16)\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    unsafe {\n        let borrow = lte_16_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size(128);\n        rhi.assert_max_bit_size(128);\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size(128);\n            xhi.assert_max_bit_size(128);\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(compute_lt(b, a, 32));\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        compute_lt(b, a, 32)\n    } else if a == b {\n        false\n    } else {\n        // Take a hint of the comparison and verify it\n        unsafe {\n            if lt_32_hint(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{decompose, compute_lt, assert_gt, gt, TWO_POW_128, compute_lte, PLO, PHI};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    fn check_compute_lt() {\n        assert(compute_lt(0, 1, 16));\n        assert(compute_lt(0, 0x100, 16));\n        assert(compute_lt(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lt(0, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_compute_lte() {\n        assert(compute_lte(0, 1, 16));\n        assert(compute_lte(0, 0x100, 16));\n        assert(compute_lte(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lte(0, TWO_POW_128, 16));\n\n        assert(compute_lte(0, 0, 16));\n        assert(compute_lte(0x100, 0x100, 16));\n        assert(compute_lte(TWO_POW_128 - 1, TWO_POW_128 - 1, 16));\n        assert(compute_lte(TWO_POW_128, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n","path":"std/field/bn254.nr"},"26":{"source":"pub mod bn254;\nuse bn254::lt as bn254_lt;\nuse crate::runtime::is_unconstrained;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size(self, bit_size: u32) {\n        // docs:end:assert_max_bit_size\n        crate::assert_constant(bit_size);\n        assert(bit_size < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(bit_size);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    /// \n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_le_bits\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    /// \n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n     // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_be_bits\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    /// \n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self', \n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let  p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    /// \n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self', \n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let  p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        crate::assert_constant(radix);\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        crate::assert_constant(radix);\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N-1-i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n    let y_bytes: [u8; 32] = y.to_le_bytes();\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..32 {\n        if (!done) {\n            let x_byte = x_bytes[32 - 1 - i] as u8;\n            let y_byte = y_bytes[32 - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nmod tests {\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_be_bytes();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bits), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_le_bytes();\n        assert_eq(bits, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bits), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bits), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bits, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bits), field);\n    }\n    // docs:end:to_le_radix_example\n}\n","path":"std/field/mod.nr"},"29":{"source":"pub mod poseidon;\npub mod mimc;\npub mod poseidon2;\npub mod keccak;\npub mod sha256;\npub mod sha512;\n\nuse crate::default::Default;\nuse crate::uint128::U128;\nuse crate::collections::vec::Vec;\nuse crate::embedded_curve_ops::{EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_slice};\nuse crate::meta::derive_via;\n\n// Kept for backwards compatibility\npub use sha256::{digest, sha256, sha256_compression, sha256_var};\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    pedersen_hash_with_separator_noir(input, separator)\n}\n\npub fn pedersen_commitment_with_separator<let N: u32>(input: [Field; N], separator: u32) -> EmbeddedCurvePoint {\n    let value = __pedersen_commitment_with_separator(input, separator);\n    if (value[0] == 0) & (value[1] == 0) {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    } else {\n        EmbeddedCurvePoint { x: value[0], y: value[1], is_infinite: false }\n    }\n}\n\n#[no_predicates]\nfn pedersen_commitment_with_separator_noir<let N: u32>(input: [Field; N], separator: u32) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n#[no_predicates]\nfn pedersen_hash_with_separator_noir<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: Vec<EmbeddedCurveScalar> = Vec::from_slice([EmbeddedCurveScalar { lo: 0, hi: 0 }; N].as_slice()); //Vec::new();\n\n    for i in 0..N {\n        scalars.set(i, from_field_unsafe(input[i]));\n    }\n    scalars.push(EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field });\n    let domain_generators :[EmbeddedCurvePoint; N]= derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    let mut vec_generators = Vec::new();\n    for i in 0..N {\n        vec_generators.push(domain_generators[i]);\n    }\n    let length_generator : [EmbeddedCurvePoint; 1] = derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    vec_generators.push(length_generator[0]);\n    multi_scalar_mul_slice(vec_generators.slice, scalars.slice)[0]\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator_noir(input, 0)\n}\n\n#[foreign(pedersen_hash)]\nfn __pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {}\n\n#[foreign(pedersen_commitment)]\nfn __pedersen_commitment_with_separator<let N: u32>(input: [Field; N], separator: u32) -> [Field; 2] {}\n\n#[field(bn254)]\npub fn derive_generators<let N: u32, let M: u32>(domain_separator_bytes: [u8; M], starting_index: u32) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(domain_separator_bytes: [u8; M], starting_index: u32) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    let (xlo, xhi) = unsafe {\n        crate::field::bn254::decompose_hint(scalar)\n    };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n// docs:start:keccak256\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{\n    crate::hash::keccak::keccak256(input, message_size)\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: StructDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(s, name, signature, for_each_field, quote {}, |fields| fields)\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H> where H: Hasher {\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default {\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default {\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H) where H: Hasher {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self.lo as Field);\n        H::write(state, self.hi as Field);\n    }\n}\n\nimpl<T, let N: u32> Hash for [T; N] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B) where A: Hash, B: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C) where A: Hash, B: Hash, C: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D) where A: Hash, B: Hash, C: Hash, D: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E) where A: Hash, B: Hash, C: Hash, D: Hash, E: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1), 0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1), EmbeddedCurvePoint {\n        x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n        y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n        is_infinite: false\n    }\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2), 0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2), EmbeddedCurvePoint {\n        x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n        y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3), 0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3), EmbeddedCurvePoint {\n        x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n        y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4), 0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4), EmbeddedCurvePoint {\n        x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n        y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5), 0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5), EmbeddedCurvePoint {\n        x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n        y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6), 0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6), EmbeddedCurvePoint {\n        x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n        y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7), 0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7), EmbeddedCurvePoint {\n        x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n        y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8), 0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8), EmbeddedCurvePoint {\n        x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n        y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9), 0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9), EmbeddedCurvePoint {\n        x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n        y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10), 0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10), EmbeddedCurvePoint {\n        x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n        y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n        is_infinite: false\n    }\n    );\n}\n","path":"std/hash/mod.nr"},"34":{"source":"use crate::hash::Hasher;\nuse crate::default::Default;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field;3],\n    state: [Field;4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        if message_size == N {\n            Poseidon2::hash_internal(input, N, false)\n        } else {\n            Poseidon2::hash_internal(input, message_size, true)\n        }\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result = Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(input: [Field; N], in_len: u32, is_variable_length: bool) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv : Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher{\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv : Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n","path":"std/hash/poseidon2.nr"},"35":{"source":"use crate::runtime::is_unconstrained;\n\n// Implementation of SHA-256 mapping a byte array of variable length to\n// 32 bytes.\n\n// Deprecated in favour of `sha256_var`\n// docs:start:sha256\npub fn sha256<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:sha256\n{\n    digest(input)\n}\n\n#[foreign(sha256_compression)]\npub fn sha256_compression(_input: [u32; 16], _state: [u32; 8]) -> [u32; 8] {}\n\n// SHA-256 hash function\n#[no_predicates]\npub fn digest<let N: u32>(msg: [u8; N]) -> [u8; 32] {\n    sha256_var(msg, N as u64)\n}\n\n// Convert 64-byte array to array of 16 u32s\nfn msg_u8_to_u32(msg: [u8; 64]) -> [u32; 16] {\n    let mut msg32: [u32; 16] = [0; 16];\n\n    for i in 0..16 {\n        let mut msg_field: Field = 0;\n        for j in 0..4 {\n            msg_field = msg_field * 256 + msg[64 - 4*(i + 1) + j] as Field;\n        }\n        msg32[15 - i] = msg_field as u32;\n    }\n\n    msg32\n}\n\nunconstrained fn build_msg_block_iter<let N: u32>(msg: [u8; N], message_size: u32, msg_start: u32) -> ([u8; 64], u32) {\n    let mut msg_block: [u8; BLOCK_SIZE] = [0; BLOCK_SIZE];\n    // We insert `BLOCK_SIZE` bytes (or up to the end of the message)\n    let block_input = if msg_start + BLOCK_SIZE > message_size {\n        if message_size < msg_start {\n            // This function is sometimes called with `msg_start` past the end of the message.\n            // In this case we return an empty block and zero pointer to signal that the result should be ignored.\n            0\n        } else {\n            message_size - msg_start\n        }\n    } else {\n        BLOCK_SIZE\n    };\n    for k in 0..block_input {\n        msg_block[k] = msg[msg_start + k];\n    }\n    (msg_block, block_input)\n}\n\n// Verify the block we are compressing was appropriately constructed\nfn verify_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_block: [u8; 64],\n    msg_start: u32\n) -> u32 {\n    let mut msg_byte_ptr: u32 = 0; // Message byte pointer\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    if msg_end > N {\n        msg_end = N;\n    }\n\n    for k in msg_start..msg_end {\n        if k < message_size {\n            assert_eq(msg_block[msg_byte_ptr], msg[k]);\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n\n    msg_byte_ptr\n}\n\nglobal BLOCK_SIZE = 64;\nglobal ZERO = 0;\n\n// Variable size SHA-256 hash\npub fn sha256_var<let N: u32>(msg: [u8; N], message_size: u64) -> [u8; 32] {\n    let message_size = message_size as u32;\n    let num_blocks = N / BLOCK_SIZE;\n    let mut msg_block: [u8; BLOCK_SIZE] = [0; BLOCK_SIZE];\n    let mut h: [u32; 8] = [1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635, 1541459225]; // Intermediate hash, starting with the canonical initial value\n    let mut msg_byte_ptr = 0; // Pointer into msg_block\n\n    for i in 0..num_blocks {\n        let msg_start = BLOCK_SIZE * i;\n        let (new_msg_block, new_msg_byte_ptr) = unsafe {\n            build_msg_block_iter(msg, message_size, msg_start)\n        };\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n        } else if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n\n        // If the block is filled, compress it.\n        // An un-filled block is handled after this loop.\n        if (msg_start < message_size) & (msg_byte_ptr == BLOCK_SIZE) {\n            h = sha256_compression(msg_u8_to_u32(msg_block), h);\n        }\n    }\n\n    let modulo = N % BLOCK_SIZE;\n    // Handle setup of the final msg block.\n    // This case is only hit if the msg is less than the block size,\n    // or our message cannot be evenly split into blocks.\n    if modulo != 0 {\n        let msg_start = BLOCK_SIZE * num_blocks;\n        let (new_msg_block, new_msg_byte_ptr) = unsafe {\n            build_msg_block_iter(msg, message_size, msg_start)\n        };\n\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n        } else if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n    }\n\n    if msg_byte_ptr == BLOCK_SIZE {\n        msg_byte_ptr = 0;\n    }\n\n    // This variable is used to get around the compiler under-constrained check giving a warning.\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\n    // or return values the compiler check will issue a warning.\n    let zero = msg_block[0] - msg_block[0];\n\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n    msg_block[msg_byte_ptr] = 1 << 7;\n    let last_block = msg_block;\n    msg_byte_ptr = msg_byte_ptr + 1;\n\n    unsafe {\n        let (new_msg_block, new_msg_byte_ptr) = pad_msg_block(msg_block, msg_byte_ptr);\n        msg_block = new_msg_block;\n        if crate::runtime::is_unconstrained() {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n    }\n\n    if !crate::runtime::is_unconstrained() {\n        for i in 0..BLOCK_SIZE {\n            assert_eq(msg_block[i], last_block[i]);\n        }\n\n        // If i >= 57, there aren't enough bits in the current message block to accomplish this, so\n        // the 1 and 0s fill up the current block, which we then compress accordingly.\n        // Not enough bits (64) to store length. Fill up with zeros.\n        for _i in 57..BLOCK_SIZE {\n            if msg_byte_ptr <= 63 & msg_byte_ptr >= 57 {\n                assert_eq(msg_block[msg_byte_ptr], zero);\n                msg_byte_ptr += 1;\n            }\n        }\n    }\n\n    if msg_byte_ptr >= 57 {\n        h = sha256_compression(msg_u8_to_u32(msg_block), h);\n\n        msg_byte_ptr = 0;\n    }\n\n    msg_block = unsafe {\n        attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size)\n    };\n\n    if !crate::runtime::is_unconstrained() {\n        for i in 0..56 {\n            let predicate = (i < msg_byte_ptr) as u8;\n            let expected_byte = predicate * last_block[i];\n            assert_eq(msg_block[i], expected_byte);\n        }\n\n        // We verify the message length was inserted correctly by reversing the byte decomposition.\n        let len = 8 * message_size;\n        let mut reconstructed_len: Field = 0;\n        for i in 56..64 {\n            reconstructed_len = 256 * reconstructed_len + msg_block[i] as Field;\n        }\n        assert_eq(reconstructed_len, len as Field);\n    }\n\n    hash_final_block(msg_block, h)\n}\n\nunconstrained fn pad_msg_block(\n    mut msg_block: [u8; 64],\n    mut msg_byte_ptr: u32\n) -> ([u8; BLOCK_SIZE], u32) {\n    // If i >= 57, there aren't enough bits in the current message block to accomplish this, so\n    // the 1 and 0s fill up the current block, which we then compress accordingly.\n    if msg_byte_ptr >= 57 {\n        // Not enough bits (64) to store length. Fill up with zeros.\n        for i in msg_byte_ptr..BLOCK_SIZE {\n            msg_block[i] = 0;\n        }\n        (msg_block, BLOCK_SIZE)\n    } else {\n        (msg_block, msg_byte_ptr)\n    }\n}\n\nunconstrained fn attach_len_to_msg_block(mut msg_block: [u8; BLOCK_SIZE], msg_byte_ptr: u32, message_size: u32) -> [u8; BLOCK_SIZE] {\n    // We assume that `msg_byte_ptr` is less than 57 because if not then it is reset to zero before calling this function.\n    // In any case, fill blocks up with zeros until the last 64 (i.e. until msg_byte_ptr = 56).\n\n    for i in msg_byte_ptr..56 {\n        msg_block[i] = 0;\n    }\n\n    let len = 8 * message_size;\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n    for i in 0..8 {\n        msg_block[56 + i] = len_bytes[i];\n    }\n    msg_block\n}\n\nfn hash_final_block(msg_block: [u8; BLOCK_SIZE], mut state: [u32; 8]) -> [u8; 32] {\n    let mut out_h: [u8; 32] = [0; 32]; // Digest as sequence of bytes\n\n    // Hash final padded block\n    state = sha256_compression(msg_u8_to_u32(msg_block), state);\n\n    // Return final hash as byte array\n    for j in 0..8 {\n        let h_bytes: [u8; 4] = (state[7 - j] as Field).to_le_bytes();\n        for k in 0..4 {\n            out_h[31 - 4*j - k] = h_bytes[k];\n        }\n    }\n\n    out_h\n}\n\nmod tests {\n    use super::sha256_var;\n\n    #[test]\n    fn smoke_test() {\n        let input = [0xbd];\n        let result = [\n            0x68, 0x32, 0x57, 0x20, 0xaa, 0xbd, 0x7c, 0x82, 0xf3, 0x0f, 0x55, 0x4b, 0x31, 0x3d, 0x05, 0x70, 0xc9, 0x5a, 0xcc, 0xbb, 0x7d, 0xc4, 0xb5, 0xaa, 0xe1, 0x12, 0x04, 0xc0, 0x8f, 0xfe, 0x73, 0x2b\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_just_over_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117, 101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99, 111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112, 108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116\n        ];\n        let result = [\n            91, 122, 146, 93, 52, 109, 133, 148, 171, 61, 156, 70, 189, 238, 153, 7, 222, 184, 94, 24, 65, 114, 192, 244, 207, 199, 87, 232, 192, 224, 171, 207\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_multiple_over_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117, 101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99, 111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112, 108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 117, 115, 45, 97, 115, 99, 105, 105, 13, 10, 109, 105, 109, 101, 45, 118, 101, 114, 115, 105, 111, 110, 58, 49, 46, 48, 32, 40, 77, 97, 99, 32, 79, 83, 32, 88, 32, 77, 97, 105, 108, 32, 49, 54, 46, 48, 32, 92, 40, 51, 55, 51, 49, 46, 53, 48, 48, 46, 50, 51, 49, 92, 41, 41, 13, 10, 115, 117, 98, 106, 101, 99, 116, 58, 72, 101, 108, 108, 111, 13, 10, 109, 101, 115, 115, 97, 103, 101, 45, 105, 100, 58, 60, 56, 70, 56, 49, 57, 68, 51, 50, 45, 66, 54, 65, 67, 45, 52, 56, 57, 68, 45, 57, 55, 55, 70, 45, 52, 51, 56, 66, 66, 67, 52, 67, 65, 66, 50, 55, 64, 109, 101, 46, 99, 111, 109, 62, 13, 10, 100, 97, 116, 101, 58, 83, 97, 116, 44, 32, 50, 54, 32, 65, 117, 103, 32, 50, 48, 50, 51, 32, 49, 50, 58, 50, 53, 58, 50, 50, 32, 43, 48, 52, 48, 48, 13, 10, 116, 111, 58, 122, 107, 101, 119, 116, 101, 115, 116, 64, 103, 109, 97, 105, 108, 46, 99, 111, 109, 13, 10, 100, 107, 105, 109, 45, 115, 105, 103, 110, 97, 116, 117, 114, 101, 58, 118, 61, 49, 59, 32, 97, 61, 114, 115, 97, 45, 115, 104, 97, 50, 53, 54, 59, 32, 99, 61, 114, 101, 108, 97, 120, 101, 100, 47, 114, 101, 108, 97, 120, 101, 100, 59, 32, 100, 61, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 59, 32, 115, 61, 49, 97, 49, 104, 97, 105, 59, 32, 116, 61, 49, 54, 57, 51, 48, 51, 56, 51, 51, 55, 59, 32, 98, 104, 61, 55, 120, 81, 77, 68, 117, 111, 86, 86, 85, 52, 109, 48, 87, 48, 87, 82, 86, 83, 114, 86, 88, 77, 101, 71, 83, 73, 65, 83, 115, 110, 117, 99, 75, 57, 100, 74, 115, 114, 99, 43, 118, 85, 61, 59, 32, 104, 61, 102, 114, 111, 109, 58, 67, 111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101, 58, 77, 105, 109, 101, 45, 86, 101, 114, 115, 105, 111, 110, 58, 83, 117, 98, 106, 101, 99\n        ];\n        let result = [\n            116, 90, 151, 31, 78, 22, 138, 180, 211, 189, 69, 76, 227, 200, 155, 29, 59, 123, 154, 60, 47, 153, 203, 129, 157, 251, 48, 2, 79, 11, 65, 47\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_just_under_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117, 101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99, 111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112, 108, 97, 105, 110, 59\n        ];\n        let result = [\n            143, 140, 76, 173, 222, 123, 102, 68, 70, 149, 207, 43, 39, 61, 34, 79, 216, 252, 213, 165, 74, 16, 110, 74, 29, 64, 138, 167, 30, 1, 9, 119\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_big_not_block_multiple() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117, 101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99, 111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112, 108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 117, 115, 45, 97, 115, 99, 105, 105, 13, 10, 109, 105, 109, 101, 45, 118, 101, 114, 115, 105, 111, 110, 58, 49, 46, 48, 32, 40, 77, 97, 99, 32, 79, 83, 32, 88, 32, 77, 97, 105, 108, 32, 49, 54, 46, 48, 32, 92, 40, 51, 55, 51, 49, 46, 53, 48, 48, 46, 50, 51, 49, 92, 41, 41, 13, 10, 115, 117, 98, 106, 101, 99, 116, 58, 72, 101, 108, 108, 111, 13, 10, 109, 101, 115, 115, 97, 103, 101, 45, 105, 100, 58, 60, 56, 70, 56, 49, 57, 68, 51, 50, 45, 66, 54, 65, 67, 45, 52, 56, 57, 68, 45, 57, 55, 55, 70, 45, 52, 51, 56, 66, 66, 67, 52, 67, 65, 66, 50, 55, 64, 109, 101, 46, 99, 111, 109, 62, 13, 10, 100, 97, 116, 101, 58, 83, 97, 116, 44, 32, 50, 54, 32, 65, 117, 103, 32, 50, 48, 50, 51, 32, 49, 50, 58, 50, 53, 58, 50, 50, 32, 43, 48, 52, 48, 48, 13, 10, 116, 111, 58, 122, 107, 101, 119, 116, 101, 115, 116, 64, 103, 109, 97, 105, 108, 46, 99, 111, 109, 13, 10, 100, 107, 105, 109, 45, 115, 105, 103, 110, 97, 116, 117, 114, 101, 58, 118, 61, 49, 59, 32, 97, 61, 114, 115, 97, 45, 115, 104, 97, 50, 53, 54, 59, 32, 99, 61, 114, 101, 108, 97, 120, 101, 100, 47, 114, 101, 108, 97, 120, 101, 100, 59, 32, 100, 61, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 59, 32, 115, 61, 49, 97, 49, 104, 97, 105, 59, 32, 116, 61, 49, 54, 57, 51, 48, 51, 56, 51, 51, 55, 59, 32, 98, 104, 61, 55, 120, 81, 77, 68, 117, 111, 86, 86, 85, 52, 109, 48, 87, 48, 87, 82, 86, 83, 114, 86, 88, 77, 101, 71, 83, 73, 65, 83, 115, 110, 117, 99, 75, 57, 100, 74, 115, 114, 99, 43, 118, 85, 61, 59, 32, 104, 61, 102, 114, 111, 109, 58, 67, 111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101, 58, 77, 105, 109, 101, 45, 86, 101, 114, 115, 105, 111, 110, 58, 83, 117, 98, 106, 101, 99, 116, 58, 77, 101, 115, 115, 97, 103, 101, 45, 73, 100, 58, 68, 97, 116, 101, 58, 116, 111, 59, 32, 98, 61\n        ];\n        let result = [\n            112, 144, 73, 182, 208, 98, 9, 238, 54, 229, 61, 145, 222, 17, 72, 62, 148, 222, 186, 55, 192, 82, 220, 35, 66, 47, 193, 200, 22, 38, 26, 186\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_big_with_padding() {\n        let input = [\n            48, 130, 1, 37, 2, 1, 0, 48, 11, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 48, 130, 1, 17, 48, 37, 2, 1, 1, 4, 32, 176, 223, 31, 133, 108, 84, 158, 102, 70, 11, 165, 175, 196, 12, 201, 130, 25, 131, 46, 125, 156, 194, 28, 23, 55, 133, 157, 164, 135, 136, 220, 78, 48, 37, 2, 1, 2, 4, 32, 190, 82, 180, 235, 222, 33, 79, 50, 152, 136, 142, 35, 116, 224, 6, 242, 156, 141, 128, 248, 10, 61, 98, 86, 248, 45, 207, 210, 90, 232, 175, 38, 48, 37, 2, 1, 3, 4, 32, 0, 194, 104, 108, 237, 246, 97, 230, 116, 198, 69, 110, 26, 87, 17, 89, 110, 199, 108, 250, 36, 21, 39, 87, 110, 102, 250, 213, 174, 131, 171, 174, 48, 37, 2, 1, 11, 4, 32, 136, 155, 87, 144, 111, 15, 152, 127, 85, 25, 154, 81, 20, 58, 51, 75, 193, 116, 234, 0, 60, 30, 29, 30, 183, 141, 72, 247, 255, 203, 100, 124, 48, 37, 2, 1, 12, 4, 32, 41, 234, 106, 78, 31, 11, 114, 137, 237, 17, 92, 71, 134, 47, 62, 78, 189, 233, 201, 214, 53, 4, 47, 189, 201, 133, 6, 121, 34, 131, 64, 142, 48, 37, 2, 1, 13, 4, 32, 91, 222, 210, 193, 62, 222, 104, 82, 36, 41, 138, 253, 70, 15, 148, 208, 156, 45, 105, 171, 241, 195, 185, 43, 217, 162, 146, 201, 222, 89, 238, 38, 48, 37, 2, 1, 14, 4, 32, 76, 123, 216, 13, 51, 227, 72, 245, 59, 193, 238, 166, 103, 49, 23, 164, 171, 188, 194, 197, 156, 187, 249, 28, 198, 95, 69, 15, 182, 56, 54, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n        ];\n        let result = [\n            32, 85, 108, 174, 127, 112, 178, 182, 8, 43, 134, 123, 192, 211, 131, 66, 184, 240, 212, 181, 240, 180, 106, 195, 24, 117, 54, 129, 19, 10, 250, 53\n        ];\n        let message_size = 297;\n        assert_eq(sha256_var(input, message_size), result);\n    }\n\n    #[test]\n    fn msg_big_no_padding() {\n        let input = [\n            48, 130, 1, 37, 2, 1, 0, 48, 11, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 48, 130, 1, 17, 48, 37, 2, 1, 1, 4, 32, 176, 223, 31, 133, 108, 84, 158, 102, 70, 11, 165, 175, 196, 12, 201, 130, 25, 131, 46, 125, 156, 194, 28, 23, 55, 133, 157, 164, 135, 136, 220, 78, 48, 37, 2, 1, 2, 4, 32, 190, 82, 180, 235, 222, 33, 79, 50, 152, 136, 142, 35, 116, 224, 6, 242, 156, 141, 128, 248, 10, 61, 98, 86, 248, 45, 207, 210, 90, 232, 175, 38, 48, 37, 2, 1, 3, 4, 32, 0, 194, 104, 108, 237, 246, 97, 230, 116, 198, 69, 110, 26, 87, 17, 89, 110, 199, 108, 250, 36, 21, 39, 87, 110, 102, 250, 213, 174, 131, 171, 174, 48, 37, 2, 1, 11, 4, 32, 136, 155, 87, 144, 111, 15, 152, 127, 85, 25, 154, 81, 20, 58, 51, 75, 193, 116, 234, 0, 60, 30, 29, 30, 183, 141, 72, 247, 255, 203, 100, 124, 48, 37, 2, 1, 12, 4, 32, 41, 234, 106, 78, 31, 11, 114, 137, 237, 17, 92, 71, 134, 47, 62, 78, 189, 233, 201, 214, 53, 4, 47, 189, 201, 133, 6, 121, 34, 131, 64, 142, 48, 37, 2, 1, 13, 4, 32, 91, 222, 210, 193, 62, 222, 104, 82, 36, 41, 138, 253, 70, 15, 148, 208, 156, 45, 105, 171, 241, 195, 185, 43, 217, 162, 146, 201, 222, 89, 238, 38, 48, 37, 2, 1, 14, 4, 32, 76, 123, 216, 13, 51, 227, 72, 245, 59, 193, 238, 166, 103, 49, 23, 164, 171, 188, 194, 197, 156, 187, 249, 28, 198, 95, 69, 15, 182, 56, 54, 38\n        ];\n        let result = [\n            32, 85, 108, 174, 127, 112, 178, 182, 8, 43, 134, 123, 192, 211, 131, 66, 184, 240, 212, 181, 240, 180, 106, 195, 24, 117, 54, 129, 19, 10, 250, 53\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn same_msg_len_variable_padding() {\n        let input = [\n            29, 81, 165, 84, 243, 114, 101, 37, 242, 146, 127, 99, 69, 145, 39, 72, 213, 39, 253, 179, 218, 37, 217, 201, 172, 93, 198, 50, 249, 70, 15, 30, 162, 112, 187, 40, 140, 9, 236, 53, 32, 44, 38, 163, 113, 254, 192, 197, 44, 89, 71, 130, 169, 242, 17, 211, 214, 72, 19, 178, 186, 168, 147, 127, 99, 101, 252, 227, 8, 147, 150, 85, 97, 158, 17, 107, 218, 244, 82, 113, 247, 91, 208, 214, 60, 244, 87, 137, 173, 201, 130, 18, 66, 56, 198, 149, 207, 189, 175, 120, 123, 224, 177, 167, 251, 159, 143, 110, 68, 183, 189, 70, 126, 32, 35, 164, 44, 30, 44, 12, 65, 18, 62, 239, 242, 2, 248, 104, 2, 178, 64, 28, 126, 36, 137, 24, 14, 116, 91, 98, 90, 159, 218, 102, 45, 11, 110, 223, 245, 184, 52, 99, 59, 245, 136, 175, 3, 72, 164, 146, 145, 116, 22, 66, 24, 49, 193, 121, 3, 60, 37, 41, 97, 3, 190, 66, 195, 225, 63, 46, 3, 118, 4, 208, 15, 1, 40, 254, 235, 151, 123, 70, 180, 170, 44, 172, 90, 4, 254, 53, 239, 116, 246, 67, 56, 129, 61, 22, 169, 213, 65, 27, 216, 116, 162, 239, 214, 207, 126, 177, 20, 100, 25, 48, 143, 84, 215, 70, 197, 53, 65, 70, 86, 172, 61, 62, 9, 212, 167, 169, 133, 41, 126, 213, 196, 33, 192, 238, 0, 63, 246, 215, 58, 128, 110, 101, 92, 3, 170, 214, 130, 149, 52, 81, 125, 118, 233, 3, 118, 193, 104, 207, 120, 115, 77, 253, 191, 122, 0, 107, 164, 207, 113, 81, 169, 36, 201, 228, 74, 134, 131, 218, 178, 35, 30, 216, 101, 2, 103, 174, 87, 95, 50, 50, 215, 157, 5, 210, 188, 54, 211, 78, 45, 199, 96, 121, 241, 241, 176, 226, 194, 134, 130, 89, 217, 210, 186, 32, 140, 39, 91, 103, 212, 26, 87, 32, 72, 144, 228, 230, 117, 99, 188, 50, 15, 69, 79, 179, 50, 12, 106, 86, 218, 101, 73, 142, 243, 29, 250, 122, 228, 233, 29, 255, 22, 121, 114, 125, 103, 41, 250, 241, 179, 126, 158, 198, 116, 209, 65, 94, 98, 228, 175, 169, 96, 3, 9, 233, 133, 214, 55, 161, 164, 103, 80, 85, 24, 186, 64, 167, 92, 131, 53, 101, 202, 47, 25, 104, 118, 155, 14, 12, 12, 25, 116, 45, 221, 249, 28, 246, 212, 200, 157, 167, 169, 56, 197, 181, 4, 245, 146, 1, 140, 234, 191, 212, 228, 125, 87, 81, 86, 119, 30, 63, 129, 143, 32, 96\n        ];\n\n        // Prepare inputs of different lengths\n        let mut input_511 = [0; 511];\n        let mut input_512 = [0; 512]; // Next block\n        let mut input_575 = [0; 575];\n        let mut input_576 = [0; 576]; // Next block\n        for i in 0..input.len() {\n            input_511[i] = input[i];\n            input_512[i] = input[i];\n            input_575[i] = input[i];\n            input_576[i] = input[i];\n        }\n\n        // Compute hashes of all inputs (with same message length)\n        let fixed_length_hash = super::sha256(input);\n        let var_full_length_hash = sha256_var(input, input.len() as u64);\n        let var_length_hash_511 = sha256_var(input_511, input.len() as u64);\n        let var_length_hash_512 = sha256_var(input_512, input.len() as u64);\n        let var_length_hash_575 = sha256_var(input_575, input.len() as u64);\n        let var_length_hash_576 = sha256_var(input_576, input.len() as u64);\n\n        // All of the above should have produced the same hash\n        assert_eq(var_full_length_hash, fixed_length_hash);\n        assert_eq(var_length_hash_511, fixed_length_hash);\n        assert_eq(var_length_hash_512, fixed_length_hash);\n        assert_eq(var_length_hash_575, fixed_length_hash);\n        assert_eq(var_length_hash_576, fixed_length_hash);\n    }\n}\n","path":"std/hash/sha256.nr"},"58":{"source":"use crate::hash::{Hash, Hasher};\nuse crate::cmp::{Ordering, Ord, Eq};\nuse crate::default::Default;\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some { self._value } else { default }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some { self } else { other }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some { self } else { default() }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some { Option::none() } else { self }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T> where T: Eq {\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T> where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T> where T: Ord {\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n","path":"std/option.nr"},"59":{"source":"pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n","path":"std/panic.nr"},"73":{"source":"use dep::aztec::{\n    protocol_types::{\n    address::AztecAddress, traits::{Serialize, Deserialize}, constants::GENERATOR_INDEX__NOTE_NULLIFIER,\n    hash::poseidon2_hash_with_separator\n},\n    macros::notes::note,\n    note::{note_header::NoteHeader, note_interface::NullifiableNote, utils::compute_note_hash_for_nullify},\n    oracle::random::random, keys::getters::get_nsk_app, context::PrivateContext\n};\n\n\n#[note]\n#[derive(Serialize)]\n#[derive(Deserialize)]\nstruct NewAddressNote {\n    address: AztecAddress,\n    // The nullifying public key hash is used with the nsk_app to ensure that the note can be privately spent.\n    npk_m_hash: Field,\n}\n\nimpl NullifiableNote for NewAddressNote {\n\n    fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field {\n        let secret = context.request_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let secret = get_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n}\n\nimpl NewAddressNote {\n    pub fn new(address: AztecAddress, npk_m_hash: Field) -> Self {\n        let header = NoteHeader::empty();\n        NewAddressNote { address, npk_m_hash, header }\n    }\n}\n\nimpl Eq for NewAddressNote {\n    fn eq(self, other: Self) -> bool {\n        (self.address == other.address) & (self.npk_m_hash == other.npk_m_hash)\n    }\n}\n\n//serialize is a macro now?\n// impl Serialize<3> for NewAddressNote {\n//     fn serialize(self) -> [Field; 3] {\n//         [self.address.to_field(), self.shared_secret, self.npk_m_hash.to_field()]\n//     }\n// }\n\n","path":"/Users/niallcheetham/dev/aztec/priv2/accountContract/src/notes/NewAddressNote.nr"},"74":{"source":"use dep::aztec::prelude::{NoteHeader, NullifiableNote, PrivateContext};\nuse dep::aztec::{\n    note::utils::compute_note_hash_for_nullify, keys::getters::get_nsk_app,\n    protocol_types::{constants::GENERATOR_INDEX__NOTE_NULLIFIER, hash::poseidon2_hash_with_separator},\n    macros::notes::note\n};\n\n//Stores a public key conposed of two fields\n//does not have a once yet\n\n#[note]\npub struct PublicKeyNote {\n    x: Field,\n    y: Field,\n    //sote the npk_mhash only to get the secret key to compute the nullifier\n    npk_m_hash: Field,\n}\n\nimpl NullifiableNote for PublicKeyNote {\n    fn compute_nullifier(\n        self,\n        context: &mut PrivateContext,\n        note_hash_for_nullify: Field\n     ) -> Field {\n        let secret = context.request_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n                note_hash_for_nullify,\n                secret\n            ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let secret = get_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n                note_hash_for_nullify,\n                secret\n            ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n}\n\nimpl PublicKeyNote {\n    pub fn new(x: Field, y: Field, npk_m_hash: Field) -> Self {\n        PublicKeyNote {\n            x,\n            y,\n            npk_m_hash,\n            header: NoteHeader::empty()\n        }\n    }\n}","path":"/Users/niallcheetham/dev/aztec/priv2/accountContract/src/notes/public_key_note.nr"},"75":{"source":"//the idea here is that the group contract is just going to be a schnoor account\n//will play around with this to see if others can interact with it and get the keys\n//if so, they can use the state of the contract to keep shared secrets\n\n//they will have this account contract in their PXEs, so they can get the state of it and interact with it\n\n//joe mentionned something about setting it to a dud so that it cannot do anything,\n//need to figure out what he meant and how to do that.\n\nmod notes;\n// mod test;\n\nuse dep::aztec::macros::aztec;\n\n#[aztec]\ncontract AccountGroup {\n\n    use dep::aztec::prelude::{Map, AztecAddress, PrivateContext, PrivateImmutable, PublicMutable};\n    use dep::aztec::encrypted_logs::encrypted_note_emission::encode_and_encrypt_note;\n    use dep::authwit::{\n        entrypoint::{app::AppPayload, fee::FeePayload}, account::AccountActions,\n        auth_witness::get_auth_witness, auth::{compute_authwit_nullifier, compute_authwit_message_hash}\n    };\n    use dep::aztec::{hash::compute_siloed_nullifier, keys::getters::get_public_keys};\n    use dep::aztec::oracle::get_nullifier_membership_witness::get_low_nullifier_membership_witness;\n    use dep::aztec::macros::{storage::storage, functions::{private, initializer, view, noinitcheck}};\n\n    use crate::notes::{public_key_note::PublicKeyNote, NewAddressNote::NewAddressNote};\n\n\n    #[storage]\n    struct Storage<Context> {\n        signing_public_key: PrivateImmutable<PublicKeyNote, Context>,\n        admin: PrivateImmutable<NewAddressNote, Context>,\n        // group_members: Map<AztecAddress, PublicMutable<bool, Context>, Context>\n    }\n\n    //for SchnoorAccount contract\n    //if we send the notes to the PXEs of the users in the group, then they can use the state of the contract to keep shared secrets\n    //that is the idea. \n    #[private]\n    #[initializer]\n    fn constructor(signing_pub_key_x: Field, signing_pub_key_y: Field, admin: AztecAddress) {\n        let this = context.this_address();\n        let this_keys = get_public_keys(this);\n        //not emitting outgoing for msg_sender here to not have to register keys for the contract through which we deploy this (typically MultiCallEntryPoint).\n\n        let mut pub_key_note = PublicKeyNote::new(signing_pub_key_x, signing_pub_key_y, this_keys.npk_m.hash());\n        storage.signing_public_key.initialize(&mut pub_key_note).emit(encode_and_encrypt_note(&mut context, this_keys.ovpk_m, this_keys.ivpk_m, this));\n\n        let admin_keys = get_public_keys(admin);\n        let mut admin_address_note = NewAddressNote::new(admin, admin_keys.npk_m.hash());\n        storage.admin.initialize(&mut admin_address_note).emit(encode_and_encrypt_note(&mut context, admin_keys.ovpk_m, admin_keys.ivpk_m, admin));\n        // storage.group_members.at(admin).write(true);\n    }\n\n    // Note: If you globally change the entrypoint signature don't forget to update account_entrypoint.ts\n    #[private]\n    fn entrypoint(app_payload: AppPayload, fee_payload: FeePayload, cancellable: bool) {\n        let actions = AccountActions::init(&mut context, is_valid_impl);\n        actions.entrypoint(app_payload, fee_payload, cancellable);\n    }\n\n    #[private]\n    fn get_admin() -> pub AztecAddress {\n        let admin_note = storage.admin.get_note();\n        admin_note.address\n    }\n\n\n    #[private]\n    #[view]\n    fn verify_private_authwit(inner_hash: Field) -> Field {\n        let actions = AccountActions::init(&mut context, is_valid_impl);\n        actions.verify_private_authwit(inner_hash)\n    }\n\n    #[contract_library_method]\n    fn is_valid_impl(context: &mut PrivateContext, outer_hash: Field) -> bool {\n        let storage = Storage::init(context);\n        let public_key = storage.signing_public_key.get_note();\n        // Load auth witness and format as an u8 array\n        let witness: [Field; 64] = unsafe {\n            get_auth_witness(outer_hash)\n        };\n        let mut signature: [u8; 64] = [0; 64];\n        for i in 0..64 {\n            signature[i] = witness[i] as u8;\n        }\n\n        // Verify signature using hardcoded public key\n        std::schnorr::verify_signature(\n            public_key.x,\n            public_key.y,\n            signature,\n            outer_hash.to_be_bytes::<32>()\n        )\n    }\n\n    /** \n    * @notice Helper function to check validity of private authwitnesses\n    * @param consumer The address of the consumer of the message\n    * @param message_hash The message hash of the message to check the validity\n    * @return True if the message_hash can be consumed, false otherwise\n    */\n    unconstrained fn lookup_validity(consumer: AztecAddress, inner_hash: Field) -> bool {\n        let public_key = storage.signing_public_key.view_note();\n\n        let message_hash = compute_authwit_message_hash(consumer, context.chain_id(), context.version(), inner_hash);\n\n        let witness: [Field; 64] = get_auth_witness(message_hash);\n\n        let mut signature: [u8; 64] = [0; 64];\n\n        for i in 0..64 {\n            signature[i] = witness[i] as u8;\n        }\n\n        let valid_in_private = std::schnorr::verify_signature(\n            public_key.x,\n            public_key.y,\n            signature,\n            message_hash.to_be_bytes::<32>()\n        );\n\n        //compute the nullifier and check if is is spent\n        //This will BLINDLY TRUST the oracle, but the oracle is us, and \n        //it is not as part of execution of the contract, so we are good. \n        let nullifier = compute_authwit_nullifier(context.this_address(), inner_hash);\n        let siloed_nullifier = compute_siloed_nullifier(consumer, nullifier);\n        let lower_wit = get_low_nullifier_membership_witness(context.block_number(), siloed_nullifier);\n        let is_spent = lower_wit.leaf_preimage.nullifier == siloed_nullifier;\n\n        !is_spent & valid_in_private\n    }\n}\n","path":"/Users/niallcheetham/dev/aztec/priv2/accountContract/src/main.nr"},"77":{"source":"use dep::aztec::{\n    protocol_types::{address::AztecAddress, constants::GENERATOR_INDEX__NOTE_NULLIFIER, hash::poseidon2_hash_with_separator},\n    note::{note_header::NoteHeader, note_interface::NullifiableNote, utils::compute_note_hash_for_nullify},\n    oracle::random::random, keys::getters::get_nsk_app, context::PrivateContext, macros::notes::note\n};\n\n// docs:start:address_note_def\n// docs:start:address_note_struct\n// Stores an address\n#[note]\npub struct AddressNote {\n    address: AztecAddress,\n    // The nullifying public key hash is used with the nsk_app to ensure that the note can be privately spent.\n    npk_m_hash: Field,\n    randomness: Field,\n}\n// docs:end:address_note_struct\n\nimpl NullifiableNote for AddressNote {\n\n    fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field {\n        let secret = context.request_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let secret = get_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n}\n\nimpl AddressNote {\n    pub fn new(address: AztecAddress, npk_m_hash: Field) -> Self {\n        // We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing, so a\n        // malicious sender could use non-random values to make the note less private. But they already know the full\n        // note pre-image anyway, and so the recipient already trusts them to not disclose this information. We can\n        // therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe {\n            random()\n        };\n        AddressNote { address, npk_m_hash, randomness, header: NoteHeader::empty() }\n    }\n    // docs:end:address_note_def\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/address-note/src/address_note.nr"},"83":{"source":"use crate::context::{PrivateContext, PublicContext};\nuse crate::note::{\n    note_header::NoteHeader, note_interface::{NoteInterface, NullifiableNote},\n    utils::{compute_note_hash_for_read_request, compute_note_hash_for_nullify_internal},\n    note_emission::NoteEmission\n};\nuse crate::oracle::notes::{notify_created_note, notify_nullified_note};\n\npub fn create_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: &mut Note\n) -> NoteEmission<Note> where Note: NoteInterface<N> + NullifiableNote {\n    let contract_address = (*context).this_address();\n    let note_hash_counter = context.side_effect_counter;\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, note_hash_counter };\n    note.set_header(header);\n    let note_hash = note.compute_note_hash();\n\n    let serialized_note = Note::serialize_content(*note);\n    notify_created_note(\n        storage_slot,\n        Note::get_note_type_id(),\n        serialized_note,\n        note_hash,\n        note_hash_counter\n    );\n\n    context.push_note_hash(note_hash);\n\n    NoteEmission::new(*note)\n}\n\npub fn create_note_hash_from_public<Note, let N: u32>(\n    context: &mut PublicContext,\n    storage_slot: Field,\n    note: &mut Note\n) where Note: NoteInterface<N> + NullifiableNote {\n    let contract_address = (*context).this_address();\n    // Public note hashes are transient, but have no side effect counters, so we just need note_hash_counter != 0\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, note_hash_counter: 1 };\n    note.set_header(header);\n    let note_hash = note.compute_note_hash();\n\n    context.push_note_hash(note_hash);\n}\n\n// Note: This function is currently totally unused.\npub fn destroy_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    note: Note\n) where Note: NoteInterface<N> + NullifiableNote {\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n\n    destroy_note_unsafe(context, note, note_hash_for_read_request)\n}\n\npub fn destroy_note_unsafe<Note, let N: u32>(\n    context: &mut PrivateContext,\n    note: Note,\n    note_hash_for_read_request: Field\n) where Note: NoteInterface<N> + NullifiableNote {\n    let note_hash_for_nullify = compute_note_hash_for_nullify_internal(note, note_hash_for_read_request);\n    let nullifier = note.compute_nullifier(context, note_hash_for_nullify);\n\n    let note_hash_counter = note.get_header().note_hash_counter;\n    let notification_note_hash = if (note_hash_counter == 0) {\n        // Counter is zero, so we're nullifying a settled note and we don't populate the note_hash with real value.\n        0\n    } else {\n        // A non-zero note hash counter implies that we're nullifying a pending note (i.e. one that has not yet been\n        // persisted in the trees and is instead in the pending new note hashes array). In such a case we populate its\n        // hash with real value to inform the kernel which note we're nullifyng so that it can either squash both\n        // the note and the nullifier if it's an inner note hash, or check that the it matches a pending note if it's\n        // a siloed note hash.\n        note_hash_for_nullify\n    };\n\n    let nullifier_counter = context.side_effect_counter;\n    notify_nullified_note(nullifier, notification_note_hash, nullifier_counter);\n\n    context.push_nullifier_for_note_hash(nullifier, notification_note_hash)\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/note/lifecycle.nr"},"84":{"source":"use crate::{\n    context::PrivateContext,\n    note::{note_header::NoteHeader, note_interface::{NullifiableNote, NoteInterface}}\n};\n\nuse dep::protocol_types::{\n    hash::{\n    compute_unique_note_hash, compute_siloed_note_hash as compute_siloed_note_hash,\n    compute_siloed_nullifier as compute_siloed_nullifier_from_preimage\n},\n    utils::arr_copy_slice\n};\n\npub fn compute_siloed_nullifier<Note, let N: u32>(\n    note_with_header: Note,\n    context: &mut PrivateContext\n) -> Field where Note: NoteInterface<N> + NullifiableNote {\n    let header = note_with_header.get_header();\n    let note_hash_for_nullify = compute_note_hash_for_nullify(note_with_header);\n    let inner_nullifier = note_with_header.compute_nullifier(context, note_hash_for_nullify);\n\n    compute_siloed_nullifier_from_preimage(header.contract_address, inner_nullifier)\n}\n\n// TODO(#7775): make this not impossible to understand\npub fn compute_note_hash_for_read_request<Note, let N: u32>(note: Note) -> Field where Note: NoteInterface<N> + NullifiableNote {\n    let note_hash = note.compute_note_hash();\n    let nonce = note.get_header().nonce;\n    let counter = note.get_header().note_hash_counter;\n\n    if counter != 0 {\n        note_hash\n    } else {\n        compute_unique_note_hash(nonce, note_hash)\n    }\n}\n\n// TODO(#7775): make this not impossible to understand\npub fn compute_note_hash_for_nullify_internal<Note, let N: u32>(\n    note: Note,\n    note_hash_for_read_request: Field\n) -> Field where Note: NoteInterface<N> + NullifiableNote {\n    let header = note.get_header();\n\n    if header.note_hash_counter != 0 {\n        if header.nonce == 0 {\n            // Case 1: Transient note\n            note_hash_for_read_request\n        } else {\n            // Case 2: Non-revertible note, nullified by a revertible nullifier\n            let unique_note_hash = compute_unique_note_hash(header.nonce, note_hash_for_read_request);\n            compute_siloed_note_hash(header.contract_address, unique_note_hash)\n        }\n    } else {\n        // Case 3: Note from a previous transaction\n        // note_hash_for_read_request is already the unique_note_hash in this case\n        compute_siloed_note_hash(header.contract_address, note_hash_for_read_request)\n    }\n}\n\n// TODO(#7775): nuke this commented out code - kept it around as it contains comments which might be helpful when tackling #7775\n// pub fn compute_note_hash_for_nullify<Note, let N: u32, let M: u32>(note: Note) -> Field where Note: NoteInterface<N> {\n//     let header = note.get_header();\n//     // There are 3 cases for reading a note intended for consumption:\n//     // 1. The note was inserted in this transaction, is revertible, or is not nullified by a revertible nullifier in\n//     //    the same transaction: (note_hash_counter != 0) & (nonce == 0)\n//     // 2. The note was inserted in this transaction, is non-revertible, and is nullified by a revertible nullifier in\n//     //    the same transaction: (note_hash_counter != 0) & (nonce != 0)\n//     // 3. The note was inserted in a previous transaction: (note_hash_counter == 0) & (nonce != 0)\n\n//     let note_hash = note.compute_note_hiding_point().x;\n\n//     if header.nonce == 0 {\n//         // Case 1.\n//         // If a note is transient, we just read the note_hash (kernel will hash it with nonce and silo by contract address).\n//         note_hash\n//     } else {\n//         // Case 2: If a note is non-revertible, and is nullified by a revertible nullifier, we cannot squash them in the\n//         // private reset circuit. Because if the tx reverts, we will have to keep the note hash and throw away the\n//         // nullifier.\n//         // And if the tx does not revert, both will be emitted. In which case, the nullifier must be created in the app\n//         // from the siloed note hash.\n//         // The kernel circuit will check that a nullifier with non-zero note_nonce is linked to a note hash, whose\n//         // siloed note hash matches the note hash specified in the nullifier.\n\n//         // Case 3: If a note is not from the current transaction, that means we are reading a settled note (from\n//         // tree) created in a previous TX. So we need the siloed_note_hash which has already been hashed with\n//         // nonce and then contract address. This hash will match the existing leaf in the note hash\n//         // tree, so the kernel can just perform a membership check directly on this hash/leaf.\n//         let unique_note_hash = compute_unique_note_hash(header.nonce, note_hash);\n//         compute_siloed_note_hash(header.contract_address, unique_note_hash)\n//         // IMPORTANT NOTE ON REDUNDANT SILOING BY CONTRACT ADDRESS: The note hash computed above is\n//         // \"siloed\" by contract address. When a note hash is computed solely for the purpose of\n//         // nullification, it is not strictly necessary to silo the note hash before computing\n//         // its nullifier. In other words, it is NOT NECESSARY for protocol security that a nullifier\n//         // be computed from a siloed note hash. After all, persistable note hashes and nullifiers are\n//         // siloed by the kernel circuit. That being said, the siloed note hash computed above CAN be\n//         // used for nullifier computation, and this achieves the (arguably unnecessary) property that\n//         // nullifiers are computed from a note hash's fully-computed note hash tree leaf.\n//     }\n// }\n\npub fn compute_note_hash_for_nullify<Note, let N: u32>(note: Note) -> Field where Note: NoteInterface<N> + NullifiableNote {\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n    compute_note_hash_for_nullify_internal(note, note_hash_for_read_request)\n}\n\nunconstrained pub fn compute_note_hash_and_optionally_a_nullifier<T, let N: u32, let S: u32>(\n    deserialize_content: fn([Field; N]) -> T,\n    note_header: NoteHeader,\n    compute_nullifier: bool,\n    serialized_note: [Field; S]\n) -> [Field; 4] where T: NoteInterface<N> + NullifiableNote {\n    let mut note = deserialize_content(arr_copy_slice(serialized_note, [0; N], 0));\n    note.set_header(note_header);\n\n    let note_hash = note.compute_note_hash();\n    let unique_note_hash = compute_unique_note_hash(note_header.nonce, note_hash);\n    let siloed_note_hash = compute_siloed_note_hash(note_header.contract_address, unique_note_hash);\n\n    let inner_nullifier = if compute_nullifier {\n        note.compute_nullifier_without_context()\n    } else {\n        0\n    };\n    // docs:start:compute_note_hash_and_optionally_a_nullifier_returns\n    [note_hash, unique_note_hash, siloed_note_hash, inner_nullifier]\n    // docs:end:compute_note_hash_and_optionally_a_nullifier_returns\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/note/utils.nr"},"86":{"source":"use dep::protocol_types::{constants::{MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, GET_NOTES_ORACLE_RETURN_LENGTH}};\nuse crate::context::PrivateContext;\nuse crate::note::{\n    constants::{GET_NOTE_ORACLE_RETURN_LENGTH, VIEW_NOTE_ORACLE_RETURN_LENGTH},\n    note_getter_options::{NoteGetterOptions, Select, Sort, SortOrder, NoteStatus, PropertySelector},\n    note_interface::{NoteInterface, NullifiableNote}, note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_request\n};\nuse crate::oracle;\nuse crate::utils::comparison::compare;\n\npub use crate::note::constants::MAX_NOTES_PER_PAGE;\n\nmod test;\n\nfn extract_property_value_from_selector<let N: u32>(\n    serialized_note: [Field; N],\n    selector: PropertySelector\n) -> Field {\n    // Selectors use PropertySelectors in order to locate note properties inside the serialized note.\n    // This allows easier packing and custom (de)serialization schemas. A note property is located\n    // inside the serialized note using the index inside the array, a byte offset and a length.\n    let value: [u8; 32] = serialized_note[selector.index].to_be_bytes();\n    let offset = selector.offset;\n    let length = selector.length;\n    let mut value_field = 0 as Field;\n    let mut acc: Field = 1;\n    for i in 0..32 {\n        if i < length {\n            value_field += value[31 + offset - i] as Field * acc;\n            acc = acc * 256;\n        }\n    }\n    value_field\n}\n\nfn check_note_header<Note, let N: u32>(\n    context: PrivateContext,\n    storage_slot: Field,\n    note: Note\n) where Note: NoteInterface<N> {\n    let header = note.get_header();\n    let contract_address = context.this_address();\n    assert(header.contract_address.eq(contract_address), \"Mismatch note header contract address.\");\n    assert(header.storage_slot == storage_slot, \"Mismatch note header storage slot.\");\n}\n\nfn check_note_fields<let N: u32>(\n    serialized_note: [Field; N],\n    selects: BoundedVec<Option<Select>, N>\n) {\n    for i in 0..selects.len {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n        let value_field = extract_property_value_from_selector(serialized_note, select.property_selector);\n\n        assert(\n            compare(value_field, select.comparator, select.value.to_field()), \"Mismatch return note field.\"\n        );\n    }\n}\n\nfn check_notes_order<let N: u32>(\n    fields_0: [Field; N],\n    fields_1: [Field; N],\n    sorts: BoundedVec<Option<Sort>, N>\n) {\n    for i in 0..sorts.len {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let field_0 = extract_property_value_from_selector(fields_0, sort.property_selector);\n        let field_1 = extract_property_value_from_selector(fields_1, sort.property_selector);\n        let eq = field_0 == field_1;\n        let lt = field_0.lt(field_1);\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field\n) -> (Note, Field) where Note: NoteInterface<N> + NullifiableNote {\n    let note = unsafe {\n        get_note_internal(storage_slot)\n    };\n\n    // Constraining that we got a valid note from the oracle is fairly straightforward: all we need to do is check that\n    // the metadata is correct, and that the note exists.\n    check_note_header(*context, storage_slot, note);\n\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n    context.push_note_hash_read_request(note_hash_for_read_request);\n\n    (note, note_hash_for_read_request)\n}\n\npub fn get_notes<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>\n) -> (BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>) where Note: NoteInterface<N> + NullifiableNote + Eq {\n    let opt_notes = unsafe {\n        get_notes_internal(storage_slot, options)\n    };\n\n    // We apply the constraints in a separate function instead of inlining them here to make it easier to test that\n    // these checks correctly reject bad notes.\n    constrain_get_notes_internal(context, storage_slot, opt_notes, options)\n}\n\nunconstrained fn apply_preprocessor<Note, PREPROCESSOR_ARGS>(\n    notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor: fn([Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL], PREPROCESSOR_ARGS) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor_args: PREPROCESSOR_ARGS\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] {\n    preprocessor(notes, preprocessor_args)\n}\n\nfn constrain_get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    opt_notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>\n) -> (BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>) where Note: NoteInterface<N> + NullifiableNote + Eq {\n    // The filter is applied first to avoid pushing note read requests for notes we're not interested in. Note that\n    // while the filter function can technically mutate the contents of the notes (as opposed to simply removing some),\n    // the private kernel will later validate that these note actually exist, so transformations would cause for that\n    // check to fail.\n    let filter_fn = options.filter;\n    let filter_args = options.filter_args;\n    let filtered_notes = filter_fn(opt_notes, filter_args);\n\n    let notes = crate::utils::collapse_array(filtered_notes);\n    let mut note_hashes: BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> = BoundedVec::new();\n\n    // We have now collapsed the sparse array of Options into a BoundedVec. This is a more ergonomic type and also\n    // results in reduced gate counts when setting a limit value, since we guarantee that the limit is an upper bound\n    // for the runtime length, and can therefore have fewer loop iterations.\n    assert(notes.len() <= options.limit, \"Got more notes than limit.\");\n\n    let mut prev_fields = [0; N];\n    for i in 0..options.limit {\n        if i < notes.len() {\n            let note = notes.get_unchecked(i);\n            let fields = note.serialize_content();\n            check_note_header(*context, storage_slot, note);\n            check_note_fields(fields, options.selects);\n            if i != 0 {\n                check_notes_order(prev_fields, fields, options.sorts);\n            }\n            prev_fields = fields;\n\n            let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1410): test to ensure\n            // failure if malicious oracle injects 0 nonce here for a \"pre-existing\" note.\n            context.push_note_hash_read_request(note_hash_for_read_request);\n            note_hashes.push(note_hash_for_read_request);\n        };\n    }\n\n    (notes, note_hashes)\n}\n\nunconstrained fn get_note_internal<Note, let N: u32>(storage_slot: Field) -> Note where Note: NoteInterface<N> {\n    let placeholder_note = [Option::none()];\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n    oracle::notes::get_notes(\n        storage_slot,\n        0,\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        NoteStatus.ACTIVE,\n        placeholder_note,\n        placeholder_fields,\n        placeholder_note_length\n    )[0].expect(f\"Failed to get a note\") // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] where Note: NoteInterface<N> {\n    // This function simply performs some transformations from NoteGetterOptions into the types required by the oracle.\n\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL];\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length\n    );\n\n    apply_preprocessor(opt_notes, options.preprocessor, options.preprocessor_args)\n}\n\nunconstrained pub fn view_notes<Note, let N: u32>(\n    storage_slot: Field,\n    options: NoteViewerOptions<Note, N>\n) -> BoundedVec<Note, MAX_NOTES_PER_PAGE> where Note: NoteInterface<N> {\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTES_PER_PAGE];\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n\n    let notes_array = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length\n    );\n\n    let mut notes = BoundedVec::new();\n    for i in 0..notes_array.len() {\n        if notes_array[i].is_some() {\n            notes.push(notes_array[i].unwrap_unchecked());\n        }\n    }\n\n    notes\n}\n\nunconstrained fn flatten_options<let N: u32>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>\n) -> (u8, [u8; N], [u8; N], [u8; N], [Field; N], [u8; N], [u8; N], [u8; N], [u8; N], [u8; N]) {\n    let mut num_selects = 0;\n    let mut select_by_indexes = [0; N];\n    let mut select_by_offsets = [0; N];\n    let mut select_by_lengths = [0; N];\n    let mut select_values = [0; N];\n    let mut select_comparators = [0; N];\n\n    for i in 0..selects.len {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by_indexes[num_selects] = select.unwrap_unchecked().property_selector.index;\n            select_by_offsets[num_selects] = select.unwrap_unchecked().property_selector.offset;\n            select_by_lengths[num_selects] = select.unwrap_unchecked().property_selector.length;\n            select_values[num_selects] = select.unwrap_unchecked().value;\n            select_comparators[num_selects] = select.unwrap_unchecked().comparator;\n            num_selects += 1;\n        };\n    }\n\n    let mut sort_by_indexes = [0; N];\n    let mut sort_by_offsets = [0; N];\n    let mut sort_by_lengths = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by_indexes[i] = sort.unwrap_unchecked().property_selector.index;\n            sort_by_offsets[i] = sort.unwrap_unchecked().property_selector.offset;\n            sort_by_lengths[i] = sort.unwrap_unchecked().property_selector.length;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    }\n\n    (\n        num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order\n    )\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/note/note_getter/mod.nr"},"89":{"source":"/**\n * A note emission struct containing the information required for emitting a note.\n * The exact `emit` logic is passed in by the application code\n */\npub struct NoteEmission<Note> {\n    note: Note\n}\n\nimpl<Note> NoteEmission<Note> {\n    pub fn new(note: Note) -> Self {\n        Self { note }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](Self) -> ()) {\n        _emit(self);\n    }\n\n    pub fn discard(_self: Self) {}\n}\n\n/**\n * A struct wrapping note emission in `Option<T>`.\n * This is the struct provided to application codes, which can be used to emit\n * only when a note was actually inserted.\n * It is fairly common to have cases where a function conditionally inserts,\n * and this allows us to keep the same API for emission in both cases (e.g. inserting\n * a change note in a token's transfer function only when there is \"change\" left).\n */\npub struct OuterNoteEmission<Note> {\n    emission: Option<NoteEmission<Note>>,\n}\n\nimpl<Note> OuterNoteEmission<Note> {\n    pub fn new(emission: Option<NoteEmission<Note>>) -> Self {\n        Self { emission }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](NoteEmission<Note>) -> ()) {\n        if self.emission.is_some() {\n            _emit(self.emission.unwrap());\n        }\n    }\n\n    pub fn discard(_self: Self) {}\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/note/note_emission.nr"},"98":{"source":"use dep::protocol_types::{address::AztecAddress, traits::Deserialize};\nuse crate::oracle::{execution::{get_chain_id, get_version, get_contract_address, get_block_number}, storage::storage_read};\n\npub struct UnconstrainedContext {\n    block_number: u32,\n    contract_address: AztecAddress,\n    version: Field,\n    chain_id: Field,\n}\n\nimpl UnconstrainedContext {\n    unconstrained fn new() -> Self {\n        // We could call these oracles on the getters instead of at creation, which makes sense given that they might\n        // not even be accessed. However any performance gains are minimal, and we'd rather fail early if a user\n        // incorrectly attempts to create an UnconstrainedContext in an environment in which these oracles are not\n        // available.\n        let block_number = get_block_number();\n        let contract_address = get_contract_address();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    unconstrained fn at(contract_address: AztecAddress) -> Self {\n        let block_number = get_block_number();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    unconstrained fn at_historical(contract_address: AztecAddress, block_number: u32) -> Self {\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    fn block_number(self) -> u32 {\n        self.block_number\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.contract_address\n    }\n\n    fn version(self) -> Field {\n        self.version\n    }\n\n    fn chain_id(self) -> Field {\n        self.chain_id\n    }\n\n    unconstrained fn raw_storage_read<let N: u32>(self: Self, storage_slot: Field) -> [Field; N] {\n        storage_read(self.this_address(), storage_slot, self.block_number())\n    }\n\n    unconstrained fn storage_read<T, let N: u32>(\n        self,\n        storage_slot: Field\n    ) -> T where T: Deserialize<N> {\n        T::deserialize(self.raw_storage_read(storage_slot))\n    }\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/context/unconstrained_context.nr"},"100":{"source":"use crate::{\n    context::{inputs::PrivateContextInputs, packed_returns::PackedReturns},\n    messaging::process_l1_to_l2_message, hash::{hash_args_array, ArgsHasher},\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX, NUM_KEY_TYPES, sk_generators},\n    oracle::{\n    key_validation_request::get_key_validation_request, arguments, returns::pack_returns,\n    call_private_function::call_private_function_internal, header::get_header_at,\n    logs::{emit_encrypted_note_log, emit_encrypted_event_log},\n    enqueue_public_function_call::{\n    enqueue_public_function_call_internal, notify_set_min_revertible_side_effect_counter,\n    set_public_teardown_function_call_internal\n}\n}\n};\nuse dep::protocol_types::{\n    abis::{\n    call_context::CallContext, function_selector::FunctionSelector, max_block_number::MaxBlockNumber,\n    validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    private_call_request::PrivateCallRequest, private_circuit_public_inputs::PrivateCircuitPublicInputs,\n    public_call_request::PublicCallRequest, read_request::ReadRequest, note_hash::NoteHash,\n    nullifier::Nullifier, log_hash::{LogHash, NoteLogHash, EncryptedLogHash}\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    MAX_NOTE_HASHES_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL,\n    MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_ENCRYPTED_LOGS_PER_CALL, MAX_UNENCRYPTED_LOGS_PER_CALL,\n    MAX_NOTE_ENCRYPTED_LOGS_PER_CALL, PUBLIC_DISPATCH_SELECTOR\n},\n    header::Header, messaging::l2_to_l1_message::L2ToL1Message, traits::Empty\n};\n\n// When finished, one can call .finish() to convert back to the abi\npub struct PrivateContext {\n    // docs:start:private-context\n    inputs: PrivateContextInputs,\n    side_effect_counter: u32,\n\n    min_revertible_side_effect_counter: u32,\n    is_fee_payer: bool,\n\n    args_hash: Field,\n    return_hash: Field,\n\n    max_block_number: MaxBlockNumber,\n\n    note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    private_call_requests : BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_requests : BoundedVec<PublicCallRequest, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    public_teardown_call_request: PublicCallRequest,\n    l2_to_l1_msgs : BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    note_encrypted_logs_hashes: BoundedVec<NoteLogHash, MAX_NOTE_ENCRYPTED_LOGS_PER_CALL>,\n    encrypted_logs_hashes: BoundedVec<EncryptedLogHash, MAX_ENCRYPTED_LOGS_PER_CALL>,\n    unencrypted_logs_hashes: BoundedVec<LogHash, MAX_UNENCRYPTED_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES]\n        }\n    }\n\n    fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n    }\n\n    fn push_nullifier(&mut self, nullifier: Field) {\n        self.nullifiers.push(Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() });\n    }\n\n    fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        self.nullifiers.push(Nullifier { value: nullifier, note_hash: nullified_note_hash, counter: self.next_counter() });\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_header_at(self, block_number: u32) -> Header {\n        get_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        pack_returns(returns_hasher.fields);\n        self.return_hash = returns_hasher.hash();\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage,\n            nullifier_read_requests: self.nullifier_read_requests.storage,\n            key_validation_requests_and_generators: self.key_validation_requests_and_generators.storage,\n            note_hashes: self.note_hashes.storage,\n            nullifiers: self.nullifiers.storage,\n            private_call_requests: self.private_call_requests.storage,\n            public_call_requests: self.public_call_requests.storage,\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage,\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            note_encrypted_logs_hashes: self.note_encrypted_logs_hashes.storage,\n            encrypted_logs_hashes: self.encrypted_logs_hashes.storage,\n            unencrypted_logs_hashes: self.unencrypted_logs_hashes.storage,\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\"Setting {0} as fee payer\", [self.this_address().to_field()]);\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number = MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request = self.last_key_validation_requests[key_index].unwrap_or(KeyValidationRequest::empty());\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one\n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale. We fetch new values from oracle and instruct\n            // protocol circuits to validate them by storing the validation request in context.\n            let request = get_key_validation_request(pk_m_hash, key_index);\n            let request_and_generator = KeyValidationRequestAndGenerator { request, sk_app_generator: sk_generators[key_index] };\n            // We constrain that the pk_m_hash matches the one in the request (otherwise we could get an arbitrary\n            // valid key request and not the one corresponding to pk_m_hash).\n            assert(request.pk_m.hash() == pk_m_hash);\n            self.key_validation_requests_and_generators.push(request_and_generator);\n            self.last_key_validation_requests[key_index] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(&mut self, content: Field, secret: Field, sender: EthAddress) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    // NB: A randomness value of 0 signals that the kernels should not mask the contract address\n    // used in siloing later on e.g. 'handshaking' contract w/ known address.\n    pub fn emit_raw_event_log_with_masked_address<let M: u32>(\n        &mut self,\n        randomness: Field,\n        log: [u8; M],\n        log_hash: Field\n    ) {\n        let counter = self.next_counter();\n        let contract_address = self.this_address();\n        let len = log.len() as Field + 4;\n        let side_effect = EncryptedLogHash { value: log_hash, counter, length: len, randomness };\n        self.encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_event_log(contract_address, randomness, log, counter);\n    }\n\n    pub fn emit_raw_note_log<let M: u32>(&mut self, note_hash_counter: u32, log: [u8; M], log_hash: Field) {\n        let counter = self.next_counter();\n        let len = log.len() as Field + 4;\n        let side_effect = NoteLogHash { value: log_hash, counter, length: len, note_hash_counter };\n        self.note_encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_note_log(note_hash_counter, log, counter);\n    }\n\n    pub fn call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> PackedReturns {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n        let (end_side_effect_counter, returns_hash) = call_private_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            start_side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.side_effect_counter = end_side_effect_counter + 1;\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n            contract_address,\n            call_context,\n            args_hash,\n            returns_hash,\n            start_side_effect_counter,\n            end_side_effect_counter\n        }\n        );\n\n        PackedReturns::new(returns_hash)\n    }\n\n    pub fn call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\n        // WARNING: This is insecure and should be temporary!\n        // The oracle repacks the arguments and returns a new args_hash.\n        // new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\n        // We don't validate or compute it in the circuit because a) it's harder to do with slices, and\n        // b) this is only temporary.\n        let args_hash = enqueue_public_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        // Public calls are rerouted through the dispatch function.\n        let function_selector = comptime {\n            FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR)\n        };\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let call_request = PublicCallRequest { contract_address, call_context, args_hash, counter };\n        self.public_call_requests.push(call_request);\n    }\n\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.set_public_teardown_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn set_public_teardown_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\n        // WARNING: This is insecure and should be temporary!\n        // The oracle repacks the arguments and returns a new args_hash.\n        // new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\n        // We don't validate or compute it in the circuit because a) it's harder to do with slices, and\n        // b) this is only temporary.\n        let args_hash = set_public_teardown_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let function_selector = comptime {\n            FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR)\n        };\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.public_teardown_call_request = PublicCallRequest {\n            contract_address,\n            call_context,\n            args_hash,\n            counter,\n        };\n    }\n\n    fn generate_call_context(\n        self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> CallContext {\n        let msg_sender = if is_delegate_call {\n            self.msg_sender()\n        } else {\n            self.this_address()\n        };\n        let storage_contract_address = if is_delegate_call {\n            self.this_address()\n        } else {\n            contract_address\n        };\n        CallContext { msg_sender, storage_contract_address, function_selector, is_static_call, is_delegate_call }\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: Header::empty(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES]\n        }\n    }\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/context/private_context.nr"},"104":{"source":"use dep::protocol_types::{address::AztecAddress, scalar::Scalar, point::Point};\n\nuse crate::keys::{point_to_symmetric_key::point_to_symmetric_key, public_keys::ToPoint};\n\nuse std::aes128::aes128_encrypt;\n\npub struct EncryptedLogHeader {\n    address: AztecAddress,\n}\n\nimpl EncryptedLogHeader {\n    fn new(address: AztecAddress) -> Self {\n        EncryptedLogHeader { address }\n    }\n\n    fn compute_ciphertext<T>(self, secret: Scalar, pk: T) -> [u8; 48] where T: ToPoint {\n        let full_key = point_to_symmetric_key(secret, pk.to_point());\n        let mut sym_key = [0; 16];\n        let mut iv = [0; 16];\n\n        for i in 0..16 {\n            sym_key[i] = full_key[i];\n            iv[i] = full_key[i + 16];\n        }\n\n        let input: [u8; 32] = self.address.to_field().to_be_bytes();\n        aes128_encrypt(input, iv, sym_key).as_array()\n    }\n}\n\n#[test]\nunconstrained fn test_encrypted_log_header_matches_noir() {\n    let address = AztecAddress::from_field(0xdeadbeef);\n    let header = EncryptedLogHeader::new(address);\n    let secret = Scalar {\n        lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n        hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06\n    };\n    let point = crate::keys::public_keys::IvpkM {\n        inner: Point {\n            x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n            y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n            is_infinite: false\n        }\n    };\n\n    let ciphertext = header.compute_ciphertext(secret, point);\n\n    // The following value was generated by `encrypted_log_header.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let expected_header_ciphertext_from_typescript = [\n        226, 240, 253, 6, 28, 52, 19, 131, 33, 132, 178, 212, 245, 62, 14, 190, 194, 44, 7, 131, 160, 83, 64, 181, 98, 38, 153, 214, 62, 171, 253, 161, 111, 191, 28, 247, 216, 26, 222, 171, 176, 218, 48, 209, 73, 89, 200, 209\n    ];\n\n    assert_eq(ciphertext, expected_header_ciphertext_from_typescript);\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/header.nr"},"105":{"source":"use crate::{\n    context::PrivateContext, note::{note_emission::NoteEmission, note_interface::NoteInterface},\n    keys::{getters::get_ovsk_app, public_keys::{PublicKeys, OvpkM, IvpkM}},\n    encrypted_logs::payload::compute_encrypted_log\n};\nuse dep::protocol_types::{hash::sha256_to_field, address::AztecAddress, abis::note_hash::NoteHash};\n\nfn compute_raw_note_log<Note, let N: u32>(\n    context: PrivateContext,\n    note: Note,\n    ovsk_app: Field,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress\n) -> (u32, [u8; 416 + N * 32], Field) where Note: NoteInterface<N> {\n    let note_header = note.get_header();\n    let note_hash_counter = note_header.note_hash_counter;\n    let storage_slot = note_header.storage_slot;\n\n    // TODO(#8589): use typesystem to skip this check when not needed\n    let note_exists = context.note_hashes.storage.any(|n: NoteHash| n.counter == note_hash_counter);\n    assert(note_exists, \"Can only emit a note log for an existing note.\");\n\n    let contract_address: AztecAddress = context.this_address();\n\n    let plaintext = note.to_be_bytes(storage_slot);\n    let encrypted_log: [u8; 416 + N * 32] = compute_encrypted_log(contract_address, ovsk_app, ovpk, ivpk, recipient, plaintext);\n    let log_hash = sha256_to_field(encrypted_log);\n\n    (note_hash_counter, encrypted_log, log_hash)\n}\n\nunconstrained fn compute_raw_note_log_unconstrained<Note, let N: u32>(\n    context: PrivateContext,\n    note: Note,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress\n) -> (u32, [u8; 416 + N * 32], Field) where Note: NoteInterface<N> {\n    let ovsk_app = get_ovsk_app(ovpk.hash());\n    compute_raw_note_log(context, note, ovsk_app, ovpk, ivpk, recipient)\n}\n\n// This function seems to be affected by the following Noir bug:\n// https://github.com/noir-lang/noir/issues/5771\n// If you get weird behavior it might be because of it.\npub fn encode_and_encrypt_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress\n) -> fn[(&mut PrivateContext, OvpkM, IvpkM, AztecAddress)](NoteEmission<Note>) -> () where Note: NoteInterface<N> {\n    | e: NoteEmission<Note> | {\n        let ovsk_app: Field  = context.request_ovsk_app(ovpk.hash());\n\n        let (note_hash_counter, encrypted_log, log_hash) = compute_raw_note_log(*context, e.note, ovsk_app, ovpk, ivpk, recipient);\n        context.emit_raw_note_log(note_hash_counter, encrypted_log, log_hash);\n    }\n}\n\npub fn encode_and_encrypt_note_unconstrained<Note, let N: u32>(\n    context: &mut PrivateContext,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress\n) -> fn[(&mut PrivateContext, OvpkM, IvpkM, AztecAddress)](NoteEmission<Note>) -> () where Note: NoteInterface<N> {\n    | e: NoteEmission<Note> | {\n        //   Having the log hash be unconstrained here is fine because the way this works is we send the log hash\n        // to the kernel, and it gets included as part of its public inputs. Then we send the tx to the sequencer,\n        // which includes the kernel proof and the log preimages. The sequencer computes the hashes of the logs\n        // and checks that they are the ones in the public inputs of the kernel, and drops the tx otherwise (proposing\n        // the block on L1 would later fail if it didn't because of txs effects hash mismatch).\n        //   So if we don't constrain the log hash, then a malicious sender can compute the correct log, submit a bad\n        // log hash to the kernel, and then submit the bad log preimage to the sequencer. All checks will pass, but\n        // the submitted log will not be the one that was computed by the app.\n        //   In the unconstrained case, we don't care about the log at all because we don't do anything with it,\n        // and because it's unconstrained: it could be anything. So if a sender chooses to broadcast the tx with a log\n        // that is different from the one that was used in the circuit, then they'll be able to, but they were already\n        // able to change the log before anyway, so the end result is the same. It's important here that we do not\n        // return the log from this function to the app, otherwise it could try to do stuff with it and then that might\n        // be wrong.\n        //   Regarding the note hash counter, this is used for squashing. The kernel assumes that a given note can have\n        // more than one log and removes all of the matching ones, so all a malicious sender could do is either: cause\n        // for the log to be deleted when it shouldn't have (which is fine - they can already make the content be\n        // whatever), or cause for the log to not be deleted when it should have (which is also fine - it'll be a log\n        // for a note that doesn't exist).\n        let (note_hash_counter, encrypted_log, log_hash) = unsafe {\n            compute_raw_note_log_unconstrained(*context, e.note, ovpk, ivpk, recipient)\n        };\n        context.emit_raw_note_log(note_hash_counter, encrypted_log, log_hash);\n    }\n}\n\n/// Encrypts a partial log and emits it. Takes recipient keys on the input and encrypts both the outgoing and incoming\n/// logs for the recipient. This is necessary because in the partial notes flow the outgoing always has to be the same\n/// as the incoming to not leak any information (typically the `from` party finalizing the partial note in public does\n/// not know who the recipient is).\npub fn encrypt_and_emit_partial_log<let M: u32>(\n    context: &mut PrivateContext,\n    log_plaintext: [u8; M],\n    recipient_keys: PublicKeys,\n    recipient: AztecAddress\n) {\n    let ovsk_app: Field  = context.request_ovsk_app(recipient_keys.ovpk_m.hash());\n\n    let encrypted_log: [u8; 352 + M] = compute_encrypted_log(\n        context.this_address(),\n        ovsk_app,\n        recipient_keys.ovpk_m,\n        recipient_keys.ivpk_m,\n        recipient,\n        log_plaintext\n    );\n    let log_hash = sha256_to_field(encrypted_log);\n\n    // Unfortunately we need to push a dummy note hash to the context here because a note log requires having\n    // a counter that corresponds to a note hash in the same call.\n    let note_hash_counter = context.side_effect_counter;\n    context.push_note_hash(5);\n\n    context.emit_raw_note_log(note_hash_counter, encrypted_log, log_hash);\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/encrypted_note_emission.nr"},"107":{"source":"use dep::protocol_types::{\n    address::AztecAddress, scalar::Scalar, point::Point, constants::GENERATOR_INDEX__SYMMETRIC_KEY,\n    hash::poseidon2_hash_with_separator\n};\nuse std::{\n    aes128::aes128_encrypt, embedded_curve_ops::fixed_base_scalar_mul as derive_public_key,\n    hash::from_field_unsafe as fr_to_fq_unsafe, field::bn254::decompose\n};\n\nuse crate::{\n    oracle::random::random, utils::point::point_to_bytes, encrypted_logs::{header::EncryptedLogHeader},\n    keys::{point_to_symmetric_key::point_to_symmetric_key, public_keys::{OvpkM, IvpkM}}\n};\n\npub fn compute_encrypted_log<let P: u32, let M: u32>(\n    contract_address: AztecAddress,\n    ovsk_app: Field,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress,\n    plaintext: [u8; P]\n) -> [u8; M] {\n    let (eph_sk, eph_pk) = generate_ephemeral_key_pair();\n\n    let header = EncryptedLogHeader::new(contract_address);\n\n    let incoming_header_ciphertext: [u8; 48] = header.compute_ciphertext(eph_sk, ivpk);\n    let outgoing_header_ciphertext: [u8; 48] = header.compute_ciphertext(eph_sk, ovpk);\n    let incoming_body_ciphertext = compute_incoming_body_ciphertext(plaintext, eph_sk, ivpk);\n    let outgoing_body_ciphertext: [u8; 144] = compute_outgoing_body_ciphertext(recipient, ivpk, fr_to_fq(ovsk_app), eph_sk, eph_pk);\n\n    let mut encrypted_bytes: [u8; M] = [0; M];\n    // @todo We ignore the tags for now\n\n    let eph_pk_bytes = point_to_bytes(eph_pk);\n    for i in 0..32 {\n        encrypted_bytes[64 + i] = eph_pk_bytes[i];\n    }\n    for i in 0..48 {\n        encrypted_bytes[96 + i] = incoming_header_ciphertext[i];\n        encrypted_bytes[144 + i] = outgoing_header_ciphertext[i];\n    }\n    for i in 0..144 {\n        encrypted_bytes[192 + i] = outgoing_body_ciphertext[i];\n    }\n    // Then we fill in the rest as the incoming body ciphertext\n    let size = M - 336;\n    assert_eq(size, incoming_body_ciphertext.len(), \"ciphertext length mismatch\");\n    for i in 0..size {\n        encrypted_bytes[336 + i] = incoming_body_ciphertext[i];\n    }\n\n    // Current unoptimized size of the encrypted log\n    // incoming_tag (32 bytes)\n    // outgoing_tag (32 bytes)\n    // eph_pk (32 bytes)\n    // incoming_header (48 bytes)\n    // outgoing_header (48 bytes)\n    // outgoing_body (144 bytes)\n    // incoming_body_fixed (64 bytes)\n    // incoming_body_variable (P + 16 bytes padding)\n    encrypted_bytes\n}\n\n/// Converts a base field element to scalar field element.\n/// This is fine because modulus of the base field is smaller than the modulus of the scalar field.\nfn fr_to_fq(r: Field) -> Scalar {\n    let (lo, hi) = decompose(r);\n\n    Scalar { lo, hi }\n}\n\nfn generate_ephemeral_key_pair() -> (Scalar, Point) {\n    // @todo Need to draw randomness from the full domain of Fq not only Fr\n\n    // We use the randomness to preserve the privacy of both the sender and recipient via encryption, so a malicious\n    // sender could use non-random values to reveal the plaintext. But they already know it themselves anyway, and so\n    // the recipient already trusts them to not disclose this information. We can therefore assume that the sender will\n    // cooperate in the random value generation.\n    let randomness = unsafe {\n        random()\n    };\n\n    // We use the unsafe version of `fr_to_fq` because multi_scalar_mul (called by derive_public_key) will constrain\n    // the scalars.\n    let eph_sk = fr_to_fq_unsafe(randomness);\n    let eph_pk = derive_public_key(eph_sk);\n\n    (eph_sk, eph_pk)\n}\n\npub fn compute_incoming_body_ciphertext<let P: u32>(plaintext: [u8; P], eph_sk: Scalar, ivpk: IvpkM) -> [u8] {\n    let full_key = point_to_symmetric_key(eph_sk, ivpk.to_point());\n    let mut sym_key = [0; 16];\n    let mut iv = [0; 16];\n\n    for i in 0..16 {\n        sym_key[i] = full_key[i];\n        iv[i] = full_key[i + 16];\n    }\n    aes128_encrypt(plaintext, iv, sym_key)\n}\n\n/// Encrypts ephemeral secret key and recipient's ivpk --> with this information the recipient of outgoing will\n/// be able to derive the key with which the incoming log can be decrypted.\npub fn compute_outgoing_body_ciphertext(\n    recipient: AztecAddress,\n    recipient_ivpk: IvpkM,\n    ovsk_app: Scalar,\n    eph_sk: Scalar,\n    eph_pk: Point\n) -> [u8; 144] {\n    // Again, we could compute `eph_pk` here, but we keep the interface more similar\n    // and also make it easier to optimise it later as we just pass it along\n\n    let mut buffer = [0 as u8; 128];\n\n    let serialized_eph_sk_high: [u8; 32] = eph_sk.hi.to_be_bytes();\n    let serialized_eph_sk_low: [u8; 32] = eph_sk.lo.to_be_bytes();\n\n    let address_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let serialized_recipient_ivpk = point_to_bytes(recipient_ivpk.to_point());\n\n    for i in 0..32 {\n        buffer[i] = serialized_eph_sk_high[i];\n        buffer[i + 32] = serialized_eph_sk_low[i];\n        buffer[i + 64] = address_bytes[i];\n    }\n    for i in 0..32 {\n        buffer[i + 96] = serialized_recipient_ivpk[i];\n    }\n\n    // We compute the symmetric key using poseidon.\n    let full_key: [u8; 32] = poseidon2_hash_with_separator(\n        [ovsk_app.hi, ovsk_app.lo, eph_pk.x, eph_pk.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY as Field\n    ).to_be_bytes();\n\n    let mut sym_key = [0; 16];\n    let mut iv = [0; 16];\n\n    for i in 0..16 {\n        sym_key[i] = full_key[i];\n        iv[i] = full_key[i + 16];\n    }\n    aes128_encrypt(buffer, iv, sym_key).as_array()\n}\n\nmod test {\n    use crate::{\n        encrypted_logs::payload::{compute_encrypted_log, compute_incoming_body_ciphertext, compute_outgoing_body_ciphertext},\n        keys::public_keys::{OvpkM, IvpkM}\n    };\n    use std::embedded_curve_ops::fixed_base_scalar_mul as derive_public_key;\n    use dep::protocol_types::{address::AztecAddress, point::Point, scalar::Scalar};\n    use std::test::OracleMock;\n\n    #[test]\n    unconstrained fn test_encrypted_log_matches_typescript() {\n        // All the values in this test were copied over from `tagged_log.test.ts`\n        let contract_address = AztecAddress::from_field(0x10f48cd9eff7ae5b209c557c70de2e657ee79166868676b787e9417e19260e04);\n        let ovsk_app = 0x03a6513d6def49f41d20373d2cec894c23e7492794b08fc50c0e8a1bd2512612;\n        let ovpk_m = OvpkM {\n            inner: Point {\n                x: 0x1961448682803198631f299340e4206bb12809d4bebbf012b30f59af73ba1a15,\n                y: 0x133674060c3925142aceb4f1dcd9f9137d0217d37ff8729ee5ceaa6e2790353d,\n                is_infinite: false\n            }\n        };\n        let ivpk_m = IvpkM {\n            inner: Point {\n                x: 0x260cd3904f6df16e974c29944fdc839e40fb5cf293f03df2eb370851d3a527bc,\n                y: 0x0eef2964fe6640e84c82b5d2915892409b38e9e25d39f68dd79edb725c55387f,\n                is_infinite: false\n            }\n        };\n\n        let plaintext = [\n            0, 0, 0, 1, 48, 22, 64, 206, 234, 117, 131, 145, 178, 225, 97, 201, 44, 5, 19, 241, 41, 2, 15, 65, 37, 37, 106, 253, 174, 38, 70, 206, 49, 9, 159, 92, 16, 244, 140, 217, 239, 247, 174, 91, 32, 156, 85, 124, 112, 222, 46, 101, 126, 231, 145, 102, 134, 134, 118, 183, 135, 233, 65, 126, 25, 38, 14, 4, 15, 228, 107, 229, 131, 183, 31, 74, 181, 183, 12, 38, 87, 255, 29, 5, 204, 207, 29, 41, 42, 147, 105, 98, 141, 26, 25, 79, 148, 78, 101, 153, 0, 0, 16, 39\n        ];\n\n        let eph_sk = 0x1358d15019d4639393d62b97e1588c095957ce74a1c32d6ec7d62fe6705d9538;\n        let _ = OracleMock::mock(\"getRandomField\").returns(eph_sk);\n\n        let recipient = AztecAddress::from_field(0x10ee41ee4b62703b16f61e03cb0d88c4b306a9eb4a6ceeb2aff13428541689a2);\n\n        let log: [u8; 448] = compute_encrypted_log(contract_address, ovsk_app, ovpk_m, ivpk_m, recipient, plaintext);\n\n        // The following value was generated by `tagged_log.test.ts`\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let encrypted_log_from_typescript = [\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 141, 70, 12, 14, 67, 77, 132, 110, 193, 234, 40, 110, 64, 144, 235, 86, 55, 111, 242, 123, 221, 193, 170, 202, 225, 216, 86, 84, 159, 112, 31, 167, 126, 79, 51, 186, 47, 71, 253, 172, 99, 112, 241, 59, 197, 241, 107, 186, 232, 87, 187, 230, 171, 62, 228, 234, 42, 51, 145, 146, 238, 242, 42, 71, 206, 13, 244, 66, 111, 195, 20, 203, 98, 148, 204, 242, 145, 183, 156, 29, 141, 54, 44, 220, 194, 35, 229, 16, 32, 204, 211, 49, 142, 112, 82, 202, 116, 241, 254, 146, 42, 217, 20, 189, 70, 228, 182, 171, 205, 104, 27, 99, 171, 28, 91, 244, 21, 30, 130, 240, 5, 72, 174, 124, 97, 197, 157, 248, 193, 23, 193, 76, 46, 141, 144, 70, 211, 45, 67, 167, 218, 129, 140, 104, 190, 41, 110, 249, 209, 68, 106, 135, 164, 80, 235, 63, 101, 80, 32, 13, 38, 99, 145, 91, 11, 173, 151, 231, 247, 65, 153, 117, 229, 167, 64, 239, 182, 126, 235, 83, 4, 169, 8, 8, 160, 4, 235, 252, 21, 96, 84, 161, 69, 145, 145, 215, 254, 161, 117, 246, 198, 65, 89, 179, 194, 90, 19, 121, 12, 202, 114, 80, 195, 14, 60, 128, 105, 142, 100, 86, 90, 108, 157, 219, 22, 172, 20, 121, 195, 25, 159, 236, 2, 70, 75, 42, 37, 34, 2, 17, 149, 20, 176, 32, 18, 204, 56, 117, 121, 34, 15, 3, 88, 123, 64, 68, 74, 233, 63, 59, 131, 222, 194, 192, 167, 110, 217, 10, 128, 73, 129, 172, 61, 43, 12, 98, 165, 203, 191, 154, 161, 150, 4, 239, 95, 48, 60, 159, 33, 222, 142, 102, 73, 193, 236, 145, 197, 160, 216, 254, 113, 243, 25, 244, 251, 192, 222, 35, 7, 114, 101, 35, 152, 151, 112, 24, 32, 94, 138, 71, 160, 91, 68, 131, 217, 117, 140, 19, 147, 37, 197, 192, 21, 43, 172, 239, 239, 205, 15, 110, 76, 26, 211, 42, 117, 4, 15, 135, 145, 247, 37, 73, 84, 164, 149, 250, 35, 0, 205, 105, 178, 143, 104, 98, 100, 250, 193, 154, 136, 175, 177, 109, 225, 207, 252, 147, 250, 250, 189, 117, 147, 101, 230, 132\n        ];\n        assert_eq(encrypted_log_from_typescript, log);\n    }\n\n    #[test]\n    fn test_incoming_body_ciphertext_matches_typescript() {\n        // All the values in this test were copied over from `encrypted_note_log_incoming_body.test.ts`\n        let eph_sk = Scalar {\n            lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n            hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06\n        };\n        let ivpk = IvpkM {\n            inner: Point {\n                x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n                y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n                is_infinite: false\n            }\n        };\n        let plaintext = [\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3\n        ];\n\n        // `compute_incoming_body_ciphertext(...)` function then derives symmetric key from `eph_sk` and `ivpk` and encrypts\n        // the note plaintext using AES-128.\n        let ciphertext = compute_incoming_body_ciphertext(plaintext, eph_sk, ivpk);\n\n        // The following value was generated by `encrypted_note_log_incoming_body.test.ts`.\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let note_body_ciphertext_from_typescript = [\n            226, 240, 253, 6, 28, 52, 19, 131, 33, 132, 178, 212, 245, 62, 14, 190, 147, 228, 160, 190, 146, 61, 95, 203, 124, 153, 68, 168, 17, 150, 92, 0, 99, 214, 85, 64, 191, 78, 157, 131, 149, 96, 236, 253, 96, 172, 157, 30, 27, 176, 228, 74, 242, 190, 138, 48, 33, 93, 46, 37, 223, 130, 25, 245, 188, 163, 159, 223, 187, 24, 139, 206, 131, 154, 159, 130, 37, 17, 158, 114, 242, 141, 124, 193, 232, 54, 146, 96, 145, 100, 125, 234, 57, 43, 95, 115, 183, 39, 121, 232, 134, 229, 148, 25, 46, 77, 87, 127, 95, 7, 77, 188, 37, 234, 245, 142, 232, 87, 252, 28, 67, 67, 90, 214, 254, 89, 47, 68, 66, 187, 227, 8, 59, 162, 25, 141, 97, 141, 217, 197, 115, 15, 212, 202, 157, 41, 150, 62, 219, 57, 224, 92, 185, 212, 142, 94, 146, 41, 178, 145, 68, 169, 23, 185, 206, 138, 70, 47, 176, 210, 165, 236, 23, 206, 229, 108\n        ];\n\n        assert_eq(note_body_ciphertext_from_typescript.len(), ciphertext.len());\n\n        for i in 0..note_body_ciphertext_from_typescript.len() {\n            assert_eq(ciphertext[i], note_body_ciphertext_from_typescript[i]);\n        }\n    }\n\n    #[test]\n    fn test_encrypted_log_outgoing_body_matches_typescript() {\n        let eph_sk = Scalar {\n            lo: 0x00000000000000000000000000000000d0d302ee245dfaf2807e604eec4715fe,\n            hi: 0x000000000000000000000000000000000f096b423017226a18461115fa8d34bb\n        };\n        let recipient_ivsk = Scalar {\n            lo: 0x000000000000000000000000000000004828f8f95676ebb481df163f87fd4022,\n            hi: 0x000000000000000000000000000000000f4d97c25d578f9348251a71ca17ae31\n        };\n        let sender_ovsk_app = Scalar {\n            lo: 0x0000000000000000000000000000000074d2e28c6bc5176ac02cf7c7d36a444e,\n            hi: 0x00000000000000000000000000000000089c6887cb1446d86c64e81afc78048b\n        };\n\n        let eph_pk = derive_public_key(eph_sk);\n        let recipient_ivpk = IvpkM { inner: derive_public_key(recipient_ivsk) };\n\n        let recipient = AztecAddress::from_field(0xdeadbeef);\n\n        let ciphertext = compute_outgoing_body_ciphertext(recipient, recipient_ivpk, sender_ovsk_app, eph_sk, eph_pk);\n\n        // The following value was generated by `encrypted_log_outgoing_body.test.ts`\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let outgoing_body_ciphertext_from_typescript = [\n            127, 182, 227, 75, 192, 197, 54, 47, 168, 134, 233, 148, 251, 46, 86, 12, 73, 50, 238, 50, 31, 174, 27, 202, 110, 77, 161, 197, 244, 124, 17, 100, 143, 150, 232, 14, 156, 248, 43, 177, 16, 82, 244, 103, 88, 74, 84, 200, 15, 65, 187, 14, 163, 60, 91, 22, 104, 31, 211, 190, 124, 121, 79, 92, 239, 65, 185, 106, 51, 178, 168, 137, 84, 43, 79, 158, 151, 152, 83, 42, 170, 13, 106, 209, 254, 74, 39, 145, 73, 215, 17, 234, 196, 89, 30, 58, 120, 127, 88, 69, 121, 61, 18, 206, 89, 118, 243, 238, 177, 71, 73, 47, 147, 4, 155, 25, 173, 248, 206, 52, 17, 180, 122, 186, 106, 191, 252, 102, 197, 91, 16, 39, 94, 91, 224, 30, 168, 177, 26, 144, 5, 124, 128, 6\n        ];\n\n        for i in 0..outgoing_body_ciphertext_from_typescript.len() {\n            assert_eq(ciphertext[i], outgoing_body_ciphertext_from_typescript[i]);\n        }\n        assert_eq(outgoing_body_ciphertext_from_typescript.len(), ciphertext.len());\n    }\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/payload.nr"},"120":{"source":"use dep::protocol_types::address::AztecAddress;\n\n#[oracle(getContractAddress)]\nunconstrained fn get_contract_address_oracle() -> AztecAddress {}\n\n#[oracle(getBlockNumber)]\nunconstrained fn get_block_number_oracle() -> u32 {}\n\n#[oracle(getChainId)]\nunconstrained fn get_chain_id_oracle() -> Field {}\n\n#[oracle(getVersion)]\nunconstrained fn get_version_oracle() -> Field {}\n\nunconstrained pub fn get_contract_address() -> AztecAddress {\n    get_contract_address_oracle()\n}\n\nunconstrained pub fn get_block_number() -> u32 {\n    get_block_number_oracle()\n}\n\nunconstrained pub fn get_chain_id() -> Field {\n    get_chain_id_oracle()\n}\n\nunconstrained pub fn get_version() -> Field {\n    get_version_oracle()\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/execution.nr"},"121":{"source":"use dep::protocol_types::abis::validation_requests::{KeyValidationRequest, key_validation_request::KEY_VALIDATION_REQUEST_LENGTH};\n\n#[oracle(getKeyValidationRequest)]\nunconstrained fn get_key_validation_request_oracle(\n    _pk_m_hash: Field,\n    _key_index: Field\n) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {}\n\nunconstrained fn get_key_validation_request_internal(\n    npk_m_hash: Field,\n    key_index: Field\n) -> KeyValidationRequest {\n    let result = get_key_validation_request_oracle(npk_m_hash, key_index);\n    KeyValidationRequest::deserialize(result)\n}\n\nunconstrained pub fn get_key_validation_request(\n    pk_m_hash: Field,\n    key_index: Field\n) -> KeyValidationRequest {\n    get_key_validation_request_internal(pk_m_hash, key_index)\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr"},"122":{"source":"use dep::protocol_types::{abis::function_selector::FunctionSelector, address::AztecAddress, utils::reader::Reader};\n\n#[oracle(callPrivateFunction)]\nunconstrained fn call_private_function_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _start_side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> [Field; 2] {}\n\nunconstrained pub fn call_private_function_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    start_side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> (u32, Field) {\n    let fields = call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        start_side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    );\n\n    let mut reader = Reader::new(fields);\n    let end_side_effect_counter = reader.read_u32();\n    let returns_hash = reader.read();\n\n    (end_side_effect_counter, returns_hash)\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/call_private_function.nr"},"123":{"source":"/// Returns an unconstrained random value. Note that it is not possible to constrain this value to prove that it is\n/// truly random: we assume that the oracle is cooperating and returning random values.\n/// In some applications this behavior might not be acceptable and other techniques might be more suitable, such as\n/// producing pseudo-random values by hashing values outside of user control (like block hashes) or secrets.\nunconstrained pub fn random() -> Field {\n    rand_oracle()\n}\n\n#[oracle(getRandomField)]\nunconstrained fn rand_oracle() -> Field {}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/random.nr"},"124":{"source":"use crate::note::{note_header::NoteHeader, note_interface::NoteInterface};\n\nuse dep::protocol_types::{address::AztecAddress, utils::arr_copy_slice};\n\n/// Notifies the simulator that a note has been created, so that it can be returned in future read requests in the same\n/// transaction. This note should only be added to the non-volatile database if found in an actual block.\npub fn notify_created_note<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    serialized_note: [Field; N],\n    note_hash: Field,\n    counter: u32\n) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        notify_created_note_oracle_wrapper(storage_slot, note_type_id, serialized_note, note_hash, counter)\n    };\n}\n\n/// Notifies the simulator that a note has been nullified, so that it is no longer returned in future read requests in\n/// the same transaction. This note should only be removed to the non-volatile database if its nullifier is found in an\n/// actual block.\npub fn notify_nullified_note(nullifier: Field, note_hash: Field, counter: u32) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        notify_nullified_note_oracle_wrapper(nullifier, note_hash, counter)\n    };\n}\n\nunconstrained fn notify_created_note_oracle_wrapper<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    serialized_note: [Field; N],\n    note_hash: Field,\n    counter: u32\n) {\n    let _ = notify_created_note_oracle(storage_slot, note_type_id, serialized_note, note_hash, counter);\n}\n\n#[oracle(notifyCreatedNote)]\nunconstrained fn notify_created_note_oracle<let N: u32>(\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _serialized_note: [Field; N],\n    _note_hash: Field,\n    _counter: u32\n) -> Field {}\n\nunconstrained fn notify_nullified_note_oracle_wrapper(\n    nullifier: Field,\n    note_hash: Field,\n    counter: u32\n) {\n    let _ = notify_nullified_note_oracle(nullifier, note_hash, counter);\n}\n\n#[oracle(notifyNullifiedNote)]\nunconstrained fn notify_nullified_note_oracle(_nullifier: Field, _note_hash: Field, _counter: u32) -> Field {}\n\n#[oracle(getNotes)]\nunconstrained fn get_notes_oracle<let N: u32, let S: u32>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by_indexes: [u8; N],\n    _select_by_offsets: [u8; N],\n    _select_by_lengths: [u8; N],\n    _select_values: [Field; N],\n    _select_comparators: [u8; N],\n    _sort_by_indexes: [u8; N],\n    _sort_by_offsets: [u8; N],\n    _sort_by_lengths: [u8; N],\n    _sort_order: [u8; N],\n    _limit: u32,\n    _offset: u32,\n    _status: u8,\n    _return_size: u32,\n    _placeholder_fields: [Field; S]\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<let N: u32, let S: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; N],\n    select_by_offsets: [u8; N],\n    select_by_lengths: [u8; N],\n    select_values: [Field; N],\n    select_comparators: [u8; N],\n    sort_by_indexes: [u8; N],\n    sort_by_offsets: [u8; N],\n    sort_by_lengths: [u8; N],\n    sort_order: [u8; N],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_fields: [Field; S]\n) -> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        return_size,\n        placeholder_fields\n    )\n}\n\nunconstrained pub fn get_notes<Note, let N: u32, let M: u32, let S: u32, let NS: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; M],\n    select_by_offsets: [u8; M],\n    select_by_lengths: [u8; M],\n    select_values: [Field; M],\n    select_comparators: [u8; M],\n    sort_by_indexes: [u8; M],\n    sort_by_offsets: [u8; M],\n    sort_by_lengths: [u8; M],\n    sort_order: [u8; M],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\n    placeholder_fields: [Field; NS], // TODO: Remove it and use `limit` to initialize the note array.\n    _placeholder_note_length: [Field; N] // Turbofish hack? Compiler breaks calculating read_offset unless we add this parameter\n) -> [Option<Note>; S] where Note: NoteInterface<N> {\n    let fields = get_notes_oracle_wrapper(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        placeholder_fields\n    );\n    let num_notes = fields[0] as u32;\n    let contract_address = AztecAddress::from_field(fields[1]);\n    for i in 0..placeholder_opt_notes.len() {\n        if i < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: u32 = 2; // num_notes & contract_address.\n            let extra_preimage_length: u32 = 2; // nonce & note_hash_counter.\n            let read_offset: u32 = return_header_length + i * (N + extra_preimage_length);\n            let nonce = fields[read_offset];\n            let note_hash_counter = fields[read_offset + 1] as u32;\n            let header = NoteHeader { contract_address, nonce, storage_slot, note_hash_counter };\n            let serialized_note = arr_copy_slice(fields, [0; N], read_offset + 2);\n            let mut note = Note::deserialize_content(serialized_note);\n            note.set_header(header);\n            placeholder_opt_notes[i] = Option::some(note);\n        };\n    }\n    placeholder_opt_notes\n}\n\n/// Returns true if the nullifier exists. Note that a `true` value can be constrained by proving existence of the\n/// nullifier, but a `false` value should not be relied upon since other transactions may emit this nullifier before the\n/// current transaction is included in a block. While this might seem of little use at first, certain design patterns\n/// benefit from this abstraction (see e.g. `PrivateMutable`).\nunconstrained pub fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier) == 1\n}\n\n#[oracle(checkNullifierExists)]\nunconstrained fn check_nullifier_exists_oracle(_inner_nullifier: Field) -> Field {}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/notes.nr"},"125":{"source":"/// Notifies the simulator that `returns` will be later fetched once the function return is processed, referenced by\n/// their hash. This allows the simulator to know how to respond to this future request.\n///\n/// This is only used during private execution, since in public it is the VM itself that keeps track of return values.\npub fn pack_returns(returns: [Field]) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call. When\n    // unpacking however the caller must check that the returned value is indeed the preimage.\n    unsafe {\n        pack_returns_oracle_wrapper(returns)\n    };\n}\n\nunconstrained pub fn pack_returns_oracle_wrapper(returns: [Field]) {\n    let _ = pack_returns_oracle(returns);\n}\n\nunconstrained pub fn unpack_returns<let N: u32>(return_hash: Field) -> [Field; N] {\n    unpack_returns_oracle(return_hash)\n}\n\n#[oracle(packReturns)]\nunconstrained fn pack_returns_oracle(_returns: [Field]) -> Field {}\n\n#[oracle(unpackReturns)]\nunconstrained fn unpack_returns_oracle<let N: u32>(_return_hash: Field) -> [Field; N] {}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/returns.nr"},"126":{"source":"use crate::keys::{PublicKeys, public_keys::{NpkM, IvpkM, OvpkM, TpkM}};\nuse dep::protocol_types::{address::{AztecAddress, PartialAddress}, point::Point};\n\n#[oracle(getPublicKeysAndPartialAddress)]\nunconstrained fn get_public_keys_and_partial_address_oracle(_address: AztecAddress) -> [Field; 13] {}\n\nunconstrained pub fn get_public_keys_and_partial_address(address: AztecAddress) -> (PublicKeys, PartialAddress) {\n    let result = get_public_keys_and_partial_address_oracle(address);\n\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: result[0], y: result[1], is_infinite: result[2] as bool } },\n        ivpk_m: IvpkM { inner: Point { x: result[3], y: result[4], is_infinite: result[5] as bool } },\n        ovpk_m: OvpkM { inner: Point { x: result[6], y: result[7], is_infinite: result[8] as bool } },\n        tpk_m: TpkM { inner: Point { x: result[9], y: result[10], is_infinite: result[11] as bool } }\n    };\n\n    let partial_address = PartialAddress::from_field(result[12]);\n\n    (keys, partial_address)\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/keys.nr"},"127":{"source":"use dep::protocol_types::{abis::{function_selector::FunctionSelector}, address::AztecAddress};\n\n#[oracle(enqueuePublicFunctionCall)]\nunconstrained fn enqueue_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> Field {}\n\nunconstrained pub fn enqueue_public_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> Field {\n    enqueue_public_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    )\n}\n\n#[oracle(setPublicTeardownFunctionCall)]\nunconstrained fn set_public_teardown_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> Field {}\n\nunconstrained pub fn set_public_teardown_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> Field {\n    set_public_teardown_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    )\n}\n\npub fn notify_set_min_revertible_side_effect_counter(counter: u32) {\n    unsafe {\n        notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter)\n    };\n}\n\nunconstrained pub fn notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter: u32) {\n    notify_set_min_revertible_side_effect_counter_oracle(counter);\n}\n\n#[oracle(notifySetMinRevertibleSideEffectCounter)]\nunconstrained fn notify_set_min_revertible_side_effect_counter_oracle(_counter: u32) {}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr"},"130":{"source":"use dep::protocol_types::address::AztecAddress;\n\n/// Informs the simulator that an encrypted note log has been emitted, helping it keep track of side-effects and easing\n/// debugging.\npub fn emit_encrypted_note_log<let M: u32>(note_hash_counter: u32, encrypted_note: [u8; M], counter: u32) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        emit_encrypted_note_log_oracle_wrapper(note_hash_counter, encrypted_note, counter)\n    }\n}\n\n/// Informs the simulator that an encrypted event log has been emitted, helping it keep track of side-effects and easing\n/// debugging.\npub fn emit_encrypted_event_log<let M: u32>(contract_address: AztecAddress, randomness: Field, encrypted_event: [u8; M], counter: u32) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        emit_encrypted_event_log_oracle_wrapper(contract_address, randomness, encrypted_event, counter)\n    }\n}\n\n/// Informs the simulator that an unencrypted log has been emitted, helping it keep track of side-effects and easing\n/// debugging.\npub fn emit_unencrypted_log_private<T>(contract_address: AztecAddress, message: T, counter: u32) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        emit_unencrypted_log_private_oracle_wrapper(contract_address, message, counter)\n    }\n}\n\nunconstrained fn emit_encrypted_note_log_oracle_wrapper<let M: u32>(note_hash_counter: u32, encrypted_note: [u8; M], counter: u32) {\n    emit_encrypted_note_log_oracle(note_hash_counter, encrypted_note, counter)\n}\n\nunconstrained fn emit_encrypted_event_log_oracle_wrapper<let M: u32>(\n    contract_address: AztecAddress,\n    randomness: Field,\n    encrypted_event: [u8; M],\n    counter: u32\n) {\n    emit_encrypted_event_log_oracle(contract_address, randomness, encrypted_event, counter)\n}\n\nunconstrained fn emit_unencrypted_log_private_oracle_wrapper<T>(contract_address: AztecAddress, message: T, counter: u32) {\n    let _ = emit_unencrypted_log_private_oracle(contract_address, message, counter);\n}\n\n/// Temporary substitute for `emit_unencrypted_log_private` that is used for handling contract class registration. This\n/// variant returns the log hash, which would be too large to compute inside a circuit.\nunconstrained pub fn emit_contract_class_unencrypted_log_private<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    counter: u32\n) -> Field {\n    emit_contract_class_unencrypted_log_private_oracle(contract_address, message, counter)\n}\n\n// = 480 + 32 * N bytes\n#[oracle(emitEncryptedNoteLog)]\nunconstrained fn emit_encrypted_note_log_oracle<let M: u32>(\n    _note_hash_counter: u32,\n    _encrypted_note: [u8; M],\n    _counter: u32\n) {}\n\n#[oracle(emitEncryptedEventLog)]\nunconstrained fn emit_encrypted_event_log_oracle<let M: u32>(\n    _contract_address: AztecAddress,\n    _randomness: Field,\n    _encrypted_event: [u8; M],\n    _counter: u32\n) {}\n\n#[oracle(emitUnencryptedLog)]\nunconstrained fn emit_unencrypted_log_private_oracle<T>(\n    _contract_address: AztecAddress,\n    _message: T,\n    _counter: u32\n) -> Field {}\n\n#[oracle(emitContractClassUnencryptedLog)]\nunconstrained fn emit_contract_class_unencrypted_log_private_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    counter: u32\n) -> Field {}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/logs.nr"},"134":{"source":"use dep::protocol_types::{\n    address::AztecAddress, contract_instance::ContractInstance, constants::CONTRACT_INSTANCE_LENGTH,\n    utils::reader::Reader\n};\n\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {}\n\n// Returns a ContractInstance plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstance)]\nunconstrained fn get_contract_instance_oracle_avm(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {}\n\nunconstrained fn get_contract_instance_internal(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n    get_contract_instance_oracle(address)\n}\n\nunconstrained pub fn get_contract_instance_internal_avm(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {\n    get_contract_instance_oracle_avm(address)\n}\n\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    let instance = unsafe {\n        ContractInstance::deserialize(get_contract_instance_internal(address))\n    };\n    // The to_address function combines all values in the instance object to produce an address, so by checking that we\n    // get the expected address we validate the entire struct.\n    assert_eq(instance.to_address(), address);\n\n    instance\n}\n\npub fn get_contract_instance_avm(address: AztecAddress) -> Option<ContractInstance> {\n    let mut reader = Reader::new(get_contract_instance_internal_avm(address));\n    let found = reader.read();\n    if found == 0 {\n        Option::none()\n    } else {\n        Option::some(reader.read_struct(ContractInstance::deserialize))\n    }\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr"},"136":{"source":"use dep::protocol_types::{\n    abis::nullifier_leaf_preimage::{NullifierLeafPreimage, NULLIFIER_LEAF_PREIMAGE_LENGTH},\n    constants::NULLIFIER_TREE_HEIGHT, utils::arr_copy_slice\n};\n\n// INDEX_LENGTH + NULLIFIER_LEAF_PREIMAGE_LENGTH + NULLIFIER_TREE_HEIGHT\nglobal NULLIFIER_MEMBERSHIP_WITNESS: u32 = 24;\n\npub struct NullifierMembershipWitness {\n    index: Field,\n    leaf_preimage: NullifierLeafPreimage,\n    path: [Field; NULLIFIER_TREE_HEIGHT],\n}\n\nimpl NullifierMembershipWitness {\n    pub fn deserialize(fields: [Field; NULLIFIER_MEMBERSHIP_WITNESS]) -> Self {\n        let leaf_preimage_fields = arr_copy_slice(fields, [0; NULLIFIER_LEAF_PREIMAGE_LENGTH], 1);\n        Self {\n            index: fields[0],\n            leaf_preimage: NullifierLeafPreimage::deserialize(leaf_preimage_fields),\n            path: arr_copy_slice(\n                fields,\n                [0; NULLIFIER_TREE_HEIGHT],\n                1 + NULLIFIER_LEAF_PREIMAGE_LENGTH\n            )\n        }\n    }\n}\n\n#[oracle(getLowNullifierMembershipWitness)]\nunconstrained fn get_low_nullifier_membership_witness_oracle(\n    _block_number: u32,\n    _nullifier: Field\n) -> [Field; NULLIFIER_MEMBERSHIP_WITNESS] {}\n\n// Nullifier here refers to the nullifier we are looking to get non-inclusion proof for (by proving that a lower\n// nullifier's next_value is bigger than the nullifier)\nunconstrained pub fn get_low_nullifier_membership_witness(block_number: u32, nullifier: Field) -> NullifierMembershipWitness {\n    let fields = get_low_nullifier_membership_witness_oracle(block_number, nullifier);\n    NullifierMembershipWitness::deserialize(fields)\n}\n\n#[oracle(getNullifierMembershipWitness)]\nunconstrained fn get_nullifier_membership_witness_oracle(\n    _block_number: u32,\n    _nullifier: Field\n) -> [Field; NULLIFIER_MEMBERSHIP_WITNESS] {}\n\n// Nullifier here refers to the nullifier we are looking to get non-inclusion proof for (by proving that a lower\n// nullifier's next_value is bigger than the nullifier)\nunconstrained pub fn get_nullifier_membership_witness(block_number: u32, nullifier: Field) -> NullifierMembershipWitness {\n    let fields = get_nullifier_membership_witness_oracle(block_number, nullifier);\n    NullifierMembershipWitness::deserialize(fields)\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/get_nullifier_membership_witness.nr"},"142":{"source":"use dep::protocol_types::point::Point;\n\n// I am storing the modulus divided by 2 plus 1 here because full modulus would throw \"String literal too large\" error\n// Full modulus is 21888242871839275222246405745257275088548364400416034343698204186575808495617\nglobal BN254_FR_MODULUS_DIV_2: Field = 10944121435919637611123202872628637544274182200208017171849102093287904247808;\n\n/// Converts a public key to a byte array.\n///\n/// We don't serialize the point at infinity flag because this function is used in situations where we do not want\n/// to waste the extra byte (encrypted log).\npub fn point_to_bytes(pk: Point) -> [u8; 32] {\n    // Note that there is 1 more free bit in the 32 bytes (254 bits currently occupied by the x coordinate, 1 bit for\n    // the \"sign\") so it's possible to use that last bit as an \"is_infinite\" flag if desired in the future.\n    assert(!pk.is_infinite, \"Cannot serialize point at infinity as bytes.\");\n\n    let mut result: [u8; 32] = pk.x.to_be_bytes();\n\n    // We store only a \"sign\" of the y coordinate because the rest can be derived from the x coordinate. To get\n    // the sign we check if the y coordinate is less or equal than the curve's order minus 1 divided by 2.\n    // Ideally we'd do `y <= MOD_DIV_2`, but there's no `lte` function, so instead we do `!(y > MOD_DIV_2)`, which is\n    // equivalent, and then rewrite that as `!(MOD_DIV_2 < y)`, since we also have no `gt` function.\n    if !BN254_FR_MODULUS_DIV_2.lt(pk.y) {\n        // y is <= (modulus - 1) / 2 so we set the sign bit to 1\n        // Here we leverage that field fits into 254 bits (log2(Fr.MODULUS) < 254) and given that we serialize Fr to 32\n        // bytes and we use big-endian the 2 most significant bits are never populated. Hence we can use one of\n        // the bits as a sign bit.\n        result[0] += 128;\n    }\n\n    result\n}\n\nmod test {\n    use dep::protocol_types::point::Point;\n    use crate::utils::point::point_to_bytes;\n\n    #[test]\n    unconstrained fn test_point_to_bytes_positive_sign() {\n        let p = Point {\n            x: 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73,\n            y: 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a,\n            is_infinite: false\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_positive_sign = [\n            154, 244, 31, 93, 233, 100, 70, 220, 55, 118, 161, 235, 45, 152, 187, 149, 107, 122, 205, 153, 121, 166, 120, 84, 190, 198, 250, 124, 41, 115, 189, 115\n        ];\n\n        assert_eq(expected_compressed_point_positive_sign.len(), compressed_point.len());\n        for i in 0..expected_compressed_point_positive_sign.len() {\n            assert_eq(compressed_point[i], expected_compressed_point_positive_sign[i]);\n        }\n    }\n\n    #[test]\n    unconstrained fn test_point_to_bytes_negative_sign() {\n        let p = Point {\n            x: 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5,\n            y: 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0,\n            is_infinite: false\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_negative_sign = [\n            36, 115, 113, 101, 46, 85, 221, 116, 201, 175, 141, 190, 159, 180, 73, 49, 186, 41, 169, 34, 153, 148, 56, 75, 215, 7, 119, 150, 193, 78, 226, 181\n        ];\n\n        assert_eq(expected_compressed_point_negative_sign.len(), compressed_point.len());\n        for i in 0..expected_compressed_point_negative_sign.len() {\n            assert_eq(compressed_point[i], expected_compressed_point_negative_sign[i]);\n        }\n    }\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/utils/point.nr"},"160":{"source":"use dep::protocol_types::{\n    address::AztecAddress, hash::poseidon2_hash_with_separator, constants::GENERATOR_INDEX__CONSTRUCTOR,\n    abis::function_selector::FunctionSelector\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext}, oracle::get_contract_instance::get_contract_instance,\n    oracle::get_contract_instance::get_contract_instance_avm\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    context.push_nullifier_read_request(init_nullifier);\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()), \"Initializer address is not the contract deployer\"\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()), \"Initializer address is not the contract deployer\"\n    );\n}\n\npub fn compute_initialization_hash(init_selector: FunctionSelector, init_args_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR\n    )\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/initializer.nr"},"161":{"source":"use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{GENERATOR_INDEX__SECRET_HASH, GENERATOR_INDEX__MESSAGE_NULLIFIER, GENERATOR_INDEX__FUNCTION_ARGS},\n    point::Point, traits::Hash,\n    hash::{sha256_to_field, poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice}\n};\nuse crate::utils::to_bytes::{arr_to_be_bytes_arr, str_to_be_bytes_arr};\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_unencrypted_log_hash<let N: u32>(contract_address: AztecAddress, log: [u8; N]) -> Field {\n    let mut hash_bytes = [0; N + 36];\n    // Address is converted to 32 bytes in ts\n    let address_bytes: [u8; 32] = contract_address.to_field().to_be_bytes();\n    for i in 0..32 {\n        hash_bytes[i] = address_bytes[i];\n    }\n    let len_bytes: [u8; 4] = (N as Field).to_be_bytes();\n    for i in 0..4 {\n        hash_bytes[32 + i] = len_bytes[i];\n    }\n    for i in 0..N {\n        hash_bytes[36 + i] = log[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\npub fn compute_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field\n) -> Field {\n    let mut hash_bytes = [0 as u8; 192];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret and index of the message hash\n// in the L1 to L2 message tree\npub fn compute_message_nullifier(message_hash: Field, secret: Field, leaf_index: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [message_hash, secret, leaf_index],\n        GENERATOR_INDEX__MESSAGE_NULLIFIER\n    )\n}\n\npub struct ArgsHasher {\n    fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n#[test]\nunconstrained fn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_array() {\n    let contract_address = AztecAddress::from_field(0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6);\n    let log = [\n        0x20660de09f35f876e3e69d227b2a35166ad05f09d82d06366ec9b6f65a51fec2,\n        0x1b52bfe3b8689761916f76dc3d38aa8810860db325cd39ca611eed980091f01c,\n        0x2e559c4045c378a56ad13b9edb1e8de4e7ad3b3aa35cc7ba9ec77f7a68fa43a4,\n        0x25d0f689c4a4178a29d59306f2675824d19be6d25e44fa03b03f49c263053dd2,\n        0x2d513a722d6f352dc0961f156afdc5e31495b9f0e35cb069261a8e55e2df67fd\n    ];\n    let serialized_log = arr_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0095b2d17ab72f4b27a341f7ac63e49ec73935ae8c9181a0ac02023eb12f3284);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_addr() {\n    let contract_address = AztecAddress::from_field(0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6);\n    let log = AztecAddress::from_field(0x26aa302d4715fd8a687453cb26d616b0768027bd54bcae56b09d908ecd9f8303);\n    let serialized_log: [u8; 32] = log.to_field().to_be_bytes();\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0083ab647dfb26e7ddee90a0f4209d049d4660cab42000c544b986aaa84c55a3);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_str() {\n    let contract_address = AztecAddress::from_field(0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8);\n    let log = \"dummy\";\n    let serialized_log = str_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x00629e88ebd6374f44aa6cfe07e251ecf07213ebc7267e8f6b578ae57ffd6c20);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_longer_str() {\n    let contract_address = AztecAddress::from_field(0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8);\n    let log = \"Hello this is a string\";\n    let serialized_log = str_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0098637962f7d34fa202b7ffad8a07a238c5d1fd897b82a108f7f467fa73b841);\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/hash.nr"},"164":{"source":"use dep::protocol_types::{constants::GENERATOR_INDEX__SYMMETRIC_KEY, scalar::Scalar, point::Point, utils::arr_copy_slice};\nuse crate::utils::point::point_to_bytes;\nuse std::{hash::sha256, embedded_curve_ops::multi_scalar_mul};\n\n// TODO(#5726): This function is called deriveAESSecret in TS. I don't like point_to_symmetric_key name much since\n// point is not the only input of the function. Unify naming with TS once we have a better name.\npub fn point_to_symmetric_key(secret: Scalar, point: Point) -> [u8; 32] {\n    let shared_secret: Point = multi_scalar_mul([point], [secret]);\n    let shared_secret = point_to_bytes(shared_secret);\n    let mut shared_secret_bytes_with_separator = [0 as u8; 33];\n    shared_secret_bytes_with_separator = arr_copy_slice(shared_secret, shared_secret_bytes_with_separator, 0);\n    shared_secret_bytes_with_separator[32] = GENERATOR_INDEX__SYMMETRIC_KEY;\n    sha256(shared_secret_bytes_with_separator)\n}\n\n#[test]\nunconstrained fn test_point_to_symmetric_key_matches_noir() {\n    // Value taken from \"derive shared secret\" test in encrypt_buffer.test.ts\n    let secret = Scalar {\n        lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n        hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06\n    };\n    let point = Point {\n        x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n        y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n        is_infinite: false\n    };\n\n    let key = point_to_symmetric_key(secret, point);\n\n    // The following value was generated by `encrypt_buffer.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let key_from_typescript = [\n        251, 232, 177, 34, 2, 174, 35, 92, 165, 118, 168, 3, 153, 140, 46, 210, 203, 154, 184, 158, 236, 33, 95, 77, 93, 120, 72, 88, 190, 209, 64, 159\n    ];\n    assert_eq(key, key_from_typescript);\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/keys/point_to_symmetric_key.nr"},"166":{"source":"use dep::protocol_types::address::AztecAddress;\nuse crate::{\n    oracle::{keys::get_public_keys_and_partial_address, key_validation_request::get_key_validation_request},\n    keys::{public_keys::PublicKeys, constants::{NULLIFIER_INDEX, OUTGOING_INDEX}}\n};\n\nmod test;\n\nunconstrained pub fn get_nsk_app(npk_m_hash: Field) -> Field {\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\n}\n\n// A helper function that gets app-siloed outgoing viewing key for a given `ovpk_m_hash`. This function is used\n// in unconstrained contexts only - when computing unconstrained note logs. The safe alternative is `request_ovsk_app`\n// function defined on `PrivateContext`.\nunconstrained pub fn get_ovsk_app(ovpk_m_hash: Field) -> Field {\n    get_key_validation_request(ovpk_m_hash, OUTGOING_INDEX).sk_app\n}\n\n// Returns all public keys for a given account, applying proper constraints to the context. We read all\n// keys at once since the constraints for reading them all are actually fewer than if we read them one at a time - any\n// read keys that are not required by the caller can simply be discarded.\npub fn get_public_keys(account: AztecAddress) -> PublicKeys {\n    let (hinted_canonical_public_keys, partial_address) = unsafe {\n        get_public_keys_and_partial_address(account)\n    };\n    assert_eq(\n        account, AztecAddress::compute(hinted_canonical_public_keys.hash(), partial_address), \"Invalid public keys hint for address\"\n    );\n\n    hinted_canonical_public_keys\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/keys/getters/mod.nr"},"167":{"source":"use dep::protocol_types::{\n    address::PublicKeysHash, constants::GENERATOR_INDEX__PUBLIC_KEYS_HASH,\n    hash::poseidon2_hash_with_separator, point::{Point, POINT_LENGTH},\n    traits::{Deserialize, Serialize, Empty, is_empty, Hash}\n};\n\nglobal PUBLIC_KEYS_LENGTH: u32 = 12;\n\npub struct PublicKeys {\n    npk_m: NpkM,\n    ivpk_m: IvpkM,\n    ovpk_m: OvpkM,\n    tpk_m: TpkM,\n}\n\npub trait ToPoint {\n    fn to_point(self) -> Point;\n}\n\npub struct NpkM {\n    inner: Point\n}\n\nimpl ToPoint for NpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for NpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\n// Note: If we store npk_m_hash directly we can remove this trait implementation. See #8091\nimpl Hash for NpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\npub struct IvpkM {\n    inner: Point\n}\n\nimpl ToPoint for IvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for IvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct OvpkM {\n    inner: Point\n}\n\nimpl Hash for OvpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\nimpl ToPoint for OvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for OvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct TpkM {\n    inner: Point\n}\n\nimpl ToPoint for TpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Empty for PublicKeys {\n    fn empty() -> Self {\n        PublicKeys {\n            npk_m: NpkM { inner: Point::empty() },\n            ivpk_m: IvpkM { inner: Point::empty() },\n            ovpk_m: OvpkM { inner: Point::empty() },\n            tpk_m: TpkM { inner: Point::empty() }\n        }\n    }\n}\n\nimpl Eq for PublicKeys {\n    fn eq(self, other: PublicKeys) -> bool {\n        (self.npk_m.inner == other.npk_m.inner)\n            & (self.ivpk_m.inner == other.ivpk_m.inner)\n            & (self.ovpk_m.inner == other.ovpk_m.inner)\n            & (self.tpk_m.inner == other.tpk_m.inner)\n    }\n}\n\nimpl PublicKeys {\n    pub fn hash(self) -> PublicKeysHash {\n        PublicKeysHash::from_field(\n            if is_empty(self) {\n            0\n        } else {\n            poseidon2_hash_with_separator(self.serialize(), GENERATOR_INDEX__PUBLIC_KEYS_HASH as Field)\n        }\n        )\n    }\n}\n\nimpl Serialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn serialize(self) -> [Field; PUBLIC_KEYS_LENGTH] {\n        [\n            self.npk_m.inner.x,\n            self.npk_m.inner.y,\n            self.npk_m.inner.is_infinite as Field,\n            self.ivpk_m.inner.x,\n            self.ivpk_m.inner.y,\n            self.ivpk_m.inner.is_infinite as Field,\n            self.ovpk_m.inner.x,\n            self.ovpk_m.inner.y,\n            self.ovpk_m.inner.is_infinite as Field,\n            self.tpk_m.inner.x,\n            self.tpk_m.inner.y,\n            self.tpk_m.inner.is_infinite as Field\n        ]\n    }\n}\n\nimpl Deserialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn deserialize(serialized: [Field; PUBLIC_KEYS_LENGTH]) -> PublicKeys {\n        PublicKeys {\n            npk_m: NpkM { inner: Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] as bool } },\n            ivpk_m: IvpkM { inner: Point { x: serialized[3], y: serialized[4], is_infinite: serialized[5] as bool } },\n            ovpk_m: OvpkM { inner: Point { x: serialized[6], y: serialized[7], is_infinite: serialized[8] as bool } },\n            tpk_m: TpkM { inner: Point { x: serialized[9], y: serialized[10], is_infinite: serialized[11] as bool } }\n        }\n    }\n}\n\n#[test]\nunconstrained fn compute_public_keys_hash() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } }\n    };\n\n    let actual = keys.hash();\n    let expected_public_keys_hash = 0x0fecd9a32db731fec1fded1b9ff957a1625c069245a3613a2538bd527068b0ad;\n\n    assert(actual.to_field() == expected_public_keys_hash);\n}\n\n#[test]\nunconstrained fn compute_empty_hash() {\n    let keys = PublicKeys::empty();\n\n    let actual = keys.hash();\n    let test_data_empty_hash = 0x0000000000000000000000000000000000000000000000000000000000000000;\n\n    assert(actual.to_field() == test_data_empty_hash);\n}\n\n#[test]\nunconstrained fn test_public_keys_serialization() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } }\n    };\n\n    let serialized = keys.serialize();\n    let deserialized = PublicKeys::deserialize(serialized);\n\n    assert_eq(keys.npk_m.inner.x, deserialized.npk_m.inner.x);\n    assert_eq(keys.npk_m.inner.y, deserialized.npk_m.inner.y);\n    assert_eq(keys.ivpk_m.inner.x, deserialized.ivpk_m.inner.x);\n    assert_eq(keys.ivpk_m.inner.y, deserialized.ivpk_m.inner.y);\n    assert_eq(keys.ovpk_m.inner.x, deserialized.ovpk_m.inner.x);\n    assert_eq(keys.ovpk_m.inner.y, deserialized.ovpk_m.inner.y);\n    assert_eq(keys.tpk_m.inner.x, deserialized.tpk_m.inner.x);\n    assert_eq(keys.tpk_m.inner.y, deserialized.tpk_m.inner.y);\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/keys/public_keys.nr"},"182":{"source":"use dep::protocol_types::{constants::GENERATOR_INDEX__INITIALIZATION_NULLIFIER, hash::poseidon2_hash_with_separator};\n\nuse crate::context::{PrivateContext, UnconstrainedContext};\nuse crate::note::{\n    lifecycle::create_note, note_getter::{get_note, view_notes},\n    note_interface::{NoteInterface, NullifiableNote}, note_viewer_options::NoteViewerOptions,\n    note_emission::NoteEmission\n};\nuse crate::oracle::notes::check_nullifier_exists;\nuse crate::state_vars::storage::Storage;\n\n// docs:start:struct\npub struct PrivateImmutable<Note, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:struct\n\nimpl<T, Context> Storage<T> for PrivateImmutable<T, Context> {}\n\nimpl<Note, Context> PrivateImmutable<Note, Context> {\n    // docs:start:new\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self { context, storage_slot }\n    }\n    // docs:end:new\n\n    // The following computation is leaky, in that it doesn't hide the storage slot that has been initialized, nor does it hide the contract address of this contract.\n    // When this initialization nullifier is emitted, an observer could do a dictionary or rainbow attack to learn the preimage of this nullifier to deduce the storage slot and contract address.\n    // For some applications, leaking the details that a particular state variable of a particular contract has been initialized will be unacceptable.\n    // Under such circumstances, such application developers might wish to _not_ use this state variable type.\n    // This is especially dangerous for initial assignment to elements of a `Map<AztecAddress, PrivateImmutable>` type (for example), because the storage slot often also identifies an actor.\n    // e.g. the initial assignment to `my_map.at(msg.sender)` will leak: `msg.sender`, the fact that an element of `my_map` was assigned-to for the first time, and the contract_address.\n    pub fn compute_initialization_nullifier(self) -> Field {\n        poseidon2_hash_with_separator(\n            [self.storage_slot],\n            GENERATOR_INDEX__INITIALIZATION_NULLIFIER\n        )\n    }\n}\n\nimpl<Note> PrivateImmutable<Note, &mut PrivateContext> {\n    // docs:start:initialize\n    pub fn initialize<let N: u32>(\n        self,\n        note: &mut Note\n    ) -> NoteEmission<Note> where Note: NoteInterface<N> + NullifiableNote {\n        // Nullify the storage slot.\n        let nullifier = self.compute_initialization_nullifier();\n        self.context.push_nullifier(nullifier);\n\n        create_note(self.context, self.storage_slot, note)\n    }\n    // docs:end:initialize\n\n    // docs:start:get_note\n    pub fn get_note<let N: u32>(self) -> Note where Note: NoteInterface<N> + NullifiableNote {\n        let storage_slot = self.storage_slot;\n        get_note(self.context, storage_slot).0\n    }\n    // docs:end:get_note\n}\n\nimpl<Note> PrivateImmutable<Note, UnconstrainedContext> {\n    // docs:start:is_initialized\n    unconstrained pub fn is_initialized(self) -> bool {\n        let nullifier = self.compute_initialization_nullifier();\n        check_nullifier_exists(nullifier)\n    }\n    // docs:end:is_initialized\n\n    // view_note does not actually use the context, but it calls oracles that are only available in private\n    // docs:start:view_note\n    unconstrained pub fn view_note<let N: u32>(self) -> Note  where Note: NoteInterface<N> + NullifiableNote {\n        let mut options = NoteViewerOptions::new();\n        view_notes(self.storage_slot, options.set_limit(1)).get(0)\n    }\n    // docs:end:view_note\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/state_vars/private_immutable.nr"},"215":{"source":"global NULLIFIER_LEAF_PREIMAGE_LENGTH: u32 = 3;\n\nuse crate::{\n    abis::{read_request::ScopedReadRequest, side_effect::Readable}, hash::compute_siloed_nullifier,\n    merkle_tree::leaf_preimage::{LeafPreimage, IndexedTreeLeafPreimage}, traits::{Empty, Hash}\n};\n\npub struct NullifierLeafPreimage {\n    nullifier : Field,\n    next_nullifier :Field,\n    next_index : u32,\n}\n\nimpl Empty for NullifierLeafPreimage {\n    fn empty() -> Self {\n        Self { nullifier: 0, next_nullifier: 0, next_index: 0 }\n    }\n}\n\nimpl Hash for NullifierLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            crate::hash::poseidon2_hash(self.serialize())\n        }\n    }\n}\n\nimpl LeafPreimage for NullifierLeafPreimage {\n    fn get_key(self) -> Field {\n        self.nullifier\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl IndexedTreeLeafPreimage for NullifierLeafPreimage {\n    fn get_key(self) -> Field {\n        self.nullifier\n    }\n\n    fn get_next_key(self) -> Field {\n        self.next_nullifier\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl Readable<ScopedReadRequest> for NullifierLeafPreimage {\n    fn assert_match_read_request(self, read_request: ScopedReadRequest) {\n        let siloed_value = compute_siloed_nullifier(read_request.contract_address, read_request.value());\n        assert_eq(self.nullifier, siloed_value, \"Value of the nullifier leaf does not match read request\");\n    }\n}\n\nimpl NullifierLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.nullifier == 0) & (self.next_nullifier == 0) & (self.next_index == 0)\n    }\n\n    pub fn serialize(self) -> [Field; NULLIFIER_LEAF_PREIMAGE_LENGTH] {\n        [self.nullifier, self.next_nullifier, self.next_index as Field]\n    }\n\n    pub fn deserialize(fields: [Field; NULLIFIER_LEAF_PREIMAGE_LENGTH]) -> Self {\n        Self { nullifier: fields[0], next_nullifier: fields[1], next_index: fields[2] as u32 }\n    }\n}\n\nimpl Eq for NullifierLeafPreimage {\n    fn eq(self, other: Self) -> bool {\n        (self.nullifier == other.nullifier)\n            & (self.next_nullifier == other.next_nullifier)\n            & (self.next_index == other.next_index)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = NullifierLeafPreimage::empty();\n    let serialized = item.serialize();\n    let deserialized = NullifierLeafPreimage::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/nullifier_leaf_preimage.nr"},"228":{"source":"use crate::{traits::{Empty, Serialize, Deserialize}, point::Point};\npub use crate::constants::KEY_VALIDATION_REQUEST_LENGTH;\n\npub struct KeyValidationRequest {\n    pk_m: Point,\n    sk_app: Field, // not a grumpkin scalar because it's output of poseidon2\n}\n\nimpl Eq for KeyValidationRequest {\n    fn eq(self, request: KeyValidationRequest) -> bool {\n        (request.pk_m.eq(self.pk_m)) & (request.sk_app.eq(self.sk_app))\n    }\n}\n\nimpl Empty for KeyValidationRequest {\n    fn empty() -> Self {\n        KeyValidationRequest { pk_m: Point::empty(), sk_app: 0 }\n    }\n}\n\nimpl Serialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn serialize(self) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {\n        [\n            self.pk_m.x,\n            self.pk_m.y,\n            self.pk_m.is_infinite as Field,\n            self.sk_app\n        ]\n    }\n}\n\nimpl Deserialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn deserialize(fields: [Field; KEY_VALIDATION_REQUEST_LENGTH]) -> Self {\n        Self { pk_m: Point { x: fields[0], y: fields[1], is_infinite: fields[2] as bool }, sk_app: fields[3] }\n    }\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/validation_requests/key_validation_request.nr"},"303":{"source":"pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self, mut result: [Field; K]) -> [Field; K] {\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    // TODO(#4394)\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array([0; K]));\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(&mut self, deserialise: fn([Field; K]) -> T, mut result: [T; C]) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr"},"305":{"source":"// general util packages/modules are usually bad practice\n// because there is no criteria for what we should not put in here.\n// Reducing the size of this package would be welcome.\n\nmod arrays;\nmod field;\nmod reader;\nmod uint256;\n\n// if predicate == true then return lhs, else return rhs\npub fn conditional_assign(predicate: bool, lhs: Field, rhs: Field) -> Field {\n    if predicate { lhs } else { rhs }\n}\n\npub fn arr_copy_slice<T, let N: u32, let M: u32>(src: [T; N], mut dst: [T; M], offset: u32) -> [T; M] {\n    let iterator_len = if N > M { M } else { N };\n    for i in 0..iterator_len {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/mod.nr"},"308":{"source":"use crate::utils::field::field_from_bytes;\nuse crate::meta::{derive_deserialize, derive_serialize};\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic\n// if a value can actually be zero. In a future refactor, we can\n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\npub trait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field {\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl Empty for u1 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u8 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u32 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u64 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for U128 {\n    fn empty() -> Self {\n        U128::from_integer(0)\n    }\n}\n\npub fn is_empty<T>(item: T) -> bool where T: Empty + Eq {\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, let N: u32>(array: [T; N]) -> bool where T: Empty + Eq {\n    array.all(|elem| is_empty(elem))\n}\n\npub trait Hash {\n    fn hash(self) -> Field;\n}\n\npub trait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u1 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u8 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u32 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u64 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for U128 {\n    fn to_field(self) -> Field {\n        self.to_integer()\n    }\n}\nimpl<let N: u32> ToField for str<N> {\n    fn to_field(self) -> Field {\n        assert(N < 32, \"String doesn't fit in a field, consider using Serialize instead\");\n        field_from_bytes(self.as_bytes(), true)\n    }\n}\n\npub trait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool {\n    fn from_field(value: Field) -> Self {\n        value as bool\n    }\n}\nimpl FromField for u1 {\n    fn from_field(value: Field) -> Self {\n        value as u1\n    }\n}\nimpl FromField for u8 {\n    fn from_field(value: Field) -> Self {\n        value as u8\n    }\n}\nimpl FromField for u32 {\n    fn from_field(value: Field) -> Self {\n        value as u32\n    }\n}\nimpl FromField for u64 {\n    fn from_field(value: Field) -> Self {\n        value as u64\n    }\n}\nimpl FromField for U128 {\n    fn from_field(value: Field) -> Self {\n        U128::from_integer(value)\n    }\n}\n\n// docs:start:serialize\n#[derive_via(derive_serialize)]\npub trait Serialize<let N: u32> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\nimpl<let N: u32> Serialize<N> for str<N> {\n    fn serialize(self) -> [Field; N] {\n        let bytes = self.as_bytes();\n        let mut fields = [0; N];\n        for i in 0..bytes.len() {\n            fields[i] = bytes[i] as Field;\n        }\n        fields\n    }\n}\n\n// docs:start:deserialize\n#[derive_via(derive_deserialize)]\npub trait Deserialize<let N: u32> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n\nimpl <let N: u32> Deserialize<N> for str<N> {\n    fn deserialize(fields: [Field; N]) -> Self {\n        str<N>::from(fields.map(|value| value as u8))\n    }\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr"},"312":{"source":"use crate::{\n    address::{aztec_address::AztecAddress, partial_address::PartialAddress, public_keys_hash::PublicKeysHash},\n    contract_class_id::ContractClassId, constants::CONTRACT_INSTANCE_LENGTH,\n    traits::{Deserialize, Hash, Serialize}\n};\n\npub struct ContractInstance {\n    salt : Field,\n    deployer: AztecAddress,\n    contract_class_id : ContractClassId,\n    initialization_hash : Field,\n    public_keys_hash : PublicKeysHash,\n}\n\nimpl Eq for ContractInstance {\n    fn eq(self, other: Self) -> bool {\n        self.public_keys_hash.eq(other.public_keys_hash)\n            & self.initialization_hash.eq(other.initialization_hash)\n            & self.contract_class_id.eq(other.contract_class_id)\n            & self.salt.eq(other.salt)\n    }\n}\n\nimpl Serialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn serialize(self) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n        [\n            self.salt,\n            self.deployer.to_field(),\n            self.contract_class_id.to_field(),\n            self.initialization_hash,\n            self.public_keys_hash.to_field()\n        ]\n    }\n}\n\nimpl Deserialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn deserialize(serialized: [Field; CONTRACT_INSTANCE_LENGTH]) -> Self {\n        Self {\n            salt: serialized[0],\n            deployer: AztecAddress::from_field(serialized[1]),\n            contract_class_id: ContractClassId::from_field(serialized[2]),\n            initialization_hash: serialized[3],\n            public_keys_hash: PublicKeysHash::from_field(serialized[4])\n        }\n    }\n}\n\nimpl Hash for ContractInstance {\n    fn hash(self) -> Field {\n        self.to_address().to_field()\n    }\n}\n\nimpl ContractInstance {\n    fn to_address(self) -> AztecAddress {\n        AztecAddress::compute(\n            self.public_keys_hash,\n            PartialAddress::compute(\n                self.contract_class_id,\n                self.salt,\n                self.initialization_hash,\n                self.deployer\n            )\n        )\n    }\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/contract_instance.nr"},"313":{"source":"use crate::{\n    address::{partial_address::PartialAddress, public_keys_hash::PublicKeysHash},\n    constants::{AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS_V1},\n    hash::poseidon2_hash_with_separator, traits::{Empty, FromField, ToField, Serialize, Deserialize},\n    utils\n};\n\n// Aztec address\npub struct AztecAddress {\n    inner : Field\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn compute(pub_keys_hash: PublicKeysHash, partial_address: PartialAddress) -> AztecAddress {\n        AztecAddress::from_field(\n            poseidon2_hash_with_separator(\n                [pub_keys_hash.to_field(), partial_address.to_field()],\n                GENERATOR_INDEX__CONTRACT_ADDRESS_V1\n            )\n        )\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys_hash() {\n    let pub_keys_hash = PublicKeysHash::from_field(1);\n    let partial_address = PartialAddress::from_field(2);\n\n    let address = AztecAddress::compute(pub_keys_hash, partial_address);\n    let expected_computed_address_from_partial_and_pubkey = 0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr"},"315":{"source":"use crate::{\n    address::{aztec_address::AztecAddress}, constants::GENERATOR_INDEX__PARTIAL_ADDRESS,\n    hash::poseidon2_hash_with_separator, traits::ToField\n};\n\n// Salted initialization hash. Used in the computation of a partial address.\npub struct SaltedInitializationHash {\n    inner: Field\n}\n\nimpl ToField for SaltedInitializationHash {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl SaltedInitializationHash {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(salt: Field, initialization_hash: Field, deployer: AztecAddress) -> Self {\n        SaltedInitializationHash::from_field(\n            poseidon2_hash_with_separator(\n                [\n            salt,\n            initialization_hash,\n            deployer.to_field()\n        ],\n                GENERATOR_INDEX__PARTIAL_ADDRESS\n            )\n        )\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/address/salted_initialization_hash.nr"},"316":{"source":"use crate::{\n    address::{salted_initialization_hash::SaltedInitializationHash, aztec_address::AztecAddress},\n    constants::GENERATOR_INDEX__PARTIAL_ADDRESS, contract_class_id::ContractClassId,\n    hash::poseidon2_hash_with_separator, traits::{ToField, Serialize, Deserialize}\n};\n\nglobal PARTIAL_ADDRESS_LENGTH: u32 = 1;\n\n// Partial address\npub struct PartialAddress {\n    inner : Field\n}\n\nimpl ToField for PartialAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<PARTIAL_ADDRESS_LENGTH> for PartialAddress {\n    fn serialize(self: Self) -> [Field; PARTIAL_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<PARTIAL_ADDRESS_LENGTH> for PartialAddress {\n    fn deserialize(fields: [Field; PARTIAL_ADDRESS_LENGTH]) -> Self {\n        PartialAddress { inner: fields[0] }\n    }\n}\n\nimpl PartialAddress {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(\n        contract_class_id: ContractClassId,\n        salt: Field,\n        initialization_hash: Field,\n        deployer: AztecAddress\n    ) -> Self {\n        PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            SaltedInitializationHash::compute(salt, initialization_hash, deployer)\n        )\n    }\n\n    pub fn compute_from_salted_initialization_hash(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash\n    ) -> Self {\n        PartialAddress::from_field(\n            poseidon2_hash_with_separator(\n                [\n            contract_class_id.to_field(),\n            salted_initialization_hash.to_field()\n        ],\n                GENERATOR_INDEX__PARTIAL_ADDRESS\n            )\n        )\n    }\n\n    pub fn to_field(self) -> Field {\n        self.inner\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.to_field() == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/address/partial_address.nr"},"320":{"source":"/// Utility function to console.log data in the acir simulator.\n/// Example:\n///   debug_log(\"blah blah this is a debug string\");\npub fn debug_log<let N: u32>(msg: str<N>) {\n    debug_log_format(msg, []);\n}\n\n/// Utility function to console.log data in the acir simulator. This variant receives a format string in which the\n/// `${k}` tokens will be replaced with the k-eth value in the `args` array.\n/// Examples:\n///   debug_log_format(\"get_2(slot:{0}) =>\\n\\t0:{1}\\n\\t1:{2}\", [storage_slot, note0_hash, note1_hash]);\n///   debug_log_format(\"whole array: {}\", [e1, e2, e3, e4]);\npub fn debug_log_format<let M: u32, let N: u32>(msg: str<M>, args: [Field; N]) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        debug_log_oracle_wrapper(msg, args)\n    };\n}\n\nunconstrained pub fn debug_log_oracle_wrapper<let M: u32, let N: u32>(msg: str<M>, args: [Field; N]) {\n    debug_log_oracle(msg, args.as_slice());\n}\n\n// WARNING: sometimes when using debug logs the ACVM errors with: `thrown: \"solver opcode resolution error: cannot solve opcode: expression has too many unknowns x155\"`\n#[oracle(debugLog)]\nunconstrained fn debug_log_oracle<let M: u32>(_msg: str<M>, args: [Field]) {}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/debug_log.nr"},"321":{"source":"use crate::{\n    abis::{\n    contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n    function_selector::FunctionSelector, log_hash::{LogHash, ScopedLogHash, ScopedEncryptedLogHash},\n    note_hash::ScopedNoteHash, nullifier::ScopedNullifier\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__OUTER_NULLIFIER,\n    GENERATOR_INDEX__VK, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__UNIQUE_NOTE_HASH,\n    MAX_ENCRYPTED_LOGS_PER_TX, MAX_NOTE_ENCRYPTED_LOGS_PER_TX\n},\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    recursion::verification_key::VerificationKey, traits::{is_empty, ToField},\n    utils::field::field_from_bytes_32_trunc\n};\nuse super::utils::field::field_from_bytes;\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = std::hash::sha256(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT]\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(function_leaf, function_leaf_index, function_leaf_sibling_path)\n}\n\nfn compute_note_hash_nonce(tx_hash: Field, note_index_in_tx: u32) -> Field {\n    // Hashing tx hash with note index in tx is guaranteed to be unique\n    poseidon2_hash_with_separator(\n        [\n        tx_hash,\n        note_index_in_tx as Field\n    ],\n        GENERATOR_INDEX__NOTE_HASH_NONCE\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, note_hash: Field) -> Field {\n    let inputs = [nonce, note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, unique_note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [\n        app.to_field(),\n        unique_note_hash\n    ],\n        GENERATOR_INDEX__SILOED_NOTE_HASH\n    )\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash, tx_hash: Field, note_index_in_tx: u32) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(tx_hash, note_index_in_tx);\n        let unique_note_hash = compute_unique_note_hash(nonce, note_hash.value());\n        compute_siloed_note_hash(note_hash.contract_address, unique_note_hash)\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [\n        app.to_field(),\n        nullifier\n    ],\n        GENERATOR_INDEX__OUTER_NULLIFIER\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn silo_encrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    // We assume contract address has already been masked\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        accumulate_sha256([log_hash.contract_address.to_field(), log_hash.log_hash.value])\n    }\n}\n\npub fn mask_encrypted_log_hash(scoped_log: ScopedEncryptedLogHash) -> AztecAddress {\n    if scoped_log.contract_address.is_zero() {\n        AztecAddress::from_field(0)\n    } else if (scoped_log.log_hash.randomness == 0) {\n        scoped_log.contract_address\n    } else {\n        AztecAddress::from_field(\n            poseidon2_hash_with_separator(\n                [scoped_log.contract_address.to_field(), scoped_log.log_hash.randomness],\n                0\n            )\n        )\n    }\n}\n\nfn compute_siloed_unencrypted_log_hash(address: AztecAddress, log_hash: Field) -> Field {\n    accumulate_sha256([address.to_field(), log_hash])\n}\n\npub fn silo_unencrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_unencrypted_log_hash(log_hash.contract_address, log_hash.value())\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn stdlib_recursion_verification_key_compress_native_vk(_vk: VerificationKey) -> Field {\n    // Original cpp code\n    // stdlib::recursion::verification_key<CT::bn254>::compress_native(private_call.vk, GeneratorIndex::VK);\n    // The above cpp method is only ever called on verification key, so it has been special cased here\n    let _hash_index = GENERATOR_INDEX__VK;\n    0\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field\n) -> Field {\n    let mut bytes: BoundedVec<u8, 160> = BoundedVec::new();\n\n    let inputs = [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..inputs.len() {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes.push(item_bytes[j]);\n        }\n    }\n\n    sha256_to_field(bytes.storage)\n}\n\npub fn silo_l2_to_l1_message(msg: ScopedL2ToL1Message, rollup_version_id: Field, chain_id: Field) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\n// Computes the final logs hash for a tx.\n// NB: this assumes MAX_ENCRYPTED_LOGS_PER_TX == MAX_UNENCRYPTED_LOGS_PER_TX\n// to avoid doubling code, since we can't define the byte len to be 32*N directly.\npub fn compute_tx_logs_hash(logs: [LogHash; MAX_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_ENCRYPTED_LOGS_PER_TX {\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn compute_tx_note_logs_hash(logs: [LogHash; MAX_NOTE_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_NOTE_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_NOTE_ENCRYPTED_LOGS_PER_TX {\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(\n    inputs: [Field; N],\n    separator: T\n) -> Field where T: ToField {\n    // We manually hash the inputs here, since we cannot express with the type system a constant size inputs array of N + 1\n    let in_len = N + 1;\n    let two_pow_64 = 18446744073709551616;\n    let iv : Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field where T: ToField {\n    let in_len = inputs.len() + 1;\n    let two_pow_64 = 18446744073709551616;\n    let iv : Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    // We manually hash the inputs here, since we cannot express with the type system a constant size inputs array of Math.ceil(N/31)\n    let mut in_len = N / 31;\n    let mut has_padding = false;\n    if N % 31 != 0 {\n        in_len += 1;\n        has_padding = true;\n    }\n\n    let two_pow_64 = 18446744073709551616;\n    let iv : Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            sponge.absorb(field_from_bytes(current_field, false));\n            current_field = [0; 31];\n        }\n    }\n    if has_padding {\n        sponge.absorb(field_from_bytes(current_field, false));\n    }\n\n    sponge.squeeze()\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\n        20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\n        40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n        60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\n        80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,\n        100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,\n        120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139,\n        140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = std::hash::sha256(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(1), EthAddress::from_field(3), 5, 2, 4);\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n        message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n        contract_address: AztecAddress::from_field(3)\n    },\n        version,\n        chainId\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr"},"322":{"source":"pub use dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse crate::{traits::{Deserialize, Empty, Hash, Serialize}, hash::poseidon2_hash};\n\nglobal POINT_LENGTH: u32 = 3;\n\nimpl Serialize<POINT_LENGTH> for Point {\n    fn serialize(self: Self) -> [Field; POINT_LENGTH] {\n        [self.x, self.y, self.is_infinite as Field]\n    }\n}\n\nimpl Hash for Point {\n    fn hash(self) -> Field {\n        poseidon2_hash(self.serialize())\n    }\n}\n\nimpl Empty for Point {\n    /// Note: Does not return a valid point on curve - instead represents an empty/\"unpopulated\" point struct (e.g.\n    /// empty/unpopulated value in an array of points).\n    fn empty() -> Self {\n        Point { x: 0, y: 0, is_infinite: false }\n    }\n}\n\nimpl Deserialize<POINT_LENGTH> for Point {\n    fn deserialize(serialized: [Field; POINT_LENGTH]) -> Point {\n        Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] as bool }\n    }\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/point.nr"},"337":{"source":"use dep::aztec::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress,\n    constants::{\n    GENERATOR_INDEX__AUTHWIT_INNER, GENERATOR_INDEX__AUTHWIT_OUTER, GENERATOR_INDEX__AUTHWIT_NULLIFIER,\n    CANONICAL_AUTH_REGISTRY_ADDRESS\n},\n    hash::poseidon2_hash_with_separator\n};\nuse dep::aztec::{context::{PrivateContext, PublicContext, gas::GasOpts}, hash::hash_args_array};\n\n/**\n * Authenticaion witness helper library\n *\n * Authentication Witness is a scheme for authenticating actions on Aztec, so users can allow third-parties\n * (e.g. protocols or other users) to execute an action on their behalf.\n *\n * This library provides helper functions to manage such witnesses.\n * The authentication witness, is some \"witness\" (data) that authenticates a `message_hash`.\n * The simplest example of an authentication witness, is a signature. The signature is the \"evidence\",\n * that the signer has seen the message, agrees with it, and has allowed it.\n * It does not need to be a signature. It could be any kind of \"proof\" that the message is allowed.\n * Another proof could be knowing some kind of secret, or having some kind of \"token\" that allows the message.\n *\n * The `message_hash` is a hash of the following structure:\n * hash(consumer, chain_id, version, inner_hash)\n * - consumer: the address of the contract that is \"consuming\" the message,\n * - chain_id: the chain id of the chain that the message is being consumed on,\n * - version: the version of the chain that the message is being consumed on,\n * - inner_hash: the hash of the \"inner\" message that is being consumed, this is the \"actual\" message or action.\n *\n * While the `inner_hash` could be anything, such as showing you signed a specific message, it will often be\n * a hash of the \"action\" to approve, along with who made the call. As part of this library, we provide a few\n * helper functions to deal with such messages.\n *\n * For example, we provide helper function that is used for checking that the message is an encoding of the current call.\n * This can be used to let some contract \"allow\" another contract to act on its behalf, as long as it can\n * show that it is acting on behalf of the contract.\n *\n * If we take a case of allowing a contract to transfer tokens on behalf of an account, the `inner_hash` can be\n * derived as:\n * inner_hash = hash(caller, \"transfer\", hash(to, amount))\n *\n * Where the `caller` would be the address of the contract that is trying to transfer the tokens, and `to` and `amount`\n * the arguments for the transfer.\n *\n * Note that we have both a `caller` and a `consumer`, the `consumer` will be the contract that is consuming the message,\n * in the case of the transfer, it would be the `Token` contract itself, while the caller, will be the actor that is\n * allowed to transfer the tokens.\n *\n *\n * The authentication mechanism works differently in public and private contexts. In private, we recall that everything\n * is executed on the user's device, so we can use `oracles` to \"ask\" the user (not contract) for information. In public\n * we cannot do this, since it is executed by the sequencer (someone else). Therefore we can instead use a \"registry\"\n * to store the messages that we have approved.\n *\n * A simple example would be a \"token\" that is being \"pulled\" from one account into another. We will first outline\n * how this would look in private, and then in public later.\n *\n * Say that a user `Alice` wants to deposit some tokens into a DeFi protocol (say a DEX).\n * `Alice` would make a `deposit` transaction, that she is executing using her account contract.\n * The account would call the `DeFi` contract to execute `deposit`, which would try to pull funds from the `Token`\n * contract. Since the `DeFi` contract is trying to pull funds from an account that is not its own, it needs to\n * convince the `Token` contract that it is allowed to do so.\n *\n * This is where the authentication witness comes in The `Token` contract computes a `message_hash` from the\n * `transfer` call, and then asks `Alice Account` contract to verify that the `DeFi` contract is allowed to\n * execute that call.\n *\n * `Alice Account` contract can then ask `Alice` if she wants to allow the `DeFi` contract to pull funds from her\n * account. If she does, she will sign the `message_hash` and return the signature to the `Alice Account` which\n * will validate it and return success to the `Token` contract which will then allow the `DeFi` contract to pull\n * funds from `Alice`.\n *\n * To ensure that the same \"approval\" cannot be used multiple times, we also compute a `nullifier` for the\n * authentication witness, and emit it from the `Token` contract (consumer).\n *\n * Note that we can do this flow as we are in private were we can do oracle calls out from contracts.\n *\n *\n *  Person          Contract              Contract               Contract\n *  Alice          Alice Account          Token                   DeFi\n *   |                  |                  |                      |\n *   | Defi.deposit(Token, 1000)           |                      |\n *   |----------------->|                  |                      |\n *   |                  | deposit(Token, 1000)                    |\n *   |                  |---------------------------------------->|\n *   |                  |                  |                      |\n *   |                  |                  | transfer(Alice, Defi, 1000)\n *   |                  |                  |<---------------------|\n *   |                  |                  |                      |\n *   |                  | Check if Defi may call transfer(Alice, Defi, 1000)\n *   |                  |<-----------------|                      |\n *   |                  |                  |                      |\n *   | Please give me AuthWit for DeFi     |                      |\n *   | calling transfer(Alice, Defi, 1000) |                      |\n *   |<-----------------|                  |                      |\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *   | AuthWit for transfer(Alice, Defi, 1000)                    |\n *   |----------------->|                  |                      |\n *   |                  | AuthWit validity |                      |\n *   |                  |----------------->|                      |\n *   |                  |                  |                      |\n *   |                  |       throw if invalid AuthWit          |\n *   |                  |                  |                      |\n *   |                  |       emit AuthWit nullifier            |\n *   |                  |                  |                      |\n *   |                  |       transfer(Alice, Defi, 1000)       |\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *   |                  |                  | success              |\n *   |                  |                  |--------------------->|\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *   |                  |                  |           deposit(Token, 1000)\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *\n *\n * If we instead were in public, we cannot do the same flow. Instead we would use an authentication registry to store\n * the messages that we have approved.\n *\n * To approve a message, `Alice Account` can make a `set_authorized` call to the registry, to set a `message_hash`\n * as authorized. This is essentially a mapping from `message_hash` to `true` for `Alice Contract`. Every account\n * has its own map in the registry, so `Alice` cannot approve a message for `Bob`.\n *\n * The `Token` contract can then try to \"spend\" the approval by calling `consume` on the registry. If the message\n * was approved, the value is updated to `false`, and we return the success flag. For more information on the\n * registry, see `main.nr` in `auth_registry_contract`.\n *\n * Person          Contract              Contract            Contract               Contract\n * Alice          Alice Account          Registry             Token                   DeFi\n *   |                  |                    |                   |                      |\n *   | Registry.set_authorized(..., true)    |                   |                      |\n *   |----------------->|                    |                   |                      |\n *   |                  | set_authorized(..., true)              |                      |\n *   |                  |------------------->|                   |                      |\n *   |                  |                    |                   |                      |\n *   |                  |         set authorized to true         |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |                      |\n *   | Defi.deposit(Token, 1000)             |                   |                      |\n *   |----------------->|                    |                   |                      |\n *   |                  | deposit(Token, 1000)                   |                      |\n *   |                  |-------------------------------------------------------------->|\n *   |                  |                    |                   |                      |\n *   |                  |                    |              transfer(Alice, Defi, 1000) |\n *   |                  |                    |                   |<---------------------|\n *   |                  |                    |                   |                      |\n *   |                  |                    | Check if Defi may call transfer(Alice, Defi, 1000)\n *   |                  |                    |<------------------|                      |\n *   |                  |                    |                   |                      |\n *   |                  |          throw if invalid AuthWit      |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |                      |\n *   |                  |           set authorized to false      |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    | AuthWit validity  |                      |\n *   |                  |                    |------------------>|                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   | transfer(Alice, Defi, 1000)\n *   |                  |                    |                   |<-------------------->|\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   | success              |\n *   |                  |                    |                   |--------------------->|\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |     deposit(Token, 1000)\n *   |                  |                    |                   |                      |\n *\n *\n * --- FAQ ---\n * Q:   Why are we using a success flag of `poseidon2_hash_bytes(\"IS_VALID()\")` instead of just returning a boolean?\n * A:   We want to make sure that we don't accidentally return `true` if there is a collision in the function selector.\n *      By returning a hash of `IS_VALID()`, it becomes very unlikely that there is both a collision and we return\n *      a success flag.\n *\n * Q:   Why are we using static calls?\n * A:   We are using static calls to ensure that the account contract cannot re-enter. If it was a normal call, it\n *      could make a new call and do a re-entry attack. Using a static ensures that it cannot update any state.\n *\n * Q:   Would it not be cheaper to use a nullifier instead of updating state in public?\n * A:   At a quick glance, a public state update + nullifier is 96 bytes, but two state updates are 128, so it would be\n *      cheaper to use a nullifier, if this is the way it would always be done. However, if both the approval and the\n *      consumption is done in the same transaction, then we will be able to squash the updates (only final tx state diff is posted to DA), and now it is cheaper.\n *\n * Q:   Why is the chain id and the version part of the message hash?\n * A:   The chain id and the version is part of the message hash to ensure that the message is only valid on a specific\n *      chain to avoid a case where the same message could be used across multiple chains.\n */\n\nglobal IS_VALID_SELECTOR = 0x47dacd73; // 4 last bytes of poseidon2_hash_bytes(\"IS_VALID()\")\n\n/**\n * Assert that `on_behalf_of` have authorized the current call with a valid authentication witness\n *\n * Computing the `inner_hash` using the `msg_sender`, `selector` and `args_hash` and then making a call out to the\n * `on_behalf_of` contract to verify that the `inner_hash` is valid.\n *\n * @param on_behalf_of The address that have authorized the current call\n */\n// docs:start:assert_current_call_valid_authwit\npub fn assert_current_call_valid_authwit(context: &mut PrivateContext, on_behalf_of: AztecAddress) {\n    let inner_hash = compute_inner_authwit_hash([context.msg_sender().to_field(), context.selector().to_field(), context.args_hash]);\n    assert_inner_hash_valid_authwit(context, on_behalf_of, inner_hash);\n}\n// docs:end:assert_current_call_valid_authwit\n\n/**\n * Assert that a specific `inner_hash` is valid for the `on_behalf_of` address\n *\n * Used as an internal function for `assert_current_call_valid_authwit` and can be used as a standalone function when\n * the `inner_hash` is from a different source, e.g., say a block of text etc.\n *\n * @param on_behalf_of The address that have authorized the current call\n * @param inner_hash The hash of the message to authorize\n */\npub fn assert_inner_hash_valid_authwit(context: &mut PrivateContext, on_behalf_of: AztecAddress, inner_hash: Field) {\n    // We perform a static call here and not a standard one to ensure that the account contract cannot re-enter.\n    let result: Field = context.static_call_private_function(\n        on_behalf_of,\n        comptime {\n        FunctionSelector::from_signature(\"verify_private_authwit(Field)\")\n    },\n        [inner_hash]\n    ).unpack_into();\n    assert(result == IS_VALID_SELECTOR, \"Message not authorized by account\");\n    // Compute the nullifier, similar computation to the outer hash, but without the chain_id and version.\n    // Those should already be handled in the verification, so we just need something to nullify, that allow same inner_hash for multiple actors.\n    let nullifier = compute_authwit_nullifier(on_behalf_of, inner_hash);\n    context.push_nullifier(nullifier);\n}\n\n/**\n * Assert that `on_behalf_of` have authorized the current call in the authentication registry\n *\n * Computing the `inner_hash` using the `msg_sender`, `selector` and `args_hash` and then making a call out to the\n * `on_behalf_of` contract to verify that the `inner_hash` is valid.\n *\n * Note that the authentication registry will take the `msg_sender` into account as the consumer, so this will only\n * work if the `msg_sender` is the same as the `consumer` when the `message_hash` was inserted into the registry.\n *\n * @param on_behalf_of The address that have authorized the current call\n */\n// docs:start:assert_current_call_valid_authwit_public\npub fn assert_current_call_valid_authwit_public(\n    context: &mut PublicContext,\n    on_behalf_of: AztecAddress\n) {\n    let inner_hash = compute_inner_authwit_hash(\n        [(*context).msg_sender().to_field(), (*context).selector().to_field(), (*context).get_args_hash()]\n    );\n    assert_inner_hash_valid_authwit_public(context, on_behalf_of, inner_hash);\n}\n// docs:end:assert_current_call_valid_authwit_public\n\n/**\n * Assert that `on_behalf_of` have authorized a speicifc `inner_hash` in the authentication registry\n *\n * Computing the `inner_hash` using the `msg_sender`, `selector` and `args_hash` and then making a call out to the\n * `on_behalf_of` contract to verify that the `inner_hash` is valid.\n *\n * Note that the authentication registry will take the `msg_sender` into account as the consumer, so this will only\n * work if the `msg_sender` is the same as the `consumer` when the `message_hash` was inserted into the registry.\n *\n * @param on_behalf_of The address that have authorized the `inner_hash`\n */\npub fn assert_inner_hash_valid_authwit_public(context: &mut PublicContext, on_behalf_of: AztecAddress, inner_hash: Field) {\n    let result: Field = context.call_public_function(\n        CANONICAL_AUTH_REGISTRY_ADDRESS,\n        comptime {\n        FunctionSelector::from_signature(\"consume((Field),Field)\")\n    },\n        [on_behalf_of.to_field(), inner_hash].as_slice(),\n        GasOpts::default()\n    ).deserialize_into();\n    assert(result == IS_VALID_SELECTOR, \"Message not authorized by account\");\n}\n\n/**\n * Compute the `message_hash` from a function call to be used by an authentication witness\n *\n * Useful for when you need a non-account contract to approve during execution. For example if you need a contract\n * to make a call to nested contract, e.g., contract A wants to exit token T to L1 using bridge B, so it needs to allow\n * B to transfer T on its behalf.\n *\n * @param caller The address of the contract that is calling the function, in the example above, this would be B\n * @param consumer The address of the contract that is consuming the message, in the example above, this would be T\n * @param chain_id The chain id of the chain that the message is being consumed on\n * @param version The version of the chain that the message is being consumed on\n * @param selector The function selector of the function that is being called\n * @param args The arguments of the function that is being called\n */\n// docs:start:compute_authwit_message_hash_from_call\npub fn compute_authwit_message_hash_from_call<let N: u32>(\n    caller: AztecAddress,\n    consumer: AztecAddress,\n    chain_id: Field,\n    version: Field,\n    selector: FunctionSelector,\n    args: [Field; N]\n) -> Field {\n    let args_hash = hash_args_array(args);\n    let inner_hash = compute_inner_authwit_hash([caller.to_field(), selector.to_field(), args_hash]);\n    compute_authwit_message_hash(consumer, chain_id, version, inner_hash)\n}\n// docs:end:compute_authwit_message_hash_from_call\n\n/**\n * Computes the `inner_hash` of the authentication witness\n *\n * This is used internally, but also useful in cases where you want to compute the `inner_hash` for a specific message\n * that is not necessarily a call, but just some \"bytes\" or text.\n *\n * @param args The arguments to hash\n */\npub fn compute_inner_authwit_hash<let N: u32>(args: [Field; N]) -> Field {\n    poseidon2_hash_with_separator(args, GENERATOR_INDEX__AUTHWIT_INNER)\n}\n\n/**\n * Computs the `authwit_nullifier` for a specific `on_behalf_of` and `inner_hash`\n *\n * Using the `on_behalf_of` and the `inner_hash` to ensure that the nullifier is siloed for a specific `on_behalf_of`.\n *\n * @param on_behalf_of The address that have authorized the `inner_hash`\n * @param inner_hash The hash of the message to authorize\n */\npub fn compute_authwit_nullifier(on_behalf_of: AztecAddress, inner_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [on_behalf_of.to_field(), inner_hash],\n        GENERATOR_INDEX__AUTHWIT_NULLIFIER\n    )\n}\n\n/**\n * Computes the `message_hash` for the authentication witness\n *\n * @param consumer The address of the contract that is consuming the message\n * @param chain_id The chain id of the chain that the message is being consumed on\n * @param version The version of the chain that the message is being consumed on\n * @param inner_hash The hash of the \"inner\" message that is being consumed\n */\npub fn compute_authwit_message_hash(consumer: AztecAddress, chain_id: Field, version: Field, inner_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [\n        consumer.to_field(),\n        chain_id,\n        version,\n        inner_hash\n    ],\n        GENERATOR_INDEX__AUTHWIT_OUTER\n    )\n}\n\n/**\n * Helper function to set the authorization status of a message hash\n *\n * Wraps a public call to the authentication registry to set the authorization status of a `message_hash`\n *\n * @param message_hash The hash of the message to authorize\n * @param authorize True if the message should be authorized, false if it should be revoked\n */\npub fn set_authorized(context: &mut PublicContext, message_hash: Field, authorize: bool) {\n    context.call_public_function(\n        CANONICAL_AUTH_REGISTRY_ADDRESS,\n        comptime {\n        FunctionSelector::from_signature(\"set_authorized(Field,bool)\")\n    },\n        [message_hash, authorize as Field].as_slice(),\n        GasOpts::default()\n    ).assert_empty();\n}\n\n/**\n * Helper function to reject all authwits\n *\n * Wraps a public call to the authentication registry to set the `reject_all` flag\n *\n * @param reject True if all authwits should be rejected, false otherwise\n */\npub fn set_reject_all(context: &mut PublicContext, reject: bool) {\n    context.call_public_function(\n        CANONICAL_AUTH_REGISTRY_ADDRESS,\n        comptime {\n        FunctionSelector::from_signature(\"set_reject_all(bool)\")\n    },\n        [context.this_address().to_field(), reject as Field].as_slice(),\n        GasOpts::default()\n    ).assert_empty();\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/authwit/src/auth.nr"},"338":{"source":"#[oracle(getAuthWitness)]\nunconstrained fn get_auth_witness_oracle<let N: u32>(_message_hash: Field) -> [Field; N] {}\n\n/**\n * Oracle wrapper to fetch an `auth_witness` for a given `message_hash` from the PXE.\n * \n * @param message_hash The hash of the message for which the `auth_witness` is to be fetched.\n * @return The `auth_witness` for the given `message_hash` as Field array.\n */\nunconstrained pub fn get_auth_witness<let N: u32>(message_hash: Field) -> [Field; N] {\n    get_auth_witness_oracle(message_hash)\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/authwit/src/auth_witness.nr"},"339":{"source":"use dep::aztec::prelude::PrivateContext;\nuse dep::aztec::protocol_types::{\n    constants::GENERATOR_INDEX__FEE_PAYLOAD, hash::poseidon2_hash_with_separator,\n    traits::{Hash, Serialize}\n};\nuse crate::entrypoint::function_call::FunctionCall;\n\n// 2 * 5 (FUNCTION_CALL_SIZE) + 2\nglobal FEE_PAYLOAD_SIZE: u32 = 12;\n\n// 2 * 98 (FUNCTION_CALL_SIZE_IN_BYTES) + 32\nglobal FEE_PAYLOAD_SIZE_IN_BYTES: u32 = 228;\n\nglobal MAX_FEE_FUNCTION_CALLS: u32 = 2;\n\n// docs:start:fee-payload-struct\npub struct FeePayload {\n  function_calls: [FunctionCall; MAX_FEE_FUNCTION_CALLS],\n  nonce: Field,\n  is_fee_payer: bool,\n}\n// docs:end:fee-payload-struct\n\nimpl Serialize<FEE_PAYLOAD_SIZE> for FeePayload {\n    // Serializes the entrypoint struct\n    fn serialize(self) -> [Field; FEE_PAYLOAD_SIZE] {\n        let mut fields: BoundedVec<Field, FEE_PAYLOAD_SIZE> = BoundedVec::new();\n        for i in 0..MAX_FEE_FUNCTION_CALLS {\n            fields.extend_from_array(self.function_calls[i].serialize());\n        }\n        fields.push(self.nonce);\n        fields.push(self.is_fee_payer as Field);\n        fields.storage\n    }\n}\n\nimpl Hash for FeePayload {\n    fn hash(self) -> Field {\n        poseidon2_hash_with_separator(self.serialize(), GENERATOR_INDEX__FEE_PAYLOAD)\n    }\n}\n\nimpl FeePayload {\n    fn to_be_bytes(self) -> [u8; FEE_PAYLOAD_SIZE_IN_BYTES] {\n        let mut bytes: BoundedVec<u8, FEE_PAYLOAD_SIZE_IN_BYTES> = BoundedVec::new();\n\n        for i in 0..MAX_FEE_FUNCTION_CALLS {\n            bytes.extend_from_array(self.function_calls[i].to_be_bytes());\n        }\n        bytes.extend_from_array(self.nonce.to_be_bytes::<32>());\n        bytes.push(self.is_fee_payer as u8);\n\n        bytes.storage\n    }\n\n    fn execute_calls(self, context: &mut PrivateContext) {\n        for call in self.function_calls {\n            if !call.target_address.is_zero() {\n                if call.is_public {\n                    context.call_public_function_with_packed_args(\n                        call.target_address,\n                        call.function_selector,\n                        call.args_hash,\n                        call.is_static,\n                        false\n                    );\n                } else {\n                    let _result = context.call_private_function_with_packed_args(\n                        call.target_address,\n                        call.function_selector,\n                        call.args_hash,\n                        call.is_static,\n                        false\n                    );\n                }\n            }\n        }\n        if self.is_fee_payer {\n            context.set_as_fee_payer();\n        }\n    }\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/authwit/src/entrypoint/fee.nr"},"340":{"source":"use dep::aztec::prelude::PrivateContext;\nuse dep::aztec::protocol_types::{\n    constants::GENERATOR_INDEX__SIGNATURE_PAYLOAD, hash::poseidon2_hash_with_separator,\n    traits::{Hash, Serialize}\n};\n\nuse crate::entrypoint::function_call::FunctionCall;\n\n// FUNCTION_CALL_SIZE * ACCOUNT_MAX_CALLS + 1\nglobal APP_PAYLOAD_SIZE: u32 = 21;\n// FUNCTION_CALL_SIZE_IN_BYTES * ACCOUNT_MAX_CALLS + 32\nglobal APP_PAYLOAD_SIZE_IN_BYTES: u32 = 424;\n\nglobal ACCOUNT_MAX_CALLS: u32 = 4;\n\n// Note: If you change the following struct you have to update default_entrypoint.ts\n// docs:start:app-payload-struct\npub struct AppPayload {\n  function_calls: [FunctionCall; ACCOUNT_MAX_CALLS],\n  nonce: Field,\n}\n// docs:end:app-payload-struct\n\nimpl Serialize<APP_PAYLOAD_SIZE> for AppPayload {\n    // Serializes the entrypoint struct\n    fn serialize(self) -> [Field; APP_PAYLOAD_SIZE] {\n        let mut fields: BoundedVec<Field, APP_PAYLOAD_SIZE> = BoundedVec::new();\n        for call in self.function_calls {\n            fields.extend_from_array(call.serialize());\n        }\n        fields.push(self.nonce);\n        fields.storage\n    }\n}\n\nimpl Hash for AppPayload {\n    fn hash(self) -> Field {\n        poseidon2_hash_with_separator(self.serialize(), GENERATOR_INDEX__SIGNATURE_PAYLOAD)\n    }\n}\n\nimpl AppPayload {\n    // Serializes the payload as an array of bytes. Useful for hashing with sha256.\n    fn to_be_bytes(self) -> [u8; APP_PAYLOAD_SIZE_IN_BYTES] {\n        let mut bytes: BoundedVec<u8, APP_PAYLOAD_SIZE_IN_BYTES> = BoundedVec::new();\n\n        for i in 0..ACCOUNT_MAX_CALLS {\n            bytes.extend_from_array(self.function_calls[i].to_be_bytes());\n        }\n        bytes.extend_from_array(self.nonce.to_be_bytes::<32>());\n\n        bytes.storage\n    }\n\n    // Executes all private and public calls\n    // docs:start:entrypoint-execute-calls\n    fn execute_calls(self, context: &mut PrivateContext) {\n        for call in self.function_calls {\n            if !call.target_address.is_zero() {\n                if call.is_public {\n                    context.call_public_function_with_packed_args(\n                        call.target_address,\n                        call.function_selector,\n                        call.args_hash,\n                        call.is_static,\n                        false\n                    );\n                } else {\n                    let _result = context.call_private_function_with_packed_args(\n                        call.target_address,\n                        call.function_selector,\n                        call.args_hash,\n                        call.is_static,\n                        false\n                    );\n                }\n            }\n        }\n    }\n    // docs:end:entrypoint-execute-calls\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/authwit/src/entrypoint/app.nr"},"343":{"source":"use dep::aztec::{\n    context::PrivateContext,\n    protocol_types::constants::{GENERATOR_INDEX__COMBINED_PAYLOAD, GENERATOR_INDEX__TX_NULLIFIER},\n    hash::poseidon2_hash_with_separator\n};\n\nuse crate::entrypoint::{app::AppPayload, fee::FeePayload};\nuse crate::auth::{IS_VALID_SELECTOR, compute_authwit_message_hash};\n\npub struct AccountActions<Context> {\n  context: Context,\n  is_valid_impl: fn(&mut PrivateContext, Field) -> bool,\n}\n\nimpl<Context> AccountActions<Context> {\n    pub fn init(context: Context, is_valid_impl: fn(&mut PrivateContext, Field) -> bool) -> Self {\n        AccountActions { context, is_valid_impl }\n    }\n}\n\n/**\n * An implementation of the Account Action struct for the private context.\n *\n * Implements logic to verify authorization and execute payloads.\n */\nimpl AccountActions<&mut PrivateContext> {\n\n    /**\n     * Verifies that the `app_hash` and `fee_hash` are authorized and then executes them.\n     *\n     * Executes the `fee_payload` and `app_payload` in sequence.\n     * Will execute the `fee_payload` as part of the setup, and then enter the app phase.\n     *\n     * @param app_payload The payload that contains the calls to be executed in the app phase.\n     * @param fee_payload The payload that contains the calls to be executed in the setup phase.\n     */\n    // docs:start:entrypoint\n    pub fn entrypoint(self, app_payload: AppPayload, fee_payload: FeePayload, cancellable: bool) {\n        let valid_fn = self.is_valid_impl;\n\n        let combined_payload_hash = poseidon2_hash_with_separator(\n            [app_payload.hash(), fee_payload.hash()],\n            GENERATOR_INDEX__COMBINED_PAYLOAD\n        );\n        assert(valid_fn(self.context, combined_payload_hash));\n\n        fee_payload.execute_calls(self.context);\n        self.context.end_setup();\n        app_payload.execute_calls(self.context);\n        if cancellable {\n            let tx_nullifier = poseidon2_hash_with_separator([app_payload.nonce], GENERATOR_INDEX__TX_NULLIFIER);\n            self.context.push_nullifier(tx_nullifier);\n        }\n    }\n    // docs:end:entrypoint\n\n    /**\n     * Verifies that the `msg_sender` is authorized to consume `inner_hash` by the account.\n     *\n     * Computes the `message_hash` using the `msg_sender`, `chain_id`, `version` and `inner_hash`.\n     * Then executes the `is_valid_impl` function to verify that the message is authorized.\n     *\n     * Will revert if the message is not authorized.\n     *\n     * @param inner_hash The hash of the message that the `msg_sender` is trying to consume.\n     */\n    // docs:start:verify_private_authwit\n    pub fn verify_private_authwit(self, inner_hash: Field) -> Field {\n        // The `inner_hash` is \"siloed\" with the `msg_sender` to ensure that only it can\n        // consume the message.\n        // This ensures that contracts cannot consume messages that are not intended for them.\n        let message_hash = compute_authwit_message_hash(\n            self.context.msg_sender(),\n            self.context.chain_id(),\n            self.context.version(),\n            inner_hash\n        );\n        let valid_fn = self.is_valid_impl;\n        assert(valid_fn(self.context, message_hash) == true, \"Message not authorized by account\");\n        IS_VALID_SELECTOR\n    }\n    // docs:end:verify_private_authwit\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/authwit/src/account.nr"},"350":{"source":"use dep::aztec::{\n    protocol_types::{traits::Serialize, constants::GENERATOR_INDEX__NOTE_NULLIFIER, hash::poseidon2_hash_with_separator},\n    macros::notes::note,\n    note::{note_header::NoteHeader, note_interface::NullifiableNote, utils::compute_note_hash_for_nullify},\n    oracle::random::random, keys::getters::get_nsk_app, context::PrivateContext\n};\n\nglobal VALUE_NOTE_LEN: u32 = 3; // 3 plus a header.\n\n// docs:start:value-note-def\n// ValueNote is used as fn parameter in the Claim contract, so it has to implement the Serialize trait.\n// It is important that the order of these annotations is preserved so that derive(Serialize) runs AFTER the note macro, which injects the note header.\n#[note]\n#[derive(Serialize)]\npub struct ValueNote {\n    value: Field,\n   // The nullifying public key hash is used with the nsk_app to ensure that the note can be privately spent.\n    npk_m_hash: Field,\n    randomness: Field,\n}\n// docs:end:value-note-def\n\nimpl NullifiableNote for ValueNote {\n    // docs:start:nullifier\n\n    fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field {\n        let secret = context.request_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n\n    // docs:end:nullifier\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let secret = get_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n}\n\nimpl ValueNote {\n    pub fn new(value: Field, npk_m_hash: Field) -> Self {\n        // We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing, so a\n        // malicious sender could use non-random values to make the note less private. But they already know the full\n        // note pre-image anyway, and so the recipient already trusts them to not disclose this information. We can\n        // therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe {\n            random()\n        };\n        let header = NoteHeader::empty();\n        ValueNote { value, npk_m_hash, randomness, header }\n    }\n}\n\nimpl Eq for ValueNote {\n    fn eq(self, other: Self) -> bool {\n        (self.value == other.value)\n            & (self.npk_m_hash == other.npk_m_hash)\n            & (self.randomness == other.randomness)\n    }\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/value-note/src/value_note.nr"},"351":{"source":"use dep::aztec::{\n    prelude::{NoteHeader, NullifiableNote, PrivateContext},\n    protocol_types::{constants::GENERATOR_INDEX__NOTE_NULLIFIER, hash::poseidon2_hash_with_separator},\n    note::utils::compute_note_hash_for_nullify, oracle::random::random, keys::getters::get_nsk_app,\n    macros::notes::partial_note\n};\n\ntrait OwnedNote {\n    fn new(amount: U128, owner_npk_m_hash: Field) -> Self;\n    fn get_amount(self) -> U128;\n}\n\n// docs:start:TokenNote\n#[partial_note(quote {amount})]\npub struct TokenNote {\n    // The amount of tokens in the note\n    amount: U128,\n    // The nullifying public key hash is used with the nsk_app to ensure that the note can be privately spent.\n    npk_m_hash: Field,\n    // Randomness of the note to hide its contents\n    randomness: Field,\n}\n// docs:end:TokenNote\n\nimpl NullifiableNote for TokenNote {\n    // docs:start:nullifier\n    fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field {\n        let secret = context.request_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n    // docs:end:nullifier\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let secret = get_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER\n        )\n    }\n}\n\nimpl Eq for TokenNote {\n    fn eq(self, other: Self) -> bool {\n        (self.amount == other.amount)\n            & (self.npk_m_hash == other.npk_m_hash)\n            & (self.randomness == other.randomness)\n    }\n}\n\nimpl OwnedNote for TokenNote {\n    fn new(amount: U128, owner_npk_m_hash: Field) -> Self {\n        // We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing, so a\n        // malicious sender could use non-random values to make the note less private. But they already know the full\n        // note pre-image anyway, and so the recipient already trusts them to not disclose this information. We can\n        // therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe {\n            random()\n        };\n        Self { amount, npk_m_hash: owner_npk_m_hash, randomness, header: NoteHeader::empty() }\n    }\n\n    fn get_amount(self) -> U128 {\n        self.amount\n    }\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-contracts/contracts/token_contract/src/types/token_note.nr"},"352":{"source":"// docs:start:token_types_all\nuse dep::aztec::{\n    note::utils::compute_note_hash_for_nullify, prelude::{NoteHeader, NullifiableNote, PrivateContext},\n    protocol_types::{constants::GENERATOR_INDEX__NOTE_NULLIFIER, hash::poseidon2_hash_with_separator},\n    macros::notes::note\n};\n\nuse dep::std::mem::zeroed;\n\n// Transparent note represents a note that is created in the clear (public execution), but can only be spent by those\n// that know the preimage of the \"secret_hash\" (the secret). This is typically used when shielding a token balance.\n// Owner of the tokens provides a \"secret_hash\" as an argument to the public \"shield\" function and then the tokens\n// can be redeemed in private by presenting the preimage of the \"secret_hash\" (the secret).\n#[note]\npub struct TransparentNote {\n    amount: Field,\n    secret_hash: Field,\n}\n\nimpl NullifiableNote for TransparentNote {\n    // Computing a nullifier in a transparent note is not guarded by making secret a part of the nullifier preimage (as\n    // is common in other cases) and instead is guarded by the functionality of \"redeem_shield\" function. There we do\n    // the following:\n    //      1) We pass the secret as an argument to the function and use it to compute a secret hash,\n    //      2) we fetch a note via the \"get_notes\" oracle which accepts the secret hash as an argument,\n    //      3) the \"get_notes\" oracle constrains that the secret hash in the returned note matches the one computed in\n    //         circuit.\n    // This achieves that the note can only be spent by the party that knows the secret.\n    fn compute_nullifier(self, _context: &mut PrivateContext, _note_hash_for_nullify: Field) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        // compute_nullifier ignores both of its parameters so we can reuse it here\n        self.compute_nullifier(zeroed(), zeroed())\n    }\n}\n\nimpl TransparentNote {\n    // CONSTRUCTORS\n    pub fn new(amount: Field, secret_hash: Field) -> Self {\n        TransparentNote { amount, secret_hash, header: NoteHeader::empty() }\n    }\n}\n\nimpl Eq for TransparentNote {\n    fn eq(self, other: Self) -> bool {\n        (self.amount == other.amount) & (self.secret_hash == other.secret_hash)\n    }\n}\n\n// docs:end:token_types_all\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-contracts/contracts/token_contract/src/types/transparent_note.nr"}}}