{"transpiled":true,"noir_version":"0.35.0+b848cc128d2dc2b461581f21a35509a1af9065a7-aarch64","name":"AccountGroup","functions":[{"name":"verify_private_authwit","is_unconstrained":false,"custom_attributes":["private","view"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"inner_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":"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","brillig_names":["get_auth_witness","pack_returns_oracle_wrapper","directive_integer_quotient","directive_invert"]},{"name":"entrypoint","is_unconstrained":false,"custom_attributes":["private"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"app_payload","type":{"fields":[{"name":"function_calls","type":{"kind":"array","length":4,"type":{"fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"protocol_types::abis::function_selector::FunctionSelector"}},{"name":"target_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_public","type":{"kind":"boolean"}},{"name":"is_static","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::entrypoint::function_call::FunctionCall"}}},{"name":"nonce","type":{"kind":"field"}}],"kind":"struct","path":"authwit::entrypoint::app::AppPayload"},"visibility":"private"},{"name":"fee_payload","type":{"fields":[{"name":"function_calls","type":{"kind":"array","length":2,"type":{"fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"protocol_types::abis::function_selector::FunctionSelector"}},{"name":"target_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_public","type":{"kind":"boolean"}},{"name":"is_static","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::entrypoint::function_call::FunctionCall"}}},{"name":"nonce","type":{"kind":"field"}},{"name":"is_fee_payer","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::entrypoint::fee::FeePayload"},"visibility":"private"},{"name":"cancellable","type":{"kind":"boolean"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":"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uTtHuTtHuTtHuTtHuTtHuTtHuTtHuTtHuTtHuTtHuTtHuTtHuTtHuTtHuTtHuTtHuTtHuTtHuTtHuTtHuTtHuTtHuTtHuTtHuTtHuTtHuTtHuTtHuTtHuTtHuTtHuTtHuTtHuTtHuTtHuTtHuTtHuTtHuTtHuTtHuTtHuTtHuTtHuTtHuTtHuTtHuTtHuTtHuTtHuTtHuTtHuTtHuTtHuTtHuTtHuTtHuTtHuTtHuTtHuTtHuTtHuTtHuTtHuTtHuTtHuTtHuTtHuTtHuTtHubtAubtAubtAubtAubs4SFkcKHcXKHcXKHcXKHcXKHcXKHcXKHcXKHcXKHcXKHcXKHcXKHcXKHcXKHcXKHcXKHcXKHcXKHcXKHcXKHcXKHcXKHcXKHcXKHcXKHcXKHcXKHcXKHcXKHcXKHcXKHcXKHcXKHcXKHcXKHcXKHcXKHcXKHcXKHcXKHcXKHcXKHcXKHcXKHcXKHcXKHcXKHcXKHcXKHcXKHcXKHcXKHcXKHcXKHcXKHcXKHcXKHcXKHcXKHcXKHcXKHcXKHcXKHcXKHcXKHcXKHcXKHcXKHcXKHcXKHcXKHcXKHcXKHcXKHcXKHcXKHcXKHcXKHcXKHcXKHcXKHcXKHcXKHcXKHcXKHcXKHcXKHcXKHcXKHcXKHcXKHcXKHcXKHcXKHcXKHeXKHeXKHeXKHeXKHeXBymLE+XuEuXuEuXuEuXuEuXuEuXuEuXuEuXuEuXuEuXuEuXuEuXuEuXuEuXuEuXuEuXuEuXuEuXuEuXuEuXuEuXuEuXuEuXuEuXuEuXuEuXuEuXuEuXuEuXuEuXuEuXuEuXuEuXuEuXuEuXuEuXuEuXuEuXuEuXuEuXuEuXuEuXuEuXuEuXuEuXuEuXuEuXuEuXuEuXuEuXuEuXuEuXuEuXuEuXuEuXuEuXuEuXuEuXuEuXuEuXuEuXuEuXuEuXuEuXuEuXuEuXuEuXuEuXuEuXuEuXuEuXuEuXuEuXuEuXuEuXuEuXuEuXuEuXuEuXuEuXuEuXuEuXuEuXuEuXuEuXuEuXuEuXuEuXuEuXuEuXuEuXuEuXuEuXuEuXuEuXuCuXuCuXuCuXuCuXu6iBlcaHcXaHcXaHcXaHcXaHcXaHcXaHcXaHcXaHcXaHcXaHcXaHcXaHcXaHcXaHcXaHcXaHcXaHcXaHcXaHcXaHcXaHcXaHcXaHcXaHc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FJgfFJgfFJgfFJgfFJgfFJgfFJgfFJgfVJgfVJgfVJgfVJgf1IOVzwrzgwrzgwrzgwrzgwrzgwrzgwrzgwrzgwrzgwrzgwrzgwrzgwrzgwrzgwrzgwrzgwrzgwrzgwrzgwrzgwrzgwrzgwrzgwrzgwrzgwrzgwrzgwrzgwrzgwrzgwrzgwrzgwrzgwrzgwrzgwrzgwrzgwrzgwrzgwrzgwrzgwrzgwrzgwrzgwrzgwrzgwrzgwrzgwrzgwrzgwrzgwrzgwrzgwrzgwrzgwrzgwrzgwrzgwrzgwrzgwrzgwrzgwrzgwrzgwrzgwrzgwrzgwrzgwrzgwrzgwrzgwrzgwrzgwrzgwrzgwrzgwrzgwrzgwrzgwrzgwrzgwrzgwrzgwrzgwrzgwrzgwrzgwrzgwrzgwrzgwrzgwrzgwrzgwrzgwrzgwbzgwbzgwbzgwbzg3aw8tlgftBgftBgftBgftBgftBgftBgftBgftBgftBgftBgftBgftBgftBgftBgftBgftBgftBgftBgftBgftBgftBgftBgftBgftBgftBgftBgftBgftBgftBgftBgftBgftBgftBgftBgftBgftBgftBgftBgftBgftBgftBgftBgftBgftBgftBgftBgftBgftBgftBgftBgftBgftBgftBgftBgftBgftBgftBgftBgftBgftBgftBgftBgftBgftBgftBgftBgftBgftBgftBgftBgftBgftBgftBgftBgftBgftBgftBgftBgftBgftBgftBgftBgftBgftBgftBgftBgftBgftBgftBgftBgftBgftBgftBgftBgftBhftBhftBhftBhftAPVj47zA86zA86zA86zA86zA86zA86zA86zA86zA86zA86zA86zA86zA86zA86zA86zA86zA86zA86zA86zA86zA86zA86zA86zA86zA86zA86zA86zA86zA86zA86zA86zA86zA86zA86zA86zA86zA86zA86zA86zA86zA86zA86zA86zA86zA86zA86zA86zA86zA86zA86zA86zA86zA86zA86zA86zA86zA86zA86zA86zA86zA86zA86zA86zA86zA86zA86zA86zA86zA86zA86zA86zA86zA86zA86zA86zA86zA86zA86zA86zA86zA86zA86zA86zA86zA86zA86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DyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDyrMDxrMDxrMDxrMDxrMD9rBymeD+UGD+UGD+UGD+UGD+UGD+UGD+UGD+UGD+UGD+UGD+UGD+UGD+UGD+UGD+UGD+UGD+UGD+UGD+UGD+UGD+UGD+UGD+UGD+UGD+UGD+UGD+UGD+UGD+UGD+UGD+UGD+UGD+UGD+UGD+UGD+UGD+UGD+UGD+UGD+UGD+UGD+UGD+UGD+UGD+UGD+UGD+UGD+UGD+UGD+UGD+UGD+UGD+UGD+UGD+UGD+UGD+UGD+UGD+UGD+UGD+UGD+UGD+UGD+UGD+UGD+UGD+UGD+UGD+UGD+UGD+UGD+UGD+UGD+UGD+UGD+UGD+UGD+UGD+UGD+UGD+UGD+UGD+UGD+UGD+UGD+UGD+UGD+UGD+UGD+UGD+UGD+UGD+UGD+UGD+UGH+UGH+UGH+UGH+UE/WPnsMD/oMD/oMD/oMD/oMD/oMD/oMD/oMD/oMD/oMD/oMD/oMD/oMD/oMD/oMD/oMD/oMD/oMD/oMD/oMD/oMD/oMD/oMD/oMD/oMD/oMD/oMD/oMD/oMD/oMD/oMD/oMD/oMD/oMD/oMD/oMD/oMD/oMD/oMD/oMD/oMD/oMD/oMD/oMD/oMD/oMD/oMD/oMD/oMD/oMD/oMD/oMD/oMD/oMD/oMD/oMD/oMD/oMD/oMD/oMD/oMD/oMD/oMD/oMD/oMD/oMD/oMD/oMD/oMD/oMD/oMD/oMD/oMD/oMD/oMD/oMD/oMD/oMD/oMD/oMD/oMD/oMD/oMD/oMD/oMD/oMD/oMD/oMD/oMD/oMD/oMD/oMD/oMD/oMD/oMD8YMD8YMD8YMD8YMD8YByufA+YHA+YHA+YHA+YHA+YHA+YHA+YHA+YHA+YHA+YHA+YHA+YHA+YHA+YHA+YHA+YHA+YHA+YHA+YHA+YHA+YHA+YHA+YHA+YHA+YHA+YHA+YHA+YHA+YHA+YHA+YHA+YHA+YHA+YHA+YHA+YHA+YHA+YHA+YHA+YHA+YHA+YHA+YHA+YHA+YHA+YHA+YHA+YHA+YHA+YHA+YHA+YHA+YHA+YHA+YHA+YHA+YHA+YHA+YHA+YHA+YHA+YHA+YHA+YHA+YHA+YHA+YHA+YHA+YHA+YHA+YHA+YHA+YHA+YHA+YHA+YHA+YHA+YHA+YHA+YHA+YHA+YHA+YHA+YHA+YHA+YHA+YHA+YHA+YHA+YHA+YHA+YHA+YHA+YHA+YHE+YHE+YHE+YHE+YH82Dlc8L8YML8YML8YML8YML8YML8YML8YML8YML8YML8YML8YML8YML8YML8YML8YML8YML8YML8YML8YML8YML8YML8YML8YML8YML8YML8YML8YML8YML8YML8YML8YML8YML8YML8YML8YML8YML8YML8YML8YML8YML8YML8YML8YML8YML8YML8YML8YML8YML8YML8YML8YML8YML8YML8YML8YML8YML8YML8YML8YML8YML8YML8YML8YML8YML8YML8YML8YML8YML8YML8YML8YML8YML8YML8YML8YML8YML8YML8YML8YML8YML8YML8YML8YML8YML8YML8YML8YML8YML8YML8YML8YML8YML8YML8YML8YMH8YMH8YMH8YMH8YB2sfC6YHyyYHyyYHyyYHyyYHyyYHyyYHyyYHyyYHyyYHyyYHyyYHyyYHyyYHyyYHyyYHyyYHyyYHyyYHyyYHyyYHyyYHyyYHyyYHyyYHyyYHyyYHyyYHyyYHyyYHyyYHyyYHyyYHyyYHyyYHyyYHyyYHyyYHyyYHyyYHyyYHyyYHyyYHyyYHyyYHyyYHyyYHyyYHyyYHyyYHyyYHyyYHyyYHyyYHyyYHyyYHyyYHyyYHyyYHyyYHyyYHyyYHyyYHyyYHyyYHyyYHyyYHyyYHyyYHyyYHyyYHyyYHyyYHyyYHyyYHyyYHyyYHyyYHyyYHyyYHyyYHyyYHyyYHyyYHyyYHyyYHyyYHyyYHyyYHyyYHyyYHyyYHyyYHyyYHyyYH2yYH2yYH2yYH2yYH+yDlc8N84MN84MN84MN84MN84MN84MN84P9ZD+oh728sx7Vf6rntVef1z+3l7cet9ev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c6alJy9dfddW50xLa860tOZMS2vOtLTGTEt5jJmW8hgzLeUxZlrKY8y0lIfPaXXMtJTHmGkpjzHTUh5jpqU85kxLH2pJ9kWrc6alD7Uk+6LVOdPSh1qSfdHqnGlJ5kxLMmdakjnTEnpX92NbRS/qfnCrc6Yl9IruB7c6Z1r6WLu877c6Z1r6WLu877c6Z1r6WLu877c6Z1qas8s75+zyzjm7vHPOLu+cs8s75+zyzjm7vHPOLu+cs8s75+zyzjm7vHPOLu+cs8s75+zyzjm7vHPOLu+cs8s75+zyzjm7vHPOLu+cs8s75+zyzjm7vHPOLu+cs8s75+zyzjm7vHPOLu+cs8s75+zyzjm7vHPOLu+cs8s75+zyzjm7vHPOLu+cs8s75+zyzjm7vHPOLu+cs8s75+zyzjm7vHPOLu+cs8s75+zyzjm7vHPOLu+cs8s75+zyzjm7vHPOLu+cs8s75+zyzjm7vHPOLu+cs8s75+zyzjm7vHPOLu+cs8s75+zyzjm7vHPOLu+cs8s75+zyzjm7vHPOLu+cs8s75+zyrjm7vGvOLu+as8u75uzyrsPntDpmWqo5u7xrzi7vmrPLu+bs8q45u7xrzi7vmrPLu+bs8q45u7xrzi7vmrPLu+bs8q45u7xrzi7vmrPLu+bs8q45u7xrzi7vmrPLu+bs8q45u7xrzi7vmrPLu+bs8q45u7xrzi7vmrPLu+bs8q45u7xrzi7vmrPLu+bs8q45u7xrzi7vmrPLu+bs8q45u7xrzi7vmrPLu+bs8q45u7xrzi7vmrPLu+bs8q45u7xrzi7vmrPLu+bs8q45u7xrzi7vmrPLu+bs8q45u7xrzi7vmrPLu+bs8q45u7xrzi7vmrPLu+bs8q45u7xrzi7vmrPLu+bs8q45u7xrzi7vmrPLu+bs8q45u7xrzi7vmrPLu+bs8q45u7xrzi7vmrPLu+bs8q4Ptct76bq16j+2+pGmpYtW/bmtWsZL7S5y0apErn5581iyvm/1j/Jj7/ITXf6K+lZ++4/l197l997lr63Lf/YO618rP9v05c2z065OnXYL2Y7825B99g7r92xV57Rqc1r1Oa2iJ4pfbfXuRL/Q08djW0VPKo9tFT3VPLZV9AT0yFb7+FDT0v1WP9S0dL/VDzUt3W/1Q01L91v1Oa2OmZb6GDMt9TFmWupjzLTUx5xpSeZMSzJnWpI505LMmZaevcP6PVudMy3JnGlJ5kxLMmdakjnTks6ZlnTOtKRzpiWdMy09e4f1e7Y6Z1rSOdOSzpmWdM60pHOmJZszLdmcacnmTEs2Z1p69g7r92x1zrRkc6YlmzMt2ZxpyeZMSz5nWvI505LPmZZ8zrT07B3W79nqnGnJ50xLPmda8jnTks+ZlmLOtBRzpqWYMy3FnGnp2Tus37PVOdNSzJmWYs60FHOmpZgzLeWcaSnnTEs5Z1rKOdPSs3dYv2erc6alnDMt5ZxpKedMSzlnWqo501LNmZZqzrRUc6alZ++wfs9W50xLNWdaqjnTUs2ZlmrOtNRzpqWeMy31nGmp50xL7B3Wj211zrTE3o392FbnTEvsnduPbXXOtPSxdnnfb3XOtPSxdnnfb3XOtPSxdnnfb3XOtDRnl3fP2eXdc3Z595xd3mvOLu81Z5f3mrPLe83Z5b0On9PqmGlpzdnlvebs8l5zdnmvObu815xd3mvOLu81Z5f3mrPLe83Z5b3m7PJec3Z5rzm7vNecXd5rzi7vNWeX95qzy3vN2eW95uzyXnN2ea85u7zXnF3ea84u7zVnl/eas8t7zdnlvebs8l5zdnmvD7XL+0yeW6v+Y6s+p9UnT0uHvbyzHtVXrS7v25svX32/VbXofnl3S6nvX/5Htzmq2xrVbY/qdk3q9tmrvd+5WxnVrY7q1kZ166O6HTVLPXnZ91lz3Mov/VO3f9RTsHoaVs9i1fP7C6hLXr5Dpdyu6qms26v7++r9az0Cq0dh9RisHofVE7B6ElZPweppWD2LVc+TV95eni/yyfncx62e84bbK8dHYfUYrB6H1ROwemDzc8Lm53xuPqvq7Sa8lvzp3+uV947Ql1+WnP9d+cPlUa6ty69j7/Jl7/J17/KNFSVP3nF5XU/A6oGdigp2KirYrZzXlyNKqd9+5r/85N6ryNpeAsK6/Icf4deXEj72I+TtP0Lf/iPs7T/C3/4j4u0/It/+I+rtP6Lf/iNgN2oX7EbAYs925z/gbThasn74513s2e6yfNu7fN+7/Ni7/Ny7/Nq7fPYdlcvy2XdU7pdfx8G+o3JZvpCmgLMehdWDuudx1uOwelD3PM56UPc8znpQ9zzOelD3PM56nvzr0fu/vqlDDlg9qF+PnvWgfj161oP69ehZj8PqQf169KwnYfUUrJ6G1YO6a1WHou5anfXA8llh+aywfFZYPissnxU2PytsflZYPitsfjbY/GywfDZYPhvs/saTjfZ1PbD7GwbLZ4Pls8Hubxgsnx2Wzw7LZ4fls8Pm59+nnw+uBzY/O+z+hsPubzhsfmbxyToCdn8jYPkcsHwOWD4HLJ8Dls8By+eA5XPA8jlg83PC5ueE/f1Gwv5+I2H3N36fTz64Htj9DRafPOuB3d9I2P2NhOVzwfK5YPNzwebngs3Pv28KH1wPbH4u2PxcsPm5YPNzwe5vNOz+RsPyuWH53LB8blg+NyyfGzY/N2x+blg+N2x+XrD5ecHyecHyecHub/w+xHxwPbD7GwuWzwuWzwt2f2Ox8lkOVj7LwcpnOVj5LAdrfpaDNT/LwZqf5WDd35CDdX9DDtb8LAfr/oYI6/6GwPygwPygwPygwPygwPygwPygwPygwPygCGx+Vtj8rKy/3xBl/f2GKOv+hjz5icvX9bDubwjMDwrMD4qy7m8IzA8KzA8KzA8KzA+Kwebn3/eDD64HNj8bbH422PxssPnZYPc3HHZ/A+YHBeYHBeYHBeYHBeYHhfX4xbMe2PwM84PisPk5YPMzzA8KzA9KwO5v/L4ffHA9sPsbAcvngOVzwO5vwPygwPygsB6/eNYDy2fW4xfPemDzM+vxi2c9sPsbCbu/kbD5OWH3Nwp2fwPmBwXmBwXmBwXmBwXmBwXmBwXmBwXmB6Vg83PD5ud+7t9vqOVLPeoifzpfvPLeedb88ubZ+a3b9drLc+n6+upc/q3Z+tqqzmnV5rTqc1qNOa3mnFZrTqs9p9U1ptUnP4j1XVuF/bXrgv21K0zzCkzzCkzzCkzzCkzzCkzzymLdbdSDdbdRYU8DVdjTQBX2NFA9WPmssKeBKuxpoAp7GqjCngaqMM2rMM2rAstngeWzwPJZYPkssHwWWD4LLJ8Fls+wp4Eq7GmgCtO8CtO8CtO8CtO8CtO8CtO8CtO8CtO8qrB8Nlg+GyyfDZbPsKeBKuxpoAp7GqjCngaqsKeBKuxpoArTvArTvOqwfHZYPjssnx2Wzw7LZ5jmVZjmVYflM+xpoAp7GqgGLJ8Dls8wzaswzaswzaswzaswzaswzasBy+eE5TPsaaAKexqowp4GqrCngSrsaaAKexqowp4GqrCngSpM8ypM82rB8rlg+VywfC5YPhcsnwuWzwXL54LlM+xpoAp7Gqg2LJ8bls8Ny+eG5XPD8hn2NFCFPQ1UG5bPDcvnBctnmB9UmB9UmB9UmB9UmB9UmB9UmB9UmB9UmB80mB80mB80mB80mB+0g5XPBvODBvODBvODBvODBvODBvODBvODBvODBvODBvODBvODBvODBvODBvODBvODBvODBvODBvODBvODBvODBvODBvODBvODBvODBvODBvODBvODBvODBvODBvODBvODBvODBvODBvODBvODBvODBvODBvODBvODBvODBvODBvODBvODBvODBvODBvODBvODBvODBvODBvODBvODBvODBvODBvODBvODBvODBvODBvODBvODBvODBvODBvODBvODBvODBvODBvODBvODBvODBvODBvODBvODBvODBvODBvODBvODBvODBvODBvODBvODBvODBvODBvODBvODBvODBvODBvODBvODBvODBvODBvODBvODBvODBvODBvODBvODDvODDvODDvODDvODfrDy2WF+0GF+0GF+0GF+0GF+0GF+0GF+0GF+0GF+0GF+0GF+0GF+0GF+0GF+0GF+0GF+0GF+0GF+0GF+0GF+0GF+0GF+0GF+0GF+0GF+0GF+0GF+0GF+0GF+0GF+0GF+0GF+0GF+0GF+0GF+0GF+0GF+0GF+0GF+0GF+0GF+0GF+0GF+0GF+0GF+0GF+0GF+0GF+0GF+0GF+0GF+0GF+0GF+0GF+0GF+0GF+0GF+0GF+0GF+0GF+0GF+0GF+0GF+0GF+0GF+0GF+0GF+0GF+0GF+0GF+0GF+0GF+0GF+0GF+0GF+0GF+0GF+0GF+0GF+0GF+0GF+0GF+0GF+0GF+0GF+0GF+0GF+0GF+0GF+0GF+0GF+0GF+0GF+0GF+0GF+MGB+MGB+MGB+MGB+MA5WPgfMDwbMDwbMDwbMDwbMDwbMDwbMDwbMDwbMDwbMDwbMDwbMDwbMDwbMDwbMDwbMDwbMDwbMDwbMDwbMDwbMDwbMDwbMDwbMDwbMDwbMDwbMDwbMDwbMDwbMDwbMDwbMDwbMDwbMDwbMDwbMDwbMDwbMDwbMDwbMDwbMDwbMDwbMDwbMDwbMDwbMDwbMDwbMDwbMDwbMDwbMDwbMDwbMDwbMDwbMDwbMDwbMDwbMDwbMDwbMDwbMDwbMDwbMDwbMDwbMDwbMDwbMDwbMDwbMDwbMDwbMDwbMDwbMDwbMDwbMDwbMDwbMDwbMDwbMDwbMDwbMDwbMDwbMDwbMDwbMDwbMDwbMDwbMDwbMDwbMDwbMDwbMDwbMDwbMDwbMDybMDybMDybMDybMD+bByueE+cGE+cGE+cGE+cGE+cGE+cGE+cGE+cGE+cGE+cGE+cGE+cGE+cGE+cGE+cGE+cGE+cGE+cGE+cGE+cGE+cGE+cGE+cGE+cGE+cGE+cGE+cGE+cGE+cGE+cGE+cGE+cGE+cGE+cGE+cGE+cGE+cGE+cGE+cGE+cGE+cGE+cGE+cGE+cGE+cGE+cGE+cGE+cGE+cGE+cGE+cGE+cGE+cGE+cGE+cGE+cGE+cGE+cGE+cGE+cGE+cGE+cGE+cGE+cGE+cGE+cGE+cGE+cGE+cGE+cGE+cGE+cGE+cGE+cGE+cGE+cGE+cGE+cGE+cGE+cGE+cGE+cGE+cGE+cGE+cGE+cGE+cGE+cGE+cGE+cGE+cGE+cGE+cGE+cGE+cGC+cGC+cGC+cGC+cE6WPlcMD9YMD9YMD9YMD9YMD9YMD9YMD9YMD9YMD9YMD9YMD9YMD9YMD9YMD9YMD9YMD9YMD9YMD9YMD9YMD9YMD9YMD9YMD9YMD9YMD9YMD9YMD9YMD9YMD9YMD9YMD9YMD9YMD9YMD9YMD9YMD9YMD9YMD9YMD9YMD9YMD9YMD9YMD9YMD9YMD9YMD9YMD9YMD9YMD9YMD9YMD9YMD9YMD9YMD9YMD9YMD9YMD9YMD9YMD9YMD9YMD9YMD9YMD9YMD9YMD9YMD9YMD9YMD9YMD9YMD9YMD9YMD9YMD9YMD9YMD9YMD9YMD9YMD9YMD9YMD9YMD9YMD9YMD9YMD9YMD9YMD9YMD9YMD9YMD9YMD9YMD9YMD9YMD9YMD9YMD/YMD/YMD/YMD/YMD/YByufG+YHG+YHG+YHG+YHG+YHG+YHG+YHG+YHG+YHG+YHG+YHG+YHG+YHG+YHG+YHG+YHG+YHG+YHG+YHG+YHG+YHG+YHG+YHG+YHG+YHG+YHG+YHG+YHG+YHG+YHG+YHG+YHG+YHG+YHG+YHG+YHG+YHG+YHG+YHG+YHG+YHG+YHG+YHG+YHG+YHG+YHG+YHG+YHG+YHG+YHG+YHG+YHG+YHG+YHG+YHG+YHG+YHG+YHG+YHG+YHG+YHG+YHG+YHG+YHG+YHG+YHG+YHG+YHG+YHG+YHG+YHG+YHG+YHG+YH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pZgzLT15L8+7tjpnWoo501LMmZZizrQUc6alnDMt5ZxpKedMSzlnWnrylqx3bXXOtJRzpqWcMy3lnGkp50xLNWdaqjnTUs2ZlmrOtPTknXXv2uqcaanmTEs1Z1qqOdNSzZmWes601HOmpZ4zLfWcaenJGyTftdU501LPmZZ6zrTUc6alnjMtrTnT0pozLa0509KaMy09eZ/ru7Y6Z1pac6alNWdaWnOmpTVmWqpjzLRUx5hpqY4x01IdY6alOnxOq2OmpTrGTEt1jJmW6hgzLdWHWpJ9v9UPtST7otU509KHWpJ90eqcaelDLcm+aHXOtCRzpiWZMy2hd3U/uNU50xJ6S/eDW50zLcH3cz+01TnT0sfa5X2/1TnT0sfa5X2/1TnT0pxd3jVnl3fN2eVdc3Z515xd3jVnl3fN2eVdc3Z515xd3jVnl3fN2eVdc3Z515xd3jVnl3fN2eVdc3Z515xd3jVnl3fN2eVdc3Z515xd3jVnl3fN2eVdc3Z515xd3jVnl3fN2eVdc3Z515xd3jVnl3fN2eVdc3Z515xd3jVnl3fN2eVdc3Z515xd3jVnl3fN2eVdc3Z515xd3jVnl3fN2eVdc3Z515xd3jVnl3fN2eVdc3Z515xd3jVnl3fN2eVdc3Z515xd3jVnl3fN2eVdc3Z515xd3jVnl3fN2eVdc3Z515xd3jVnl3fN2eVdc3Z515xd3jVnl3fN2eVdc3Z515xd3jVnl3fN2eVdc3Z595xd3j1nl3fP2eXdc3Z59+FzWh0zLfWcXd49Z5d3z9nl3XN2efecXd49Z5d3z9nl3XN2efecXd49Z5d3z9nl3XN2efecXd49Z5d3z9nl3XN2efecXd49Z5d3z9nl3XN2efecXd49Z5d3z9nl3XN2efecXd49Z5d3z9nl3XN2efecXd49Z5d3z9nl3XN2efecXd49Z5d3z9nl3XN2efecXd49Z5d3z9nl3XN2efecXd49Z5d3z9nl3XN2efecXd49Z5d3z9nl3XN2efecXd49Z5d3z9nl3XN2efecXd49Z5d3z9nl3XN2efecXd49Z5d3z9nl3XN2efecXd49Z5d3z9nl3XN2efecXd49Z5d3z9nl3XN2efecXd49Z5d3z9nl3XN2efecXd49Z5d3z9nl3c/e5W0ZL7W7yEWrErn65c1jyfq+1T/K173LN3T5K+pb+e0/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eo7pl4JoSc16kumXgmhJzXqW6ZeCaEm9aEm9aEm9aEm9YEmtByyp9YAltR6wpNYDltR6wJJaD1hS6wFLaj1gSa0HLKn1oCW10JJaaEkttKQWWlILLamFltRCS2qhJbXQklpoSa20pFZaUistqZWW1EpLaqUltdKSWmlJrbSkVlpSGy2pjZbURktqoyW10ZLaaElttKQ2WlIbLamNltROS2qnJbXTktppSe20pHZaUjstqZ2W1E5LaqclddCSOmhJHbSkDlpSBy2pg5bUQUvqoCV10JI6aEmdtKROWlInLamTltRJS+qkJTXNKCrNKCrNKCrNKCrNKCrNKCrNKCrNKCrNKCrNKCrNKCrNKCrNKCrNKCrNKCrNKCrNKCrNKCrNKCrNKCrNKCrNKCrNKCrNKCrNKCrNKCrNKCrNKCrNKCrNKCrNKCrNKCrNKCrNKBrNKBrNKBrNKBrNKNoBS2qjGUWjGUWjGUWjGUWjGUWjGUWjGUWjGUWjGUWjGUWjGUWjGUWjGUWjGUWjGUWjGUWjGUWjGUWjGUWjGUWjGUWjGUWjGUWjGUWjGUWjGUWjGUWjGUWjGUWjGUWjGUWjGUWjGUWjGUWjGUWjGUWjGUWjGUWjGUWjGUWjGUWjGUWjGUWjGUWjGUWjGUWjGUWjGUWjGUWjGUWjGUWjGUWjGUWjGUWjGUWjGUWjGUWjGUWjGUWjGUWjGUWjGUWjGUWjGUWjGUWjGUWjGUWjGUWjGUWjGUWjGUWjGUWjGUWjGUWjGUWjGUWjGUWjGUWjGUWjGUWjGUWjGUWjGUWjGUWjGUWjGUWjGUWjGUWjGUWjGUWjGUWjGUWjGUWjGUWjGUWnGUWnGUWnGUWnGUU/YEntNKPoNKPoNKPoNKPoNKPoNKPoNKPoNKPoNKPoNKPoNKPoNKPoNKPoNKPoNKPoNKPoNKPoNKPoNKPoNKPoNKPoNKPoNKPoNKPoNKPoNKPoNKPoNKPoNKPoNKPoNKPoNKPoNKPoNKPoNKPoNKPoNKPoNKPoNKPoNKPoNKPoNKPoNKPoNKPoNKPoNKPoNKPoNKPoNKPoNKPoNKPoNKPoNKPoNKPoNKPoNKPoNKPoNKPoNKPoNKPoNKPoNKPoNKPoNKPoNKPoNKPoNKPoNKPoNKPoNKPoNKPoNKPoNKPoNKPoNKPoNKPoNKPoNKPoNKPoNKPoNKPoNKPoNKPoNKPoNKPoNKPoNKPoNKPoNKPoNKPoNKPoNKPoNKPoNKPoNKMYNKMYNKMYNKMYNKMYByypg2YUg2YUg2YUg2YUg2YUg2YUg2YUg2YUg2YUg2YUg2YUg2YUg2YUg2YUg2YUg2YUg2YUg2YUg2YUg2YUg2YUg2YUg2YUg2YUg2YUg2YUg2YUg2YUg2YUg2YUg2YUg2YUg2YUg2YUg2YUg2YUg2YUg2YUg2YUg2YUg2YUg2YUg2YUg2YUg2YUg2YUg2YUg2YUg2YUg2YUg2YUg2YUg2YUg2YUg2YUg2YUg2YUg2YUg2YUg2YUg2YUg2YUg2YUg2YUg2YUg2YUg2YUg2YUg2YUg2YUg2YUg2YUg2YUg2YUg2YUg2YUg2YUg2YUg2YUg2YUg2YUg2YUg2YUg2YUg2YUg2YUg2YUg2YUg2YUg2YUg2YUg2YUg2YUg2YUg2YUk2YUk2YUk2YUk2YU84AlddKMYtKMYtKMYtKMYtKMYtKMYtKMYtKMYtKMYtKMYtKMYtKMYtKMYtKMYtKMYtKMYtKMYtKMYtKMYtKMYtKMYtKMYtKMYtKMYtKMYtKMYtKMYtKMYtKMYtKMYtKMYtKMYtKMYtKMYtKMYtKMYtKMYtKMYtKMYtKMYtKMYtKMYtKMYtKMYtKMYtKMYtKMYtKMYtKMYtKMYtKMYtKMYtKMYtKMYtKMYtKMYtKMYtKMYtKMYtKMYtKMYtKMYtKMYtKMYtKMYtKMYtKMYtKMYtKMYtKMYtKMYtKMYtKMYj7AKK7+9hHrqqDD7OWtz//2+vZ6yVffvfTW7vpWivlrLxa5dSvp37/4a7NrULMPsJUbNfvbZ6+1Xl6rhx4XzUbeXh0l31694pUXq0W/HEi1lPr+5V/L173Lt73L973Lj73Lz73Lr73L773Lf+51nR72rdnqP81Tr05ffXvz5at/u90nK9x3bPf8H//5f/7zv/zLP//3/+df/u2//ON//PO//eu/f/ni48v/8/rfmHvVy7eWfDcimP314OWvf0n9+pf0r3/J+uUvef2vke98yfm/5K/H7dXyzl84fv3C9m/fPqL61y/Uv37hq0We2ffyhd99c8j5L/nTIu9/ifz6l+ivf4n9+pf4r3/J6yflePmS76/GvnzJjz8fli8jr9W3f09dr/6g3i7zNOtPr/1SSnJKKU4pzSllPbCUtr99+5/8SezD3l7e9u1fvzRa63at+d0Y8fr73z34P/nr08e9v7/x+8dbvv/5v+zLK3/yK4/bJfzq+O56/6/jyk9+KXH3S/rXv2T98pf85Nb73S+RX/8S/fUvsV//Ev/1L4lf/5Jf/9evX//Xr1//169f/9fvX//X71//1//JDZ04bl/SP3yJ/fqX+K9/Sfz6l+Svf0n94pec/8u/vPLVf0/p/nYX2/NvRtTzf/6///g///kf//O//NOXK4Qv/9f/9a//5eWC4fyf//H//Y8//i/ni/9/","brillig_names":["get_auth_witness","enqueue_public_function_call_internal","call_private_function_internal","debug_log_oracle_wrapper","notify_set_min_revertible_side_effect_counter_oracle_wrapper","directive_integer_quotient","directive_invert"]},{"name":"compute_note_hash_and_optionally_a_nullifier","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{"12265343917440897559":{"error_kind":"fmtstring","item_types":[],"length":20}},"parameters":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"note_type_id","type":{"kind":"field"},"visibility":"private"},{"name":"compute_nullifier","type":{"kind":"boolean"},"visibility":"private"},{"name":"serialized_note","type":{"kind":"array","length":12,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"public"}},"bytecode":"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","debug_symbols":"","brillig_names":["compute_note_hash_and_optionally_a_nullifier"]}],"outputs":{"globals":{"notes":[{"fields":[{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000003de78269"},{"kind":"string","value":"ValueNote"},{"fields":[{"name":"value","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000008c1acdbf"},{"kind":"string","value":"TokenNote"},{"fields":[{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"amount","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":true}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000850bb34d"},{"kind":"string","value":"AddressNote"},{"fields":[{"name":"address","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000be5b3a47"},{"kind":"string","value":"TransparentNote"},{"fields":[{"name":"amount","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"secret_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000003de78269"},{"kind":"string","value":"ValueNote"},{"fields":[{"name":"value","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000008c1acdbf"},{"kind":"string","value":"TokenNote"},{"fields":[{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"amount","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":true}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000850bb34d"},{"kind":"string","value":"AddressNote"},{"fields":[{"name":"address","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000be5b3a47"},{"kind":"string","value":"TransparentNote"},{"fields":[{"name":"amount","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"secret_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"}],"storage":[{"fields":[{"name":"contract_name","value":{"kind":"string","value":"Token"}},{"name":"fields","value":{"fields":[{"name":"admin","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}],"kind":"struct"}},{"name":"minters","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}}],"kind":"struct"}},{"name":"balances","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}}],"kind":"struct"}},{"name":"total_supply","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}}],"kind":"struct"}},{"name":"pending_shields","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000005"}}],"kind":"struct"}},{"name":"public_balances","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000006"}}],"kind":"struct"}},{"name":"symbol","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000007"}}],"kind":"struct"}},{"name":"name","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000008"}}],"kind":"struct"}},{"name":"decimals","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000009"}}],"kind":"struct"}}],"kind":"struct"}}],"kind":"struct"}]},"structs":{"functions":[{"fields":[{"name":"parameters","type":{"fields":[{"name":"app_payload","type":{"fields":[{"name":"function_calls","type":{"kind":"array","length":4,"type":{"fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"protocol_types::abis::function_selector::FunctionSelector"}},{"name":"target_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_public","type":{"kind":"boolean"}},{"name":"is_static","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::entrypoint::function_call::FunctionCall"}}},{"name":"nonce","type":{"kind":"field"}}],"kind":"struct","path":"authwit::entrypoint::app::AppPayload"}},{"name":"fee_payload","type":{"fields":[{"name":"function_calls","type":{"kind":"array","length":2,"type":{"fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"protocol_types::abis::function_selector::FunctionSelector"}},{"name":"target_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_public","type":{"kind":"boolean"}},{"name":"is_static","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::entrypoint::function_call::FunctionCall"}}},{"name":"nonce","type":{"kind":"field"}},{"name":"is_fee_payer","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::entrypoint::fee::FeePayload"}},{"name":"cancellable","type":{"kind":"boolean"}}],"kind":"struct","path":"AccountGroup::entrypoint_parameters"}}],"kind":"struct","path":"AccountGroup::entrypoint_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"inner_hash","type":{"kind":"field"}}],"kind":"struct","path":"AccountGroup::verify_private_authwit_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"AccountGroup::verify_private_authwit_abi"}]}},"file_map":{"116":{"path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr","source":"use dep::protocol_types::abis::validation_requests::{KeyValidationRequest, key_validation_request::KEY_VALIDATION_REQUEST_LENGTH};\n\n#[oracle(getKeyValidationRequest)]\nunconstrained fn get_key_validation_request_oracle(\n    _pk_m_hash: Field,\n    _key_index: Field\n) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {}\n\nunconstrained fn get_key_validation_request_internal(\n    npk_m_hash: Field,\n    key_index: Field\n) -> KeyValidationRequest {\n    let result = get_key_validation_request_oracle(npk_m_hash, key_index);\n    KeyValidationRequest::deserialize(result)\n}\n\nunconstrained pub fn get_key_validation_request(\n    pk_m_hash: Field,\n    key_index: Field\n) -> KeyValidationRequest {\n    get_key_validation_request_internal(pk_m_hash, key_index)\n}\n"},"117":{"path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/call_private_function.nr","source":"use dep::protocol_types::{abis::function_selector::FunctionSelector, address::AztecAddress, utils::reader::Reader};\n\n#[oracle(callPrivateFunction)]\nunconstrained fn call_private_function_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _start_side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> [Field; 2] {}\n\nunconstrained pub fn call_private_function_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    start_side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> (u32, Field) {\n    let fields = call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        start_side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    );\n\n    let mut reader = Reader::new(fields);\n    let end_side_effect_counter = reader.read_u32();\n    let returns_hash = reader.read();\n\n    (end_side_effect_counter, returns_hash)\n}\n"},"120":{"path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/returns.nr","source":"/// Notifies the simulator that `returns` will be later fetched once the function return is processed, referenced by\n/// their hash. This allows the simulator to know how to respond to this future request.\n///\n/// This is only used during private execution, since in public it is the VM itself that keeps track of return values.\npub fn pack_returns(returns: [Field]) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call. When\n    // unpacking however the caller must check that the returned value is indeed the preimage.\n    unsafe {\n        pack_returns_oracle_wrapper(returns)\n    };\n}\n\nunconstrained pub fn pack_returns_oracle_wrapper(returns: [Field]) {\n    let _ = pack_returns_oracle(returns);\n}\n\nunconstrained pub fn unpack_returns<let N: u32>(return_hash: Field) -> [Field; N] {\n    unpack_returns_oracle(return_hash)\n}\n\n#[oracle(packReturns)]\nunconstrained fn pack_returns_oracle(_returns: [Field]) -> Field {}\n\n#[oracle(unpackReturns)]\nunconstrained fn unpack_returns_oracle<let N: u32>(_return_hash: Field) -> [Field; N] {}\n"},"122":{"path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr","source":"use dep::protocol_types::{abis::{function_selector::FunctionSelector}, address::AztecAddress};\n\n#[oracle(enqueuePublicFunctionCall)]\nunconstrained fn enqueue_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> Field {}\n\nunconstrained pub fn enqueue_public_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> Field {\n    enqueue_public_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    )\n}\n\n#[oracle(setPublicTeardownFunctionCall)]\nunconstrained fn set_public_teardown_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> Field {}\n\nunconstrained pub fn set_public_teardown_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> Field {\n    set_public_teardown_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    )\n}\n\npub fn notify_set_min_revertible_side_effect_counter(counter: u32) {\n    unsafe {\n        notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter)\n    };\n}\n\nunconstrained pub fn notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter: u32) {\n    notify_set_min_revertible_side_effect_counter_oracle(counter);\n}\n\n#[oracle(notifySetMinRevertibleSideEffectCounter)]\nunconstrained fn notify_set_min_revertible_side_effect_counter_oracle(_counter: u32) {}\n"},"156":{"path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/hash.nr","source":"use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{GENERATOR_INDEX__SECRET_HASH, GENERATOR_INDEX__MESSAGE_NULLIFIER, GENERATOR_INDEX__FUNCTION_ARGS},\n    point::Point, traits::Hash,\n    hash::{sha256_to_field, poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice}\n};\nuse crate::utils::to_bytes::{arr_to_be_bytes_arr, str_to_be_bytes_arr};\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_unencrypted_log_hash<let N: u32>(contract_address: AztecAddress, log: [u8; N]) -> Field {\n    let mut hash_bytes = [0; N + 36];\n    // Address is converted to 32 bytes in ts\n    let address_bytes: [u8; 32] = contract_address.to_field().to_be_bytes();\n    for i in 0..32 {\n        hash_bytes[i] = address_bytes[i];\n    }\n    let len_bytes: [u8; 4] = (N as Field).to_be_bytes();\n    for i in 0..4 {\n        hash_bytes[32 + i] = len_bytes[i];\n    }\n    for i in 0..N {\n        hash_bytes[36 + i] = log[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\npub fn compute_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field\n) -> Field {\n    let mut hash_bytes = [0 as u8; 192];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret and index of the message hash\n// in the L1 to L2 message tree\npub fn compute_message_nullifier(message_hash: Field, secret: Field, leaf_index: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [message_hash, secret, leaf_index],\n        GENERATOR_INDEX__MESSAGE_NULLIFIER\n    )\n}\n\npub struct ArgsHasher {\n    fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n#[test]\nunconstrained fn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_array() {\n    let contract_address = AztecAddress::from_field(0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6);\n    let log = [\n        0x20660de09f35f876e3e69d227b2a35166ad05f09d82d06366ec9b6f65a51fec2,\n        0x1b52bfe3b8689761916f76dc3d38aa8810860db325cd39ca611eed980091f01c,\n        0x2e559c4045c378a56ad13b9edb1e8de4e7ad3b3aa35cc7ba9ec77f7a68fa43a4,\n        0x25d0f689c4a4178a29d59306f2675824d19be6d25e44fa03b03f49c263053dd2,\n        0x2d513a722d6f352dc0961f156afdc5e31495b9f0e35cb069261a8e55e2df67fd\n    ];\n    let serialized_log = arr_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0095b2d17ab72f4b27a341f7ac63e49ec73935ae8c9181a0ac02023eb12f3284);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_addr() {\n    let contract_address = AztecAddress::from_field(0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6);\n    let log = AztecAddress::from_field(0x26aa302d4715fd8a687453cb26d616b0768027bd54bcae56b09d908ecd9f8303);\n    let serialized_log: [u8; 32] = log.to_field().to_be_bytes();\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0083ab647dfb26e7ddee90a0f4209d049d4660cab42000c544b986aaa84c55a3);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_str() {\n    let contract_address = AztecAddress::from_field(0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8);\n    let log = \"dummy\";\n    let serialized_log = str_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x00629e88ebd6374f44aa6cfe07e251ecf07213ebc7267e8f6b578ae57ffd6c20);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_longer_str() {\n    let contract_address = AztecAddress::from_field(0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8);\n    let log = \"Hello this is a string\";\n    let serialized_log = str_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0098637962f7d34fa202b7ffad8a07a238c5d1fd897b82a108f7f467fa73b841);\n}\n"},"161":{"path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/keys/getters/mod.nr","source":"use dep::protocol_types::address::AztecAddress;\nuse crate::{\n    oracle::{keys::get_public_keys_and_partial_address, key_validation_request::get_key_validation_request},\n    keys::{public_keys::PublicKeys, constants::{NULLIFIER_INDEX, OUTGOING_INDEX}}\n};\n\nmod test;\n\nunconstrained pub fn get_nsk_app(npk_m_hash: Field) -> Field {\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\n}\n\n// A helper function that gets app-siloed outgoing viewing key for a given `ovpk_m_hash`. This function is used\n// in unconstrained contexts only - when computing unconstrained note logs. The safe alternative is `request_ovsk_app`\n// function defined on `PrivateContext`.\nunconstrained pub fn get_ovsk_app(ovpk_m_hash: Field) -> Field {\n    get_key_validation_request(ovpk_m_hash, OUTGOING_INDEX).sk_app\n}\n\n// Returns all public keys for a given account, applying proper constraints to the context. We read all\n// keys at once since the constraints for reading them all are actually fewer than if we read them one at a time - any\n// read keys that are not required by the caller can simply be discarded.\npub fn get_public_keys(account: AztecAddress) -> PublicKeys {\n    let (hinted_canonical_public_keys, partial_address) = unsafe {\n        get_public_keys_and_partial_address(account)\n    };\n    assert_eq(\n        account, AztecAddress::compute(hinted_canonical_public_keys.hash(), partial_address), \"Invalid public keys hint for address\"\n    );\n\n    hinted_canonical_public_keys\n}\n"},"223":{"path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/validation_requests/key_validation_request.nr","source":"use crate::{traits::{Empty, Serialize, Deserialize}, point::Point};\npub use crate::constants::KEY_VALIDATION_REQUEST_LENGTH;\n\npub struct KeyValidationRequest {\n    pk_m: Point,\n    sk_app: Field, // not a grumpkin scalar because it's output of poseidon2\n}\n\nimpl Eq for KeyValidationRequest {\n    fn eq(self, request: KeyValidationRequest) -> bool {\n        (request.pk_m.eq(self.pk_m)) & (request.sk_app.eq(self.sk_app))\n    }\n}\n\nimpl Empty for KeyValidationRequest {\n    fn empty() -> Self {\n        KeyValidationRequest { pk_m: Point::empty(), sk_app: 0 }\n    }\n}\n\nimpl Serialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn serialize(self) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {\n        [\n            self.pk_m.x,\n            self.pk_m.y,\n            self.pk_m.is_infinite as Field,\n            self.sk_app\n        ]\n    }\n}\n\nimpl Deserialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn deserialize(fields: [Field; KEY_VALIDATION_REQUEST_LENGTH]) -> Self {\n        Self { pk_m: Point { x: fields[0], y: fields[1], is_infinite: fields[2] as bool }, sk_app: fields[3] }\n    }\n}\n"},"24":{"path":"std/embedded_curve_ops.nr","source":"use crate::ops::arith::{Add, Sub, Neg};\nuse crate::cmp::Eq;\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\npub struct EmbeddedCurvePoint {\n    x: Field,\n    y: Field,\n    is_infinite: bool\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    pub fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    pub fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: self.x, y: -self.y, is_infinite: self.is_infinite }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite)\n            | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\npub struct EmbeddedCurveScalar {\n    lo: Field,\n    hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    pub fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a,b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n\n    //Bytes to scalar: take the first (after the specified offset) 16 bytes of the input as the lo value, and the next 16 bytes as the hi value\n    #[field(bn254)]\n    pub(crate) fn from_bytes(bytes: [u8; 64], offset: u32) -> EmbeddedCurveScalar {\n        let mut v = 1;\n        let mut lo = 0 as Field;\n        let mut hi = 0 as Field;\n        for i in 0..16 {\n            lo = lo + (bytes[offset+31 - i] as Field) * v;\n            hi = hi + (bytes[offset+15 - i] as Field) * v;\n            v = v * 256;\n        }\n        let sig_s = crate::embedded_curve_ops::EmbeddedCurveScalar { lo, hi };\n        sig_s\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the \n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N]\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    let point_array = multi_scalar_mul_array_return(points, scalars);\n    EmbeddedCurvePoint { x: point_array[0], y: point_array[1], is_infinite: point_array[2] as bool }\n}\n\n#[foreign(multi_scalar_mul)]\nfn multi_scalar_mul_array_return<let N: u32>(points: [EmbeddedCurvePoint; N], scalars: [EmbeddedCurveScalar; N]) -> [Field; 3] {}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_slice(points: [EmbeddedCurvePoint], scalars: [EmbeddedCurveScalar]) -> [Field; 3] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    let g1 = EmbeddedCurvePoint { x: 1, y: 17631683881184975370165255887551781615748388533673675138860, is_infinite: false };\n    multi_scalar_mul([g1], [scalar])\n}\n\n/// This function only assumes that the points are on the curve\n/// It handles corner cases around the infinity point causing some overhead compared to embedded_curve_add_not_nul and embedded_curve_add_unsafe\n// This is a hack because returning an `EmbeddedCurvePoint` from a foreign function in brillig returns a [BrilligVariable::SingleAddr; 2] rather than BrilligVariable::BrilligArray\n// as is defined in the brillig bytecode format. This is a workaround which allows us to fix this without modifying the serialization format.\n// docs:start:embedded_curve_add\npub fn embedded_curve_add(point1: EmbeddedCurvePoint, point2: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n    // docs:end:embedded_curve_add\n    let x_coordinates_match = point1.x == point2.x;\n    let y_coordinates_match = point1.y == point2.y;\n    let double_predicate = (x_coordinates_match & y_coordinates_match);\n    let infinity_predicate = (x_coordinates_match & !y_coordinates_match);\n    let point1_1 = EmbeddedCurvePoint { x: point1.x + (x_coordinates_match as Field), y: point1.y, is_infinite: x_coordinates_match };\n    // point1_1 is guaranteed to have a different abscissa than point2\n    let mut result = embedded_curve_add_unsafe(point1_1, point2);\n    result.is_infinite = x_coordinates_match;\n\n    // dbl if x_match, y_match\n    let double = embedded_curve_add_unsafe(point1, point1);\n    result = if double_predicate { double } else { result };\n\n    // infinity if x_match, !y_match\n    if point1.is_infinite {\n        result= point2;\n    }\n    if point2.is_infinite {\n        result = point1;\n    }\n    let mut result_is_infinity = infinity_predicate & (!point1.is_infinite & !point2.is_infinite);\n    result.is_infinite = result_is_infinity | (point1.is_infinite & point2.is_infinite);\n    result\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(_point1: EmbeddedCurvePoint, _point2: EmbeddedCurvePoint) -> [Field; 3] {}\n\n/// This function assumes that:\n/// The points are on the curve, and\n/// The points don't share an x-coordinate, and\n/// Neither point is the infinity point.\n/// If it is used with correct input, the function ensures the correct non-zero result is returned.\n/// Except for points on the curve, the other assumptions are checked by the function. It will cause assertion failure if they are not respected.\npub fn embedded_curve_add_not_nul(point1: EmbeddedCurvePoint, point2: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n    assert(point1.x != point2.x);\n    assert(!point1.is_infinite);\n    assert(!point2.is_infinite);\n    embedded_curve_add_unsafe(point1, point2)\n}\n\n/// Unsafe ec addition\n/// If the inputs are the same, it will perform a doubling, but only if point1 and point2 are the same variable.\n/// If they have the same value but are different variables, the result will be incorrect because in this case\n/// it assumes (but does not check) that the points' x-coordinates are not equal.\n/// It also assumes neither point is the infinity point.\npub fn embedded_curve_add_unsafe(point1: EmbeddedCurvePoint, point2: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n    let point_array = embedded_curve_add_array_return(point1, point2);\n    let x = point_array[0];\n    let y = point_array[1];\n\n    EmbeddedCurvePoint { x, y, is_infinite: false }\n}\n"},"25":{"path":"std/field/bn254.nr","source":"use crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n\n    let mut low: Field = 0;\n    let mut high: Field = 0;\n\n    let mut offset = 1;\n    for i in 0..16 {\n        low += (x_bytes[i] as Field) * offset;\n        high += (x_bytes[i + 16] as Field) * offset;\n        offset *= 256;\n    }\n\n    (low, high)\n}\n\nunconstrained pub(crate) fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nfn compute_lt(x: Field, y: Field, num_bytes: u32) -> bool {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n    let y_bytes: [u8; 32] = y.to_le_bytes();\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i];\n            let y_byte = y_bytes[num_bytes - 1 - i];\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nfn compute_lte(x: Field, y: Field, num_bytes: u32) -> bool {\n    if x == y {\n        true\n    } else {\n        compute_lt(x, y, num_bytes)\n    }\n}\n\nunconstrained fn lt_32_hint(x: Field, y: Field) -> bool {\n    compute_lt(x, y, 32)\n}\n\nunconstrained fn lte_16_hint(x: Field, y: Field) -> bool {\n    compute_lte(x, y, 16)\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    unsafe {\n        let borrow = lte_16_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size(128);\n        rhi.assert_max_bit_size(128);\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size(128);\n            xhi.assert_max_bit_size(128);\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(compute_lt(b, a, 32));\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        compute_lt(b, a, 32)\n    } else if a == b {\n        false\n    } else {\n        // Take a hint of the comparison and verify it\n        unsafe {\n            if lt_32_hint(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{decompose, compute_lt, assert_gt, gt, TWO_POW_128, compute_lte, PLO, PHI};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    fn check_compute_lt() {\n        assert(compute_lt(0, 1, 16));\n        assert(compute_lt(0, 0x100, 16));\n        assert(compute_lt(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lt(0, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_compute_lte() {\n        assert(compute_lte(0, 1, 16));\n        assert(compute_lte(0, 0x100, 16));\n        assert(compute_lte(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lte(0, TWO_POW_128, 16));\n\n        assert(compute_lte(0, 0, 16));\n        assert(compute_lte(0x100, 0x100, 16));\n        assert(compute_lte(TWO_POW_128 - 1, TWO_POW_128 - 1, 16));\n        assert(compute_lte(TWO_POW_128, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n"},"26":{"path":"std/field/mod.nr","source":"pub mod bn254;\nuse bn254::lt as bn254_lt;\nuse crate::runtime::is_unconstrained;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size(self, bit_size: u32) {\n        // docs:end:assert_max_bit_size\n        crate::assert_constant(bit_size);\n        assert(bit_size < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(bit_size);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    /// \n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_le_bits\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    /// \n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n     // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_be_bits\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    /// \n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self', \n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let  p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    /// \n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self', \n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let  p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        crate::assert_constant(radix);\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        crate::assert_constant(radix);\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N-1-i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n    let y_bytes: [u8; 32] = y.to_le_bytes();\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..32 {\n        if (!done) {\n            let x_byte = x_bytes[32 - 1 - i] as u8;\n            let y_byte = y_bytes[32 - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nmod tests {\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_be_bytes();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bits), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_le_bytes();\n        assert_eq(bits, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bits), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bits), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bits, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bits), field);\n    }\n    // docs:end:to_le_radix_example\n}\n"},"29":{"path":"std/hash/mod.nr","source":"pub mod poseidon;\npub mod mimc;\npub mod poseidon2;\npub mod keccak;\npub mod sha256;\npub mod sha512;\n\nuse crate::default::Default;\nuse crate::uint128::U128;\nuse crate::collections::vec::Vec;\nuse crate::embedded_curve_ops::{EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_slice};\nuse crate::meta::derive_via;\n\n// Kept for backwards compatibility\npub use sha256::{digest, sha256, sha256_compression, sha256_var};\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    pedersen_hash_with_separator_noir(input, separator)\n}\n\npub fn pedersen_commitment_with_separator<let N: u32>(input: [Field; N], separator: u32) -> EmbeddedCurvePoint {\n    let value = __pedersen_commitment_with_separator(input, separator);\n    if (value[0] == 0) & (value[1] == 0) {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    } else {\n        EmbeddedCurvePoint { x: value[0], y: value[1], is_infinite: false }\n    }\n}\n\n#[no_predicates]\nfn pedersen_commitment_with_separator_noir<let N: u32>(input: [Field; N], separator: u32) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n#[no_predicates]\nfn pedersen_hash_with_separator_noir<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: Vec<EmbeddedCurveScalar> = Vec::from_slice([EmbeddedCurveScalar { lo: 0, hi: 0 }; N].as_slice()); //Vec::new();\n\n    for i in 0..N {\n        scalars.set(i, from_field_unsafe(input[i]));\n    }\n    scalars.push(EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field });\n    let domain_generators :[EmbeddedCurvePoint; N]= derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    let mut vec_generators = Vec::new();\n    for i in 0..N {\n        vec_generators.push(domain_generators[i]);\n    }\n    let length_generator : [EmbeddedCurvePoint; 1] = derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    vec_generators.push(length_generator[0]);\n    multi_scalar_mul_slice(vec_generators.slice, scalars.slice)[0]\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator_noir(input, 0)\n}\n\n#[foreign(pedersen_hash)]\nfn __pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {}\n\n#[foreign(pedersen_commitment)]\nfn __pedersen_commitment_with_separator<let N: u32>(input: [Field; N], separator: u32) -> [Field; 2] {}\n\n#[field(bn254)]\npub fn derive_generators<let N: u32, let M: u32>(domain_separator_bytes: [u8; M], starting_index: u32) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(domain_separator_bytes: [u8; M], starting_index: u32) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    let (xlo, xhi) = unsafe {\n        crate::field::bn254::decompose_hint(scalar)\n    };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n// docs:start:keccak256\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{\n    crate::hash::keccak::keccak256(input, message_size)\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: StructDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(s, name, signature, for_each_field, quote {}, |fields| fields)\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H> where H: Hasher {\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default {\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default {\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H) where H: Hasher {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self.lo as Field);\n        H::write(state, self.hi as Field);\n    }\n}\n\nimpl<T, let N: u32> Hash for [T; N] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B) where A: Hash, B: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C) where A: Hash, B: Hash, C: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D) where A: Hash, B: Hash, C: Hash, D: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E) where A: Hash, B: Hash, C: Hash, D: Hash, E: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1), 0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1), EmbeddedCurvePoint {\n        x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n        y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n        is_infinite: false\n    }\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2), 0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2), EmbeddedCurvePoint {\n        x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n        y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3), 0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3), EmbeddedCurvePoint {\n        x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n        y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4), 0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4), EmbeddedCurvePoint {\n        x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n        y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5), 0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5), EmbeddedCurvePoint {\n        x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n        y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6), 0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6), EmbeddedCurvePoint {\n        x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n        y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7), 0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7), EmbeddedCurvePoint {\n        x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n        y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8), 0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8), EmbeddedCurvePoint {\n        x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n        y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9), 0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9), EmbeddedCurvePoint {\n        x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n        y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10), 0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10), EmbeddedCurvePoint {\n        x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n        y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n        is_infinite: false\n    }\n    );\n}\n"},"298":{"path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr","source":"pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self, mut result: [Field; K]) -> [Field; K] {\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    // TODO(#4394)\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array([0; K]));\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(&mut self, deserialise: fn([Field; K]) -> T, mut result: [T; C]) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n"},"300":{"path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/mod.nr","source":"// general util packages/modules are usually bad practice\n// because there is no criteria for what we should not put in here.\n// Reducing the size of this package would be welcome.\n\nmod arrays;\nmod field;\nmod reader;\nmod uint256;\n\n// if predicate == true then return lhs, else return rhs\npub fn conditional_assign(predicate: bool, lhs: Field, rhs: Field) -> Field {\n    if predicate { lhs } else { rhs }\n}\n\npub fn arr_copy_slice<T, let N: u32, let M: u32>(src: [T; N], mut dst: [T; M], offset: u32) -> [T; M] {\n    let iterator_len = if N > M { M } else { N };\n    for i in 0..iterator_len {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n"},"308":{"path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr","source":"use crate::{\n    address::{partial_address::PartialAddress, public_keys_hash::PublicKeysHash},\n    constants::{AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS_V1},\n    hash::poseidon2_hash_with_separator, traits::{Empty, FromField, ToField, Serialize, Deserialize},\n    utils\n};\n\n// Aztec address\npub struct AztecAddress {\n    inner : Field\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn compute(pub_keys_hash: PublicKeysHash, partial_address: PartialAddress) -> AztecAddress {\n        AztecAddress::from_field(\n            poseidon2_hash_with_separator(\n                [pub_keys_hash.to_field(), partial_address.to_field()],\n                GENERATOR_INDEX__CONTRACT_ADDRESS_V1\n            )\n        )\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys_hash() {\n    let pub_keys_hash = PublicKeysHash::from_field(1);\n    let partial_address = PartialAddress::from_field(2);\n\n    let address = AztecAddress::compute(pub_keys_hash, partial_address);\n    let expected_computed_address_from_partial_and_pubkey = 0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n"},"315":{"path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/debug_log.nr","source":"/// Utility function to console.log data in the acir simulator.\n/// Example:\n///   debug_log(\"blah blah this is a debug string\");\npub fn debug_log<let N: u32>(msg: str<N>) {\n    debug_log_format(msg, []);\n}\n\n/// Utility function to console.log data in the acir simulator. This variant receives a format string in which the\n/// `${k}` tokens will be replaced with the k-eth value in the `args` array.\n/// Examples:\n///   debug_log_format(\"get_2(slot:{0}) =>\\n\\t0:{1}\\n\\t1:{2}\", [storage_slot, note0_hash, note1_hash]);\n///   debug_log_format(\"whole array: {}\", [e1, e2, e3, e4]);\npub fn debug_log_format<let M: u32, let N: u32>(msg: str<M>, args: [Field; N]) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        debug_log_oracle_wrapper(msg, args)\n    };\n}\n\nunconstrained pub fn debug_log_oracle_wrapper<let M: u32, let N: u32>(msg: str<M>, args: [Field; N]) {\n    debug_log_oracle(msg, args.as_slice());\n}\n\n// WARNING: sometimes when using debug logs the ACVM errors with: `thrown: \"solver opcode resolution error: cannot solve opcode: expression has too many unknowns x155\"`\n#[oracle(debugLog)]\nunconstrained fn debug_log_oracle<let M: u32>(_msg: str<M>, args: [Field]) {}\n"},"316":{"path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr","source":"use crate::{\n    abis::{\n    contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n    function_selector::FunctionSelector, log_hash::{LogHash, ScopedLogHash, ScopedEncryptedLogHash},\n    note_hash::ScopedNoteHash, nullifier::ScopedNullifier\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__OUTER_NULLIFIER,\n    GENERATOR_INDEX__VK, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__UNIQUE_NOTE_HASH,\n    MAX_ENCRYPTED_LOGS_PER_TX, MAX_NOTE_ENCRYPTED_LOGS_PER_TX\n},\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    recursion::verification_key::VerificationKey, traits::{is_empty, ToField},\n    utils::field::field_from_bytes_32_trunc\n};\nuse super::utils::field::field_from_bytes;\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = std::hash::sha256(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT]\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(function_leaf, function_leaf_index, function_leaf_sibling_path)\n}\n\nfn compute_note_hash_nonce(tx_hash: Field, note_index_in_tx: u32) -> Field {\n    // Hashing tx hash with note index in tx is guaranteed to be unique\n    poseidon2_hash_with_separator(\n        [\n        tx_hash,\n        note_index_in_tx as Field\n    ],\n        GENERATOR_INDEX__NOTE_HASH_NONCE\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, note_hash: Field) -> Field {\n    let inputs = [nonce, note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, unique_note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [\n        app.to_field(),\n        unique_note_hash\n    ],\n        GENERATOR_INDEX__SILOED_NOTE_HASH\n    )\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash, tx_hash: Field, note_index_in_tx: u32) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(tx_hash, note_index_in_tx);\n        let unique_note_hash = compute_unique_note_hash(nonce, note_hash.value());\n        compute_siloed_note_hash(note_hash.contract_address, unique_note_hash)\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [\n        app.to_field(),\n        nullifier\n    ],\n        GENERATOR_INDEX__OUTER_NULLIFIER\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn silo_encrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    // We assume contract address has already been masked\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        accumulate_sha256([log_hash.contract_address.to_field(), log_hash.log_hash.value])\n    }\n}\n\npub fn mask_encrypted_log_hash(scoped_log: ScopedEncryptedLogHash) -> AztecAddress {\n    if scoped_log.contract_address.is_zero() {\n        AztecAddress::from_field(0)\n    } else if (scoped_log.log_hash.randomness == 0) {\n        scoped_log.contract_address\n    } else {\n        AztecAddress::from_field(\n            poseidon2_hash_with_separator(\n                [scoped_log.contract_address.to_field(), scoped_log.log_hash.randomness],\n                0\n            )\n        )\n    }\n}\n\nfn compute_siloed_unencrypted_log_hash(address: AztecAddress, log_hash: Field) -> Field {\n    accumulate_sha256([address.to_field(), log_hash])\n}\n\npub fn silo_unencrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_unencrypted_log_hash(log_hash.contract_address, log_hash.value())\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn stdlib_recursion_verification_key_compress_native_vk(_vk: VerificationKey) -> Field {\n    // Original cpp code\n    // stdlib::recursion::verification_key<CT::bn254>::compress_native(private_call.vk, GeneratorIndex::VK);\n    // The above cpp method is only ever called on verification key, so it has been special cased here\n    let _hash_index = GENERATOR_INDEX__VK;\n    0\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field\n) -> Field {\n    let mut bytes: BoundedVec<u8, 160> = BoundedVec::new();\n\n    let inputs = [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..inputs.len() {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes.push(item_bytes[j]);\n        }\n    }\n\n    sha256_to_field(bytes.storage)\n}\n\npub fn silo_l2_to_l1_message(msg: ScopedL2ToL1Message, rollup_version_id: Field, chain_id: Field) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\n// Computes the final logs hash for a tx.\n// NB: this assumes MAX_ENCRYPTED_LOGS_PER_TX == MAX_UNENCRYPTED_LOGS_PER_TX\n// to avoid doubling code, since we can't define the byte len to be 32*N directly.\npub fn compute_tx_logs_hash(logs: [LogHash; MAX_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_ENCRYPTED_LOGS_PER_TX {\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn compute_tx_note_logs_hash(logs: [LogHash; MAX_NOTE_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_NOTE_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_NOTE_ENCRYPTED_LOGS_PER_TX {\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(\n    inputs: [Field; N],\n    separator: T\n) -> Field where T: ToField {\n    // We manually hash the inputs here, since we cannot express with the type system a constant size inputs array of N + 1\n    let in_len = N + 1;\n    let two_pow_64 = 18446744073709551616;\n    let iv : Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field where T: ToField {\n    let in_len = inputs.len() + 1;\n    let two_pow_64 = 18446744073709551616;\n    let iv : Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    // We manually hash the inputs here, since we cannot express with the type system a constant size inputs array of Math.ceil(N/31)\n    let mut in_len = N / 31;\n    let mut has_padding = false;\n    if N % 31 != 0 {\n        in_len += 1;\n        has_padding = true;\n    }\n\n    let two_pow_64 = 18446744073709551616;\n    let iv : Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            sponge.absorb(field_from_bytes(current_field, false));\n            current_field = [0; 31];\n        }\n    }\n    if has_padding {\n        sponge.absorb(field_from_bytes(current_field, false));\n    }\n\n    sponge.squeeze()\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\n        20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\n        40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n        60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\n        80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,\n        100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,\n        120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139,\n        140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = std::hash::sha256(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(1), EthAddress::from_field(3), 5, 2, 4);\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n        message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n        contract_address: AztecAddress::from_field(3)\n    },\n        version,\n        chainId\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n"},"332":{"path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/authwit/src/auth.nr","source":"use dep::aztec::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress,\n    constants::{\n    GENERATOR_INDEX__AUTHWIT_INNER, GENERATOR_INDEX__AUTHWIT_OUTER, GENERATOR_INDEX__AUTHWIT_NULLIFIER,\n    CANONICAL_AUTH_REGISTRY_ADDRESS\n},\n    hash::poseidon2_hash_with_separator\n};\nuse dep::aztec::{context::{PrivateContext, PublicContext, gas::GasOpts}, hash::hash_args_array};\n\n/**\n * Authenticaion witness helper library\n *\n * Authentication Witness is a scheme for authenticating actions on Aztec, so users can allow third-parties\n * (e.g. protocols or other users) to execute an action on their behalf.\n *\n * This library provides helper functions to manage such witnesses.\n * The authentication witness, is some \"witness\" (data) that authenticates a `message_hash`.\n * The simplest example of an authentication witness, is a signature. The signature is the \"evidence\",\n * that the signer has seen the message, agrees with it, and has allowed it.\n * It does not need to be a signature. It could be any kind of \"proof\" that the message is allowed.\n * Another proof could be knowing some kind of secret, or having some kind of \"token\" that allows the message.\n *\n * The `message_hash` is a hash of the following structure:\n * hash(consumer, chain_id, version, inner_hash)\n * - consumer: the address of the contract that is \"consuming\" the message,\n * - chain_id: the chain id of the chain that the message is being consumed on,\n * - version: the version of the chain that the message is being consumed on,\n * - inner_hash: the hash of the \"inner\" message that is being consumed, this is the \"actual\" message or action.\n *\n * While the `inner_hash` could be anything, such as showing you signed a specific message, it will often be\n * a hash of the \"action\" to approve, along with who made the call. As part of this library, we provide a few\n * helper functions to deal with such messages.\n *\n * For example, we provide helper function that is used for checking that the message is an encoding of the current call.\n * This can be used to let some contract \"allow\" another contract to act on its behalf, as long as it can\n * show that it is acting on behalf of the contract.\n *\n * If we take a case of allowing a contract to transfer tokens on behalf of an account, the `inner_hash` can be\n * derived as:\n * inner_hash = hash(caller, \"transfer\", hash(to, amount))\n *\n * Where the `caller` would be the address of the contract that is trying to transfer the tokens, and `to` and `amount`\n * the arguments for the transfer.\n *\n * Note that we have both a `caller` and a `consumer`, the `consumer` will be the contract that is consuming the message,\n * in the case of the transfer, it would be the `Token` contract itself, while the caller, will be the actor that is\n * allowed to transfer the tokens.\n *\n *\n * The authentication mechanism works differently in public and private contexts. In private, we recall that everything\n * is executed on the user's device, so we can use `oracles` to \"ask\" the user (not contract) for information. In public\n * we cannot do this, since it is executed by the sequencer (someone else). Therefore we can instead use a \"registry\"\n * to store the messages that we have approved.\n *\n * A simple example would be a \"token\" that is being \"pulled\" from one account into another. We will first outline\n * how this would look in private, and then in public later.\n *\n * Say that a user `Alice` wants to deposit some tokens into a DeFi protocol (say a DEX).\n * `Alice` would make a `deposit` transaction, that she is executing using her account contract.\n * The account would call the `DeFi` contract to execute `deposit`, which would try to pull funds from the `Token`\n * contract. Since the `DeFi` contract is trying to pull funds from an account that is not its own, it needs to\n * convince the `Token` contract that it is allowed to do so.\n *\n * This is where the authentication witness comes in The `Token` contract computes a `message_hash` from the\n * `transfer` call, and then asks `Alice Account` contract to verify that the `DeFi` contract is allowed to\n * execute that call.\n *\n * `Alice Account` contract can then ask `Alice` if she wants to allow the `DeFi` contract to pull funds from her\n * account. If she does, she will sign the `message_hash` and return the signature to the `Alice Account` which\n * will validate it and return success to the `Token` contract which will then allow the `DeFi` contract to pull\n * funds from `Alice`.\n *\n * To ensure that the same \"approval\" cannot be used multiple times, we also compute a `nullifier` for the\n * authentication witness, and emit it from the `Token` contract (consumer).\n *\n * Note that we can do this flow as we are in private were we can do oracle calls out from contracts.\n *\n *\n *  Person          Contract              Contract               Contract\n *  Alice          Alice Account          Token                   DeFi\n *   |                  |                  |                      |\n *   | Defi.deposit(Token, 1000)           |                      |\n *   |----------------->|                  |                      |\n *   |                  | deposit(Token, 1000)                    |\n *   |                  |---------------------------------------->|\n *   |                  |                  |                      |\n *   |                  |                  | transfer(Alice, Defi, 1000)\n *   |                  |                  |<---------------------|\n *   |                  |                  |                      |\n *   |                  | Check if Defi may call transfer(Alice, Defi, 1000)\n *   |                  |<-----------------|                      |\n *   |                  |                  |                      |\n *   | Please give me AuthWit for DeFi     |                      |\n *   | calling transfer(Alice, Defi, 1000) |                      |\n *   |<-----------------|                  |                      |\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *   | AuthWit for transfer(Alice, Defi, 1000)                    |\n *   |----------------->|                  |                      |\n *   |                  | AuthWit validity |                      |\n *   |                  |----------------->|                      |\n *   |                  |                  |                      |\n *   |                  |       throw if invalid AuthWit          |\n *   |                  |                  |                      |\n *   |                  |       emit AuthWit nullifier            |\n *   |                  |                  |                      |\n *   |                  |       transfer(Alice, Defi, 1000)       |\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *   |                  |                  | success              |\n *   |                  |                  |--------------------->|\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *   |                  |                  |           deposit(Token, 1000)\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *\n *\n * If we instead were in public, we cannot do the same flow. Instead we would use an authentication registry to store\n * the messages that we have approved.\n *\n * To approve a message, `Alice Account` can make a `set_authorized` call to the registry, to set a `message_hash`\n * as authorized. This is essentially a mapping from `message_hash` to `true` for `Alice Contract`. Every account\n * has its own map in the registry, so `Alice` cannot approve a message for `Bob`.\n *\n * The `Token` contract can then try to \"spend\" the approval by calling `consume` on the registry. If the message\n * was approved, the value is updated to `false`, and we return the success flag. For more information on the\n * registry, see `main.nr` in `auth_registry_contract`.\n *\n * Person          Contract              Contract            Contract               Contract\n * Alice          Alice Account          Registry             Token                   DeFi\n *   |                  |                    |                   |                      |\n *   | Registry.set_authorized(..., true)    |                   |                      |\n *   |----------------->|                    |                   |                      |\n *   |                  | set_authorized(..., true)              |                      |\n *   |                  |------------------->|                   |                      |\n *   |                  |                    |                   |                      |\n *   |                  |         set authorized to true         |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |                      |\n *   | Defi.deposit(Token, 1000)             |                   |                      |\n *   |----------------->|                    |                   |                      |\n *   |                  | deposit(Token, 1000)                   |                      |\n *   |                  |-------------------------------------------------------------->|\n *   |                  |                    |                   |                      |\n *   |                  |                    |              transfer(Alice, Defi, 1000) |\n *   |                  |                    |                   |<---------------------|\n *   |                  |                    |                   |                      |\n *   |                  |                    | Check if Defi may call transfer(Alice, Defi, 1000)\n *   |                  |                    |<------------------|                      |\n *   |                  |                    |                   |                      |\n *   |                  |          throw if invalid AuthWit      |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |                      |\n *   |                  |           set authorized to false      |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    | AuthWit validity  |                      |\n *   |                  |                    |------------------>|                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   | transfer(Alice, Defi, 1000)\n *   |                  |                    |                   |<-------------------->|\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   | success              |\n *   |                  |                    |                   |--------------------->|\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |     deposit(Token, 1000)\n *   |                  |                    |                   |                      |\n *\n *\n * --- FAQ ---\n * Q:   Why are we using a success flag of `poseidon2_hash_bytes(\"IS_VALID()\")` instead of just returning a boolean?\n * A:   We want to make sure that we don't accidentally return `true` if there is a collision in the function selector.\n *      By returning a hash of `IS_VALID()`, it becomes very unlikely that there is both a collision and we return\n *      a success flag.\n *\n * Q:   Why are we using static calls?\n * A:   We are using static calls to ensure that the account contract cannot re-enter. If it was a normal call, it\n *      could make a new call and do a re-entry attack. Using a static ensures that it cannot update any state.\n *\n * Q:   Would it not be cheaper to use a nullifier instead of updating state in public?\n * A:   At a quick glance, a public state update + nullifier is 96 bytes, but two state updates are 128, so it would be\n *      cheaper to use a nullifier, if this is the way it would always be done. However, if both the approval and the\n *      consumption is done in the same transaction, then we will be able to squash the updates (only final tx state diff is posted to DA), and now it is cheaper.\n *\n * Q:   Why is the chain id and the version part of the message hash?\n * A:   The chain id and the version is part of the message hash to ensure that the message is only valid on a specific\n *      chain to avoid a case where the same message could be used across multiple chains.\n */\n\nglobal IS_VALID_SELECTOR = 0x47dacd73; // 4 last bytes of poseidon2_hash_bytes(\"IS_VALID()\")\n\n/**\n * Assert that `on_behalf_of` have authorized the current call with a valid authentication witness\n *\n * Computing the `inner_hash` using the `msg_sender`, `selector` and `args_hash` and then making a call out to the\n * `on_behalf_of` contract to verify that the `inner_hash` is valid.\n *\n * @param on_behalf_of The address that have authorized the current call\n */\n// docs:start:assert_current_call_valid_authwit\npub fn assert_current_call_valid_authwit(context: &mut PrivateContext, on_behalf_of: AztecAddress) {\n    let inner_hash = compute_inner_authwit_hash([context.msg_sender().to_field(), context.selector().to_field(), context.args_hash]);\n    assert_inner_hash_valid_authwit(context, on_behalf_of, inner_hash);\n}\n// docs:end:assert_current_call_valid_authwit\n\n/**\n * Assert that a specific `inner_hash` is valid for the `on_behalf_of` address\n *\n * Used as an internal function for `assert_current_call_valid_authwit` and can be used as a standalone function when\n * the `inner_hash` is from a different source, e.g., say a block of text etc.\n *\n * @param on_behalf_of The address that have authorized the current call\n * @param inner_hash The hash of the message to authorize\n */\npub fn assert_inner_hash_valid_authwit(context: &mut PrivateContext, on_behalf_of: AztecAddress, inner_hash: Field) {\n    // We perform a static call here and not a standard one to ensure that the account contract cannot re-enter.\n    let result: Field = context.static_call_private_function(\n        on_behalf_of,\n        comptime {\n        FunctionSelector::from_signature(\"verify_private_authwit(Field)\")\n    },\n        [inner_hash]\n    ).unpack_into();\n    assert(result == IS_VALID_SELECTOR, \"Message not authorized by account\");\n    // Compute the nullifier, similar computation to the outer hash, but without the chain_id and version.\n    // Those should already be handled in the verification, so we just need something to nullify, that allow same inner_hash for multiple actors.\n    let nullifier = compute_authwit_nullifier(on_behalf_of, inner_hash);\n    context.push_nullifier(nullifier);\n}\n\n/**\n * Assert that `on_behalf_of` have authorized the current call in the authentication registry\n *\n * Computing the `inner_hash` using the `msg_sender`, `selector` and `args_hash` and then making a call out to the\n * `on_behalf_of` contract to verify that the `inner_hash` is valid.\n *\n * Note that the authentication registry will take the `msg_sender` into account as the consumer, so this will only\n * work if the `msg_sender` is the same as the `consumer` when the `message_hash` was inserted into the registry.\n *\n * @param on_behalf_of The address that have authorized the current call\n */\n// docs:start:assert_current_call_valid_authwit_public\npub fn assert_current_call_valid_authwit_public(\n    context: &mut PublicContext,\n    on_behalf_of: AztecAddress\n) {\n    let inner_hash = compute_inner_authwit_hash(\n        [(*context).msg_sender().to_field(), (*context).selector().to_field(), (*context).get_args_hash()]\n    );\n    assert_inner_hash_valid_authwit_public(context, on_behalf_of, inner_hash);\n}\n// docs:end:assert_current_call_valid_authwit_public\n\n/**\n * Assert that `on_behalf_of` have authorized a speicifc `inner_hash` in the authentication registry\n *\n * Computing the `inner_hash` using the `msg_sender`, `selector` and `args_hash` and then making a call out to the\n * `on_behalf_of` contract to verify that the `inner_hash` is valid.\n *\n * Note that the authentication registry will take the `msg_sender` into account as the consumer, so this will only\n * work if the `msg_sender` is the same as the `consumer` when the `message_hash` was inserted into the registry.\n *\n * @param on_behalf_of The address that have authorized the `inner_hash`\n */\npub fn assert_inner_hash_valid_authwit_public(context: &mut PublicContext, on_behalf_of: AztecAddress, inner_hash: Field) {\n    let result: Field = context.call_public_function(\n        CANONICAL_AUTH_REGISTRY_ADDRESS,\n        comptime {\n        FunctionSelector::from_signature(\"consume((Field),Field)\")\n    },\n        [on_behalf_of.to_field(), inner_hash].as_slice(),\n        GasOpts::default()\n    ).deserialize_into();\n    assert(result == IS_VALID_SELECTOR, \"Message not authorized by account\");\n}\n\n/**\n * Compute the `message_hash` from a function call to be used by an authentication witness\n *\n * Useful for when you need a non-account contract to approve during execution. For example if you need a contract\n * to make a call to nested contract, e.g., contract A wants to exit token T to L1 using bridge B, so it needs to allow\n * B to transfer T on its behalf.\n *\n * @param caller The address of the contract that is calling the function, in the example above, this would be B\n * @param consumer The address of the contract that is consuming the message, in the example above, this would be T\n * @param chain_id The chain id of the chain that the message is being consumed on\n * @param version The version of the chain that the message is being consumed on\n * @param selector The function selector of the function that is being called\n * @param args The arguments of the function that is being called\n */\n// docs:start:compute_authwit_message_hash_from_call\npub fn compute_authwit_message_hash_from_call<let N: u32>(\n    caller: AztecAddress,\n    consumer: AztecAddress,\n    chain_id: Field,\n    version: Field,\n    selector: FunctionSelector,\n    args: [Field; N]\n) -> Field {\n    let args_hash = hash_args_array(args);\n    let inner_hash = compute_inner_authwit_hash([caller.to_field(), selector.to_field(), args_hash]);\n    compute_authwit_message_hash(consumer, chain_id, version, inner_hash)\n}\n// docs:end:compute_authwit_message_hash_from_call\n\n/**\n * Computes the `inner_hash` of the authentication witness\n *\n * This is used internally, but also useful in cases where you want to compute the `inner_hash` for a specific message\n * that is not necessarily a call, but just some \"bytes\" or text.\n *\n * @param args The arguments to hash\n */\npub fn compute_inner_authwit_hash<let N: u32>(args: [Field; N]) -> Field {\n    poseidon2_hash_with_separator(args, GENERATOR_INDEX__AUTHWIT_INNER)\n}\n\n/**\n * Computs the `authwit_nullifier` for a specific `on_behalf_of` and `inner_hash`\n *\n * Using the `on_behalf_of` and the `inner_hash` to ensure that the nullifier is siloed for a specific `on_behalf_of`.\n *\n * @param on_behalf_of The address that have authorized the `inner_hash`\n * @param inner_hash The hash of the message to authorize\n */\npub fn compute_authwit_nullifier(on_behalf_of: AztecAddress, inner_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [on_behalf_of.to_field(), inner_hash],\n        GENERATOR_INDEX__AUTHWIT_NULLIFIER\n    )\n}\n\n/**\n * Computes the `message_hash` for the authentication witness\n *\n * @param consumer The address of the contract that is consuming the message\n * @param chain_id The chain id of the chain that the message is being consumed on\n * @param version The version of the chain that the message is being consumed on\n * @param inner_hash The hash of the \"inner\" message that is being consumed\n */\npub fn compute_authwit_message_hash(consumer: AztecAddress, chain_id: Field, version: Field, inner_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [\n        consumer.to_field(),\n        chain_id,\n        version,\n        inner_hash\n    ],\n        GENERATOR_INDEX__AUTHWIT_OUTER\n    )\n}\n\n/**\n * Helper function to set the authorization status of a message hash\n *\n * Wraps a public call to the authentication registry to set the authorization status of a `message_hash`\n *\n * @param message_hash The hash of the message to authorize\n * @param authorize True if the message should be authorized, false if it should be revoked\n */\npub fn set_authorized(context: &mut PublicContext, message_hash: Field, authorize: bool) {\n    context.call_public_function(\n        CANONICAL_AUTH_REGISTRY_ADDRESS,\n        comptime {\n        FunctionSelector::from_signature(\"set_authorized(Field,bool)\")\n    },\n        [message_hash, authorize as Field].as_slice(),\n        GasOpts::default()\n    ).assert_empty();\n}\n\n/**\n * Helper function to reject all authwits\n *\n * Wraps a public call to the authentication registry to set the `reject_all` flag\n *\n * @param reject True if all authwits should be rejected, false otherwise\n */\npub fn set_reject_all(context: &mut PublicContext, reject: bool) {\n    context.call_public_function(\n        CANONICAL_AUTH_REGISTRY_ADDRESS,\n        comptime {\n        FunctionSelector::from_signature(\"set_reject_all(bool)\")\n    },\n        [context.this_address().to_field(), reject as Field].as_slice(),\n        GasOpts::default()\n    ).assert_empty();\n}\n"},"333":{"path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/authwit/src/auth_witness.nr","source":"#[oracle(getAuthWitness)]\nunconstrained fn get_auth_witness_oracle<let N: u32>(_message_hash: Field) -> [Field; N] {}\n\n/**\n * Oracle wrapper to fetch an `auth_witness` for a given `message_hash` from the PXE.\n * \n * @param message_hash The hash of the message for which the `auth_witness` is to be fetched.\n * @return The `auth_witness` for the given `message_hash` as Field array.\n */\nunconstrained pub fn get_auth_witness<let N: u32>(message_hash: Field) -> [Field; N] {\n    get_auth_witness_oracle(message_hash)\n}\n"},"334":{"path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/authwit/src/entrypoint/fee.nr","source":"use dep::aztec::prelude::PrivateContext;\nuse dep::aztec::protocol_types::{\n    constants::GENERATOR_INDEX__FEE_PAYLOAD, hash::poseidon2_hash_with_separator,\n    traits::{Hash, Serialize}\n};\nuse crate::entrypoint::function_call::FunctionCall;\n\n// 2 * 5 (FUNCTION_CALL_SIZE) + 2\nglobal FEE_PAYLOAD_SIZE: u32 = 12;\n\n// 2 * 98 (FUNCTION_CALL_SIZE_IN_BYTES) + 32\nglobal FEE_PAYLOAD_SIZE_IN_BYTES: u32 = 228;\n\nglobal MAX_FEE_FUNCTION_CALLS: u32 = 2;\n\n// docs:start:fee-payload-struct\npub struct FeePayload {\n  function_calls: [FunctionCall; MAX_FEE_FUNCTION_CALLS],\n  nonce: Field,\n  is_fee_payer: bool,\n}\n// docs:end:fee-payload-struct\n\nimpl Serialize<FEE_PAYLOAD_SIZE> for FeePayload {\n    // Serializes the entrypoint struct\n    fn serialize(self) -> [Field; FEE_PAYLOAD_SIZE] {\n        let mut fields: BoundedVec<Field, FEE_PAYLOAD_SIZE> = BoundedVec::new();\n        for i in 0..MAX_FEE_FUNCTION_CALLS {\n            fields.extend_from_array(self.function_calls[i].serialize());\n        }\n        fields.push(self.nonce);\n        fields.push(self.is_fee_payer as Field);\n        fields.storage\n    }\n}\n\nimpl Hash for FeePayload {\n    fn hash(self) -> Field {\n        poseidon2_hash_with_separator(self.serialize(), GENERATOR_INDEX__FEE_PAYLOAD)\n    }\n}\n\nimpl FeePayload {\n    fn to_be_bytes(self) -> [u8; FEE_PAYLOAD_SIZE_IN_BYTES] {\n        let mut bytes: BoundedVec<u8, FEE_PAYLOAD_SIZE_IN_BYTES> = BoundedVec::new();\n\n        for i in 0..MAX_FEE_FUNCTION_CALLS {\n            bytes.extend_from_array(self.function_calls[i].to_be_bytes());\n        }\n        bytes.extend_from_array(self.nonce.to_be_bytes::<32>());\n        bytes.push(self.is_fee_payer as u8);\n\n        bytes.storage\n    }\n\n    fn execute_calls(self, context: &mut PrivateContext) {\n        for call in self.function_calls {\n            if !call.target_address.is_zero() {\n                if call.is_public {\n                    context.call_public_function_with_packed_args(\n                        call.target_address,\n                        call.function_selector,\n                        call.args_hash,\n                        call.is_static,\n                        false\n                    );\n                } else {\n                    let _result = context.call_private_function_with_packed_args(\n                        call.target_address,\n                        call.function_selector,\n                        call.args_hash,\n                        call.is_static,\n                        false\n                    );\n                }\n            }\n        }\n        if self.is_fee_payer {\n            context.set_as_fee_payer();\n        }\n    }\n}\n"},"335":{"path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/authwit/src/entrypoint/app.nr","source":"use dep::aztec::prelude::PrivateContext;\nuse dep::aztec::protocol_types::{\n    constants::GENERATOR_INDEX__SIGNATURE_PAYLOAD, hash::poseidon2_hash_with_separator,\n    traits::{Hash, Serialize}\n};\n\nuse crate::entrypoint::function_call::FunctionCall;\n\n// FUNCTION_CALL_SIZE * ACCOUNT_MAX_CALLS + 1\nglobal APP_PAYLOAD_SIZE: u32 = 21;\n// FUNCTION_CALL_SIZE_IN_BYTES * ACCOUNT_MAX_CALLS + 32\nglobal APP_PAYLOAD_SIZE_IN_BYTES: u32 = 424;\n\nglobal ACCOUNT_MAX_CALLS: u32 = 4;\n\n// Note: If you change the following struct you have to update default_entrypoint.ts\n// docs:start:app-payload-struct\npub struct AppPayload {\n  function_calls: [FunctionCall; ACCOUNT_MAX_CALLS],\n  nonce: Field,\n}\n// docs:end:app-payload-struct\n\nimpl Serialize<APP_PAYLOAD_SIZE> for AppPayload {\n    // Serializes the entrypoint struct\n    fn serialize(self) -> [Field; APP_PAYLOAD_SIZE] {\n        let mut fields: BoundedVec<Field, APP_PAYLOAD_SIZE> = BoundedVec::new();\n        for call in self.function_calls {\n            fields.extend_from_array(call.serialize());\n        }\n        fields.push(self.nonce);\n        fields.storage\n    }\n}\n\nimpl Hash for AppPayload {\n    fn hash(self) -> Field {\n        poseidon2_hash_with_separator(self.serialize(), GENERATOR_INDEX__SIGNATURE_PAYLOAD)\n    }\n}\n\nimpl AppPayload {\n    // Serializes the payload as an array of bytes. Useful for hashing with sha256.\n    fn to_be_bytes(self) -> [u8; APP_PAYLOAD_SIZE_IN_BYTES] {\n        let mut bytes: BoundedVec<u8, APP_PAYLOAD_SIZE_IN_BYTES> = BoundedVec::new();\n\n        for i in 0..ACCOUNT_MAX_CALLS {\n            bytes.extend_from_array(self.function_calls[i].to_be_bytes());\n        }\n        bytes.extend_from_array(self.nonce.to_be_bytes::<32>());\n\n        bytes.storage\n    }\n\n    // Executes all private and public calls\n    // docs:start:entrypoint-execute-calls\n    fn execute_calls(self, context: &mut PrivateContext) {\n        for call in self.function_calls {\n            if !call.target_address.is_zero() {\n                if call.is_public {\n                    context.call_public_function_with_packed_args(\n                        call.target_address,\n                        call.function_selector,\n                        call.args_hash,\n                        call.is_static,\n                        false\n                    );\n                } else {\n                    let _result = context.call_private_function_with_packed_args(\n                        call.target_address,\n                        call.function_selector,\n                        call.args_hash,\n                        call.is_static,\n                        false\n                    );\n                }\n            }\n        }\n    }\n    // docs:end:entrypoint-execute-calls\n}\n"},"338":{"path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/authwit/src/account.nr","source":"use dep::aztec::{\n    context::PrivateContext,\n    protocol_types::constants::{GENERATOR_INDEX__COMBINED_PAYLOAD, GENERATOR_INDEX__TX_NULLIFIER},\n    hash::poseidon2_hash_with_separator\n};\n\nuse crate::entrypoint::{app::AppPayload, fee::FeePayload};\nuse crate::auth::{IS_VALID_SELECTOR, compute_authwit_message_hash};\n\npub struct AccountActions<Context> {\n  context: Context,\n  is_valid_impl: fn(&mut PrivateContext, Field) -> bool,\n}\n\nimpl<Context> AccountActions<Context> {\n    pub fn init(context: Context, is_valid_impl: fn(&mut PrivateContext, Field) -> bool) -> Self {\n        AccountActions { context, is_valid_impl }\n    }\n}\n\n/**\n * An implementation of the Account Action struct for the private context.\n *\n * Implements logic to verify authorization and execute payloads.\n */\nimpl AccountActions<&mut PrivateContext> {\n\n    /**\n     * Verifies that the `app_hash` and `fee_hash` are authorized and then executes them.\n     *\n     * Executes the `fee_payload` and `app_payload` in sequence.\n     * Will execute the `fee_payload` as part of the setup, and then enter the app phase.\n     *\n     * @param app_payload The payload that contains the calls to be executed in the app phase.\n     * @param fee_payload The payload that contains the calls to be executed in the setup phase.\n     */\n    // docs:start:entrypoint\n    pub fn entrypoint(self, app_payload: AppPayload, fee_payload: FeePayload, cancellable: bool) {\n        let valid_fn = self.is_valid_impl;\n\n        let combined_payload_hash = poseidon2_hash_with_separator(\n            [app_payload.hash(), fee_payload.hash()],\n            GENERATOR_INDEX__COMBINED_PAYLOAD\n        );\n        assert(valid_fn(self.context, combined_payload_hash));\n\n        fee_payload.execute_calls(self.context);\n        self.context.end_setup();\n        app_payload.execute_calls(self.context);\n        if cancellable {\n            let tx_nullifier = poseidon2_hash_with_separator([app_payload.nonce], GENERATOR_INDEX__TX_NULLIFIER);\n            self.context.push_nullifier(tx_nullifier);\n        }\n    }\n    // docs:end:entrypoint\n\n    /**\n     * Verifies that the `msg_sender` is authorized to consume `inner_hash` by the account.\n     *\n     * Computes the `message_hash` using the `msg_sender`, `chain_id`, `version` and `inner_hash`.\n     * Then executes the `is_valid_impl` function to verify that the message is authorized.\n     *\n     * Will revert if the message is not authorized.\n     *\n     * @param inner_hash The hash of the message that the `msg_sender` is trying to consume.\n     */\n    // docs:start:verify_private_authwit\n    pub fn verify_private_authwit(self, inner_hash: Field) -> Field {\n        // The `inner_hash` is \"siloed\" with the `msg_sender` to ensure that only it can\n        // consume the message.\n        // This ensures that contracts cannot consume messages that are not intended for them.\n        let message_hash = compute_authwit_message_hash(\n            self.context.msg_sender(),\n            self.context.chain_id(),\n            self.context.version(),\n            inner_hash\n        );\n        let valid_fn = self.is_valid_impl;\n        assert(valid_fn(self.context, message_hash) == true, \"Message not authorized by account\");\n        IS_VALID_SELECTOR\n    }\n    // docs:end:verify_private_authwit\n}\n"},"34":{"path":"std/hash/poseidon2.nr","source":"use crate::hash::Hasher;\nuse crate::default::Default;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field;3],\n    state: [Field;4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        if message_size == N {\n            Poseidon2::hash_internal(input, N, false)\n        } else {\n            Poseidon2::hash_internal(input, message_size, true)\n        }\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result = Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(input: [Field; N], in_len: u32, is_variable_length: bool) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv : Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher{\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv : Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n"},"345":{"path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/value-note/src/value_note.nr","source":"use dep::aztec::{\n    protocol_types::{traits::Serialize, constants::GENERATOR_INDEX__NOTE_NULLIFIER, hash::poseidon2_hash_with_separator},\n    macros::notes::note,\n    note::{note_header::NoteHeader, note_interface::NullifiableNote, utils::compute_note_hash_for_nullify},\n    oracle::random::random, keys::getters::get_nsk_app, context::PrivateContext\n};\n\nglobal VALUE_NOTE_LEN: u32 = 3; // 3 plus a header.\n\n// docs:start:value-note-def\n// ValueNote is used as fn parameter in the Claim contract, so it has to implement the Serialize trait.\n// It is important that the order of these annotations is preserved so that derive(Serialize) runs AFTER the note macro, which injects the note header.\n#[note]\n#[derive(Serialize)]\npub struct ValueNote {\n    value: Field,\n   // The nullifying public key hash is used with the nsk_app to ensure that the note can be privately spent.\n    npk_m_hash: Field,\n    randomness: Field,\n}\n// docs:end:value-note-def\n\nimpl NullifiableNote for ValueNote {\n    // docs:start:nullifier\n\n    fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field {\n        let secret = context.request_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n\n    // docs:end:nullifier\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let secret = get_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n}\n\nimpl ValueNote {\n    pub fn new(value: Field, npk_m_hash: Field) -> Self {\n        // We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing, so a\n        // malicious sender could use non-random values to make the note less private. But they already know the full\n        // note pre-image anyway, and so the recipient already trusts them to not disclose this information. We can\n        // therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe {\n            random()\n        };\n        let header = NoteHeader::empty();\n        ValueNote { value, npk_m_hash, randomness, header }\n    }\n}\n\nimpl Eq for ValueNote {\n    fn eq(self, other: Self) -> bool {\n        (self.value == other.value)\n            & (self.npk_m_hash == other.npk_m_hash)\n            & (self.randomness == other.randomness)\n    }\n}\n"},"346":{"path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-contracts/contracts/token_contract/src/types/token_note.nr","source":"use dep::aztec::{\n    prelude::{NoteHeader, NullifiableNote, PrivateContext},\n    protocol_types::{constants::GENERATOR_INDEX__NOTE_NULLIFIER, hash::poseidon2_hash_with_separator},\n    note::utils::compute_note_hash_for_nullify, oracle::random::random, keys::getters::get_nsk_app,\n    macros::notes::partial_note\n};\n\ntrait OwnedNote {\n    fn new(amount: U128, owner_npk_m_hash: Field) -> Self;\n    fn get_amount(self) -> U128;\n}\n\n// docs:start:TokenNote\n#[partial_note(quote {amount})]\npub struct TokenNote {\n    // The amount of tokens in the note\n    amount: U128,\n    // The nullifying public key hash is used with the nsk_app to ensure that the note can be privately spent.\n    npk_m_hash: Field,\n    // Randomness of the note to hide its contents\n    randomness: Field,\n}\n// docs:end:TokenNote\n\nimpl NullifiableNote for TokenNote {\n    // docs:start:nullifier\n    fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field {\n        let secret = context.request_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n    // docs:end:nullifier\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let secret = get_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER\n        )\n    }\n}\n\nimpl Eq for TokenNote {\n    fn eq(self, other: Self) -> bool {\n        (self.amount == other.amount)\n            & (self.npk_m_hash == other.npk_m_hash)\n            & (self.randomness == other.randomness)\n    }\n}\n\nimpl OwnedNote for TokenNote {\n    fn new(amount: U128, owner_npk_m_hash: Field) -> Self {\n        // We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing, so a\n        // malicious sender could use non-random values to make the note less private. But they already know the full\n        // note pre-image anyway, and so the recipient already trusts them to not disclose this information. We can\n        // therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe {\n            random()\n        };\n        Self { amount, npk_m_hash: owner_npk_m_hash, randomness, header: NoteHeader::empty() }\n    }\n\n    fn get_amount(self) -> U128 {\n        self.amount\n    }\n}\n"},"347":{"path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-contracts/contracts/token_contract/src/types/transparent_note.nr","source":"// docs:start:token_types_all\nuse dep::aztec::{\n    note::utils::compute_note_hash_for_nullify, prelude::{NoteHeader, NullifiableNote, PrivateContext},\n    protocol_types::{constants::GENERATOR_INDEX__NOTE_NULLIFIER, hash::poseidon2_hash_with_separator},\n    macros::notes::note\n};\n\nuse dep::std::mem::zeroed;\n\n// Transparent note represents a note that is created in the clear (public execution), but can only be spent by those\n// that know the preimage of the \"secret_hash\" (the secret). This is typically used when shielding a token balance.\n// Owner of the tokens provides a \"secret_hash\" as an argument to the public \"shield\" function and then the tokens\n// can be redeemed in private by presenting the preimage of the \"secret_hash\" (the secret).\n#[note]\npub struct TransparentNote {\n    amount: Field,\n    secret_hash: Field,\n}\n\nimpl NullifiableNote for TransparentNote {\n    // Computing a nullifier in a transparent note is not guarded by making secret a part of the nullifier preimage (as\n    // is common in other cases) and instead is guarded by the functionality of \"redeem_shield\" function. There we do\n    // the following:\n    //      1) We pass the secret as an argument to the function and use it to compute a secret hash,\n    //      2) we fetch a note via the \"get_notes\" oracle which accepts the secret hash as an argument,\n    //      3) the \"get_notes\" oracle constrains that the secret hash in the returned note matches the one computed in\n    //         circuit.\n    // This achieves that the note can only be spent by the party that knows the secret.\n    fn compute_nullifier(self, _context: &mut PrivateContext, _note_hash_for_nullify: Field) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        // compute_nullifier ignores both of its parameters so we can reuse it here\n        self.compute_nullifier(zeroed(), zeroed())\n    }\n}\n\nimpl TransparentNote {\n    // CONSTRUCTORS\n    pub fn new(amount: Field, secret_hash: Field) -> Self {\n        TransparentNote { amount, secret_hash, header: NoteHeader::empty() }\n    }\n}\n\nimpl Eq for TransparentNote {\n    fn eq(self, other: Self) -> bool {\n        (self.amount == other.amount) & (self.secret_hash == other.secret_hash)\n    }\n}\n\n// docs:end:token_types_all\n"},"59":{"path":"std/panic.nr","source":"pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n"},"7":{"path":"std/collections/bounded_vec.nr","source":"use crate::{cmp::Eq, convert::From};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n/// \n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n/// \n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n/// \n/// Example:\n/// \n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a \n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    /// \n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    /// \n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    /// \n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    /// \n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    /// \n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    /// \n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    /// \n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure. \n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    /// \n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    /// \n    /// Panics if the new length of the vector will be greater than the max length.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// \n    /// v.push(1);\n    /// v.push(2);\n    /// \n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    /// \n    /// v.push(100);\n    /// assert(v.len() == 1);\n    /// \n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    /// \n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    /// \n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    /// \n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    /// \n    /// Note that uninitialized elements may be zeroed out!\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    /// \n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    /// \n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    /// \n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    /// \n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    /// \n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    /// \n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    /// \n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    /// \n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    /// \n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    /// \n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        let mut exceeded_len = false;\n        for i in 0..Len {\n            exceeded_len |= i == append_len;\n            if !exceeded_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input. \n    /// The maximum length of the vector is determined based on the type signature.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    /// \n    /// Panics if the vector is empty.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    /// \n    /// let two = v.pop();\n    /// let one = v.pop();\n    /// \n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    /// \n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if !exceeded_len {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.  \n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    /// \n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n        for i in 0..MaxLen {\n            if i < self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        }\n        ret\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen> where T: Eq {\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n\n        (self.len == other.len) & (self.storage == other.storage)\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2)  as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.storage()[2], 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage()[0], 1);\n            assert_eq(bounded_vec.storage()[1], 2);\n            assert_eq(bounded_vec.storage()[2], 3);\n        }\n\n        #[test(should_fail_with=\"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.storage()[0], 1);\n            assert_eq(bounded_vec.storage()[1], 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n}\n"},"70":{"path":"/Users/niallcheetham/dev/aztec/priv2/accountContract/src/main.nr","source":"// Account contract that uses Schnorr signatures for authentication using a hardcoded public key.\nuse dep::aztec::macros::aztec;\n\n#[aztec]\ncontract AccountGroup {\n    use dep::aztec::prelude::PrivateContext;\n    use dep::authwit::{\n        entrypoint::{app::AppPayload, fee::FeePayload}, account::AccountActions,\n        auth_witness::get_auth_witness\n    };\n\n    use dep::aztec::macros::{functions::{private, view}};\n\n    global public_key_x: Field = 0x16b93f4afae55cab8507baeb8e7ab4de80f5ab1e9e1f5149bf8cd0d375451d90;\n    global public_key_y: Field = 0x208d44b36eb6e73b254921134d002da1a90b41131024e3b1d721259182106205;\n\n    // Note: If you globally change the entrypoint signature don't forget to update account_entrypoint.ts\n    #[private]\n    fn entrypoint(app_payload: AppPayload, fee_payload: FeePayload, cancellable: bool) {\n        let actions = AccountActions::init(&mut context, is_valid_impl);\n        actions.entrypoint(app_payload, fee_payload, cancellable);\n    }\n\n    #[private]\n    #[view]\n    fn verify_private_authwit(inner_hash: Field) -> Field {\n        let actions = AccountActions::init(&mut context, is_valid_impl);\n        actions.verify_private_authwit(inner_hash)\n    }\n\n    #[contract_library_method]\n    fn is_valid_impl(_context: &mut PrivateContext, outer_hash: Field) -> bool {\n        // Load auth witness and format as an u8 array\n        let witness: [Field; 64] = unsafe {\n            get_auth_witness(outer_hash)\n        };\n        let mut signature: [u8; 64] = [0; 64];\n        for i in 0..64 {\n            signature[i] = witness[i] as u8;\n        }\n\n        // Verify signature using hardcoded public key\n        std::schnorr::verify_signature(\n            public_key_x,\n            public_key_y,\n            signature,\n            outer_hash.to_be_bytes::<32>()\n        )\n    }\n}"},"72":{"path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/address-note/src/address_note.nr","source":"use dep::aztec::{\n    protocol_types::{address::AztecAddress, constants::GENERATOR_INDEX__NOTE_NULLIFIER, hash::poseidon2_hash_with_separator},\n    note::{note_header::NoteHeader, note_interface::NullifiableNote, utils::compute_note_hash_for_nullify},\n    oracle::random::random, keys::getters::get_nsk_app, context::PrivateContext, macros::notes::note\n};\n\n// docs:start:address_note_def\n// docs:start:address_note_struct\n// Stores an address\n#[note]\npub struct AddressNote {\n    address: AztecAddress,\n    // The nullifying public key hash is used with the nsk_app to ensure that the note can be privately spent.\n    npk_m_hash: Field,\n    randomness: Field,\n}\n// docs:end:address_note_struct\n\nimpl NullifiableNote for AddressNote {\n\n    fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field {\n        let secret = context.request_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let secret = get_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n}\n\nimpl AddressNote {\n    pub fn new(address: AztecAddress, npk_m_hash: Field) -> Self {\n        // We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing, so a\n        // malicious sender could use non-random values to make the note less private. But they already know the full\n        // note pre-image anyway, and so the recipient already trusts them to not disclose this information. We can\n        // therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe {\n            random()\n        };\n        AddressNote { address, npk_m_hash, randomness, header: NoteHeader::empty() }\n    }\n    // docs:end:address_note_def\n}\n"},"79":{"path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/note/utils.nr","source":"use crate::{\n    context::PrivateContext,\n    note::{note_header::NoteHeader, note_interface::{NullifiableNote, NoteInterface}}\n};\n\nuse dep::protocol_types::{\n    hash::{\n    compute_unique_note_hash, compute_siloed_note_hash as compute_siloed_note_hash,\n    compute_siloed_nullifier as compute_siloed_nullifier_from_preimage\n},\n    utils::arr_copy_slice\n};\n\npub fn compute_siloed_nullifier<Note, let N: u32>(\n    note_with_header: Note,\n    context: &mut PrivateContext\n) -> Field where Note: NoteInterface<N> + NullifiableNote {\n    let header = note_with_header.get_header();\n    let note_hash_for_nullify = compute_note_hash_for_nullify(note_with_header);\n    let inner_nullifier = note_with_header.compute_nullifier(context, note_hash_for_nullify);\n\n    compute_siloed_nullifier_from_preimage(header.contract_address, inner_nullifier)\n}\n\n// TODO(#7775): make this not impossible to understand\npub fn compute_note_hash_for_read_request<Note, let N: u32>(note: Note) -> Field where Note: NoteInterface<N> + NullifiableNote {\n    let note_hash = note.compute_note_hash();\n    let nonce = note.get_header().nonce;\n    let counter = note.get_header().note_hash_counter;\n\n    if counter != 0 {\n        note_hash\n    } else {\n        compute_unique_note_hash(nonce, note_hash)\n    }\n}\n\n// TODO(#7775): make this not impossible to understand\npub fn compute_note_hash_for_nullify_internal<Note, let N: u32>(\n    note: Note,\n    note_hash_for_read_request: Field\n) -> Field where Note: NoteInterface<N> + NullifiableNote {\n    let header = note.get_header();\n\n    if header.note_hash_counter != 0 {\n        if header.nonce == 0 {\n            // Case 1: Transient note\n            note_hash_for_read_request\n        } else {\n            // Case 2: Non-revertible note, nullified by a revertible nullifier\n            let unique_note_hash = compute_unique_note_hash(header.nonce, note_hash_for_read_request);\n            compute_siloed_note_hash(header.contract_address, unique_note_hash)\n        }\n    } else {\n        // Case 3: Note from a previous transaction\n        // note_hash_for_read_request is already the unique_note_hash in this case\n        compute_siloed_note_hash(header.contract_address, note_hash_for_read_request)\n    }\n}\n\n// TODO(#7775): nuke this commented out code - kept it around as it contains comments which might be helpful when tackling #7775\n// pub fn compute_note_hash_for_nullify<Note, let N: u32, let M: u32>(note: Note) -> Field where Note: NoteInterface<N> {\n//     let header = note.get_header();\n//     // There are 3 cases for reading a note intended for consumption:\n//     // 1. The note was inserted in this transaction, is revertible, or is not nullified by a revertible nullifier in\n//     //    the same transaction: (note_hash_counter != 0) & (nonce == 0)\n//     // 2. The note was inserted in this transaction, is non-revertible, and is nullified by a revertible nullifier in\n//     //    the same transaction: (note_hash_counter != 0) & (nonce != 0)\n//     // 3. The note was inserted in a previous transaction: (note_hash_counter == 0) & (nonce != 0)\n\n//     let note_hash = note.compute_note_hiding_point().x;\n\n//     if header.nonce == 0 {\n//         // Case 1.\n//         // If a note is transient, we just read the note_hash (kernel will hash it with nonce and silo by contract address).\n//         note_hash\n//     } else {\n//         // Case 2: If a note is non-revertible, and is nullified by a revertible nullifier, we cannot squash them in the\n//         // private reset circuit. Because if the tx reverts, we will have to keep the note hash and throw away the\n//         // nullifier.\n//         // And if the tx does not revert, both will be emitted. In which case, the nullifier must be created in the app\n//         // from the siloed note hash.\n//         // The kernel circuit will check that a nullifier with non-zero note_nonce is linked to a note hash, whose\n//         // siloed note hash matches the note hash specified in the nullifier.\n\n//         // Case 3: If a note is not from the current transaction, that means we are reading a settled note (from\n//         // tree) created in a previous TX. So we need the siloed_note_hash which has already been hashed with\n//         // nonce and then contract address. This hash will match the existing leaf in the note hash\n//         // tree, so the kernel can just perform a membership check directly on this hash/leaf.\n//         let unique_note_hash = compute_unique_note_hash(header.nonce, note_hash);\n//         compute_siloed_note_hash(header.contract_address, unique_note_hash)\n//         // IMPORTANT NOTE ON REDUNDANT SILOING BY CONTRACT ADDRESS: The note hash computed above is\n//         // \"siloed\" by contract address. When a note hash is computed solely for the purpose of\n//         // nullification, it is not strictly necessary to silo the note hash before computing\n//         // its nullifier. In other words, it is NOT NECESSARY for protocol security that a nullifier\n//         // be computed from a siloed note hash. After all, persistable note hashes and nullifiers are\n//         // siloed by the kernel circuit. That being said, the siloed note hash computed above CAN be\n//         // used for nullifier computation, and this achieves the (arguably unnecessary) property that\n//         // nullifiers are computed from a note hash's fully-computed note hash tree leaf.\n//     }\n// }\n\npub fn compute_note_hash_for_nullify<Note, let N: u32>(note: Note) -> Field where Note: NoteInterface<N> + NullifiableNote {\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n    compute_note_hash_for_nullify_internal(note, note_hash_for_read_request)\n}\n\nunconstrained pub fn compute_note_hash_and_optionally_a_nullifier<T, let N: u32, let S: u32>(\n    deserialize_content: fn([Field; N]) -> T,\n    note_header: NoteHeader,\n    compute_nullifier: bool,\n    serialized_note: [Field; S]\n) -> [Field; 4] where T: NoteInterface<N> + NullifiableNote {\n    let mut note = deserialize_content(arr_copy_slice(serialized_note, [0; N], 0));\n    note.set_header(note_header);\n\n    let note_hash = note.compute_note_hash();\n    let unique_note_hash = compute_unique_note_hash(note_header.nonce, note_hash);\n    let siloed_note_hash = compute_siloed_note_hash(note_header.contract_address, unique_note_hash);\n\n    let inner_nullifier = if compute_nullifier {\n        note.compute_nullifier_without_context()\n    } else {\n        0\n    };\n    // docs:start:compute_note_hash_and_optionally_a_nullifier_returns\n    [note_hash, unique_note_hash, siloed_note_hash, inner_nullifier]\n    // docs:end:compute_note_hash_and_optionally_a_nullifier_returns\n}\n"},"95":{"path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/context/private_context.nr","source":"use crate::{\n    context::{inputs::PrivateContextInputs, packed_returns::PackedReturns},\n    messaging::process_l1_to_l2_message, hash::{hash_args_array, ArgsHasher},\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX, NUM_KEY_TYPES, sk_generators},\n    oracle::{\n    key_validation_request::get_key_validation_request, arguments, returns::pack_returns,\n    call_private_function::call_private_function_internal, header::get_header_at,\n    logs::{emit_encrypted_note_log, emit_encrypted_event_log},\n    enqueue_public_function_call::{\n    enqueue_public_function_call_internal, notify_set_min_revertible_side_effect_counter,\n    set_public_teardown_function_call_internal\n}\n}\n};\nuse dep::protocol_types::{\n    abis::{\n    call_context::CallContext, function_selector::FunctionSelector, max_block_number::MaxBlockNumber,\n    validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    private_call_request::PrivateCallRequest, private_circuit_public_inputs::PrivateCircuitPublicInputs,\n    public_call_request::PublicCallRequest, read_request::ReadRequest, note_hash::NoteHash,\n    nullifier::Nullifier, log_hash::{LogHash, NoteLogHash, EncryptedLogHash}\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    MAX_NOTE_HASHES_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL,\n    MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_ENCRYPTED_LOGS_PER_CALL, MAX_UNENCRYPTED_LOGS_PER_CALL,\n    MAX_NOTE_ENCRYPTED_LOGS_PER_CALL, PUBLIC_DISPATCH_SELECTOR\n},\n    header::Header, messaging::l2_to_l1_message::L2ToL1Message, traits::Empty\n};\n\n// When finished, one can call .finish() to convert back to the abi\npub struct PrivateContext {\n    // docs:start:private-context\n    inputs: PrivateContextInputs,\n    side_effect_counter: u32,\n\n    min_revertible_side_effect_counter: u32,\n    is_fee_payer: bool,\n\n    args_hash: Field,\n    return_hash: Field,\n\n    max_block_number: MaxBlockNumber,\n\n    note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    private_call_requests : BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_requests : BoundedVec<PublicCallRequest, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    public_teardown_call_request: PublicCallRequest,\n    l2_to_l1_msgs : BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    note_encrypted_logs_hashes: BoundedVec<NoteLogHash, MAX_NOTE_ENCRYPTED_LOGS_PER_CALL>,\n    encrypted_logs_hashes: BoundedVec<EncryptedLogHash, MAX_ENCRYPTED_LOGS_PER_CALL>,\n    unencrypted_logs_hashes: BoundedVec<LogHash, MAX_UNENCRYPTED_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES]\n        }\n    }\n\n    fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n    }\n\n    fn push_nullifier(&mut self, nullifier: Field) {\n        self.nullifiers.push(Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() });\n    }\n\n    fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        self.nullifiers.push(Nullifier { value: nullifier, note_hash: nullified_note_hash, counter: self.next_counter() });\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_header_at(self, block_number: u32) -> Header {\n        get_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        pack_returns(returns_hasher.fields);\n        self.return_hash = returns_hasher.hash();\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage,\n            nullifier_read_requests: self.nullifier_read_requests.storage,\n            key_validation_requests_and_generators: self.key_validation_requests_and_generators.storage,\n            note_hashes: self.note_hashes.storage,\n            nullifiers: self.nullifiers.storage,\n            private_call_requests: self.private_call_requests.storage,\n            public_call_requests: self.public_call_requests.storage,\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage,\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            note_encrypted_logs_hashes: self.note_encrypted_logs_hashes.storage,\n            encrypted_logs_hashes: self.encrypted_logs_hashes.storage,\n            unencrypted_logs_hashes: self.unencrypted_logs_hashes.storage,\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\"Setting {0} as fee payer\", [self.this_address().to_field()]);\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number = MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request = self.last_key_validation_requests[key_index].unwrap_or(KeyValidationRequest::empty());\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one\n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale. We fetch new values from oracle and instruct\n            // protocol circuits to validate them by storing the validation request in context.\n            let request = get_key_validation_request(pk_m_hash, key_index);\n            let request_and_generator = KeyValidationRequestAndGenerator { request, sk_app_generator: sk_generators[key_index] };\n            // We constrain that the pk_m_hash matches the one in the request (otherwise we could get an arbitrary\n            // valid key request and not the one corresponding to pk_m_hash).\n            assert(request.pk_m.hash() == pk_m_hash);\n            self.key_validation_requests_and_generators.push(request_and_generator);\n            self.last_key_validation_requests[key_index] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(&mut self, content: Field, secret: Field, sender: EthAddress) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    // NB: A randomness value of 0 signals that the kernels should not mask the contract address\n    // used in siloing later on e.g. 'handshaking' contract w/ known address.\n    pub fn emit_raw_event_log_with_masked_address<let M: u32>(\n        &mut self,\n        randomness: Field,\n        log: [u8; M],\n        log_hash: Field\n    ) {\n        let counter = self.next_counter();\n        let contract_address = self.this_address();\n        let len = log.len() as Field + 4;\n        let side_effect = EncryptedLogHash { value: log_hash, counter, length: len, randomness };\n        self.encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_event_log(contract_address, randomness, log, counter);\n    }\n\n    pub fn emit_raw_note_log<let M: u32>(&mut self, note_hash_counter: u32, log: [u8; M], log_hash: Field) {\n        let counter = self.next_counter();\n        let len = log.len() as Field + 4;\n        let side_effect = NoteLogHash { value: log_hash, counter, length: len, note_hash_counter };\n        self.note_encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_note_log(note_hash_counter, log, counter);\n    }\n\n    pub fn call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> PackedReturns {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n        let (end_side_effect_counter, returns_hash) = call_private_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            start_side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.side_effect_counter = end_side_effect_counter + 1;\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n            contract_address,\n            call_context,\n            args_hash,\n            returns_hash,\n            start_side_effect_counter,\n            end_side_effect_counter\n        }\n        );\n\n        PackedReturns::new(returns_hash)\n    }\n\n    pub fn call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\n        // WARNING: This is insecure and should be temporary!\n        // The oracle repacks the arguments and returns a new args_hash.\n        // new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\n        // We don't validate or compute it in the circuit because a) it's harder to do with slices, and\n        // b) this is only temporary.\n        let args_hash = enqueue_public_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        // Public calls are rerouted through the dispatch function.\n        let function_selector = comptime {\n            FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR)\n        };\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let call_request = PublicCallRequest { contract_address, call_context, args_hash, counter };\n        self.public_call_requests.push(call_request);\n    }\n\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.set_public_teardown_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn set_public_teardown_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\n        // WARNING: This is insecure and should be temporary!\n        // The oracle repacks the arguments and returns a new args_hash.\n        // new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\n        // We don't validate or compute it in the circuit because a) it's harder to do with slices, and\n        // b) this is only temporary.\n        let args_hash = set_public_teardown_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let function_selector = comptime {\n            FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR)\n        };\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.public_teardown_call_request = PublicCallRequest {\n            contract_address,\n            call_context,\n            args_hash,\n            counter,\n        };\n    }\n\n    fn generate_call_context(\n        self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> CallContext {\n        let msg_sender = if is_delegate_call {\n            self.msg_sender()\n        } else {\n            self.this_address()\n        };\n        let storage_contract_address = if is_delegate_call {\n            self.this_address()\n        } else {\n            contract_address\n        };\n        CallContext { msg_sender, storage_contract_address, function_selector, is_static_call, is_delegate_call }\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: Header::empty(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES]\n        }\n    }\n}\n"}}}